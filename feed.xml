<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2019-12-18T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Importing images with Webpacker</title>
    <link rel="alternate" href="/blog/importing-images-with-webpacker.html"/>
    <id>/blog/importing-images-with-webpacker.html</id>
    <published>2019-12-18T00:00:00+00:00</published>
    <updated>2019-12-18T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Webpack isn't just for JavaScript. You can bundle images with it too. Webpacker makes it relatively easy to work with images, but it is admittedly confusing at first: &lt;em&gt;Images in JavaScript?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we'll demonstrate how to reference Webpacker...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Webpack isn&amp;#39;t just for JavaScript. You can bundle images with it too. Webpacker makes it relatively easy to work with images, but it is admittedly confusing at first: &lt;em&gt;Images in JavaScript?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we&amp;#39;ll demonstrate how to reference Webpacker images from your JavaScript, CSS, and Rails views.&lt;/p&gt;

      &lt;h3 id="folder-structure" class="title title-h3"&gt;
        &lt;a name="folder-structure" class="anchor" href="#folder-structure"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Folder structure
      &lt;/h3&gt;
    
&lt;p&gt;First, where should you put your images? It doesn&amp;#39;t matter. The easiest place to start is under your &lt;code&gt;app/javascript&lt;/code&gt; folder, the default source path for Webpacker, such as &lt;code&gt;app/javascript/images&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the rest of this guide, we&amp;#39;ll assume the following directory structure and files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/javascript
├── components
│   └── Taco.js
├── css
│   ├── main.css
├── images
│   ├── burritos.jpg
│   ├── guacamole.jpg
│   └── tacos.jpg
└── packs
    └── application.js
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Isn&amp;#39;t weird to put images and css in a folder called &amp;quot;javascript&amp;quot;? Depends. If you consider, from Webpack&amp;#39;s perspective, everything is a JavaScript module, it may not be so strange. Otherwise, it&amp;#39;s possible to rename &lt;code&gt;app/javascript&lt;/code&gt; or place your images elsewhere. More on that below.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="images-in-js" class="title title-h3"&gt;
        &lt;a name="images-in-js" class="anchor" href="#images-in-js"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in JS
      &lt;/h3&gt;
    
&lt;p&gt;To reference an image from JavaScript in your Webpacker build, simply import it like any other module. React is not required for this to work ;)&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascripts/components/Taco.js
import TacoImage from &amp;#39;../images/tacos.jpg&amp;#39;

export default function({ title }) {
  return `
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;${title}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;img src=${TacoImage} alt=&amp;quot;Tacos, yum&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  `
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, Webpack will import &lt;code&gt;TacoImage&lt;/code&gt; as a url to the file. In other words, an &amp;quot;image module&amp;quot; in Webpack exports a single default value, a string, representing the location of the file. Based on the default Webpacker configuration, the filename will look something like &lt;code&gt;&amp;quot;/packs/media/images/tacos-abcd1234.jpg&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importing a image also works if you&amp;#39;re using &amp;quot;CSS in JS&amp;quot; to style a React component.&lt;/p&gt;

&lt;pre&gt;&lt;code class="jsx"&gt;import React from &amp;#39;react&amp;#39;

import TacoImage from &amp;#39;../images/tacos.jpg&amp;#39;

const styles = {
  backgroundImage: `url(${TacoImage})`,
}

export default function ({ title }) {
  return (
    &amp;lt;div style={styles}&amp;gt;
      {title}!
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="images-in-css" class="title title-h2"&gt;
        &lt;a name="images-in-css" class="anchor" href="#images-in-css"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in CSS
      &lt;/h2&gt;
    
&lt;p&gt;In Sprockets, when referencing images in CSS, you would use a special &lt;code&gt;image-url()&lt;/code&gt; helper. In Webpack, simply use the standard &lt;code&gt;url()&lt;/code&gt; expression in CSS with a relative path.&lt;/p&gt;

&lt;pre&gt;&lt;code class="css"&gt;/* app/javascript/css/main.css */
.burritos {
  background-image: url(&amp;quot;../images/burritos.jpg&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output for the style rule will, again, look something like &lt;code&gt;background-image: url(/packs/media/images/burritos-efgh5678.jpg);&lt;/code&gt;. This technique will also work for image paths in CSS Modules.&lt;/p&gt;

      &lt;h3 id="images-in-css-within-npm-modules" class="title title-h3"&gt;
        &lt;a name="images-in-css-within-npm-modules" class="anchor" href="#images-in-css-within-npm-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in CSS within NPM modules
      &lt;/h3&gt;
    
&lt;p&gt;One tricky bit worth mentioning is bundling images referenced in SCSS within an imported NPM module. For example, many jQuery plugins bundle their own SCSS and image assets. When Webpack processes this vendored CSS, you may see an error like the following, like in &lt;a href="https://stackoverflow.com/questions/58727976/import-images-of-an-npm-package-with-webpacker-and-rails"&gt;this question on StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Module not found: Error: Can&amp;#39;t resolve &amp;#39;../img/controls.png&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is the path does not resolve properly relative to the output for this vendored SCSS. From the &lt;a href="https://github.com/rails/webpacker/blob/76b491750993fada8b0b0cc2546dfcfbc4aaae13/docs/css.md#resolve-url-loader"&gt;Webpacker docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since Sass/libsass does not provide url rewriting, all linked assets must be relative to the output. Add the missing url rewriting using the resolve-url-loader. Place it directly after the sass-loader in the loader chain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To fix this, you may need to get your hands dirty with some Webpacker configuration. Add the &lt;code&gt;resolve-url-loader&lt;/code&gt; and configure in &lt;code&gt;config/webpack/environment.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;yarn add resolve-url-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

// resolve-url-loader must be used before sass-loader
environment.loaders.get(&amp;#39;sass&amp;#39;).use.splice(-1, 0, {
  loader: &amp;#39;resolve-url-loader&amp;#39;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loader rule, inserted in the loader pipeline for SASS/SCSS files, will ensure the proper url is written to the CSS output by Webpack.&lt;/p&gt;

      &lt;h3 id="images-in-rails-views" class="title title-h3"&gt;
        &lt;a name="images-in-rails-views" class="anchor" href="#images-in-rails-views"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in Rails views
      &lt;/h3&gt;
    
&lt;p&gt;You may be accustomed to &lt;code&gt;&amp;lt;%= image_tag &amp;#39;tacos.jpg&amp;#39; %&amp;gt;&lt;/code&gt; to reference a image bundled in the Rails asset pipeline. Webpack has a similar tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- app/views/lunches/index.html.erb --&amp;gt;

&amp;lt;%= image_pack_tag &amp;#39;media/images/guacamole.jpg&amp;#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, since Webpacker 4, the prefix &lt;code&gt;media/&lt;/code&gt; is necessary and the remaining path represents the location from your Webpack source path.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a catch. This change may result in the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Webpacker::Manifest::MissingEntryError in Lunches#index
Showing /path/to/project/app/views/lunches/index.html.erb where line #4 raised:

Webpacker can&amp;#39;t find media/images/guacamole.jpg in /path/to/project/public/packs/manifest.json.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you use &lt;code&gt;&amp;lt;%= image_pack_tag &amp;#39;media/images/tacos.jpg %&amp;gt;&lt;/code&gt;, the taco image will happily renders. What gives?&lt;/p&gt;

&lt;p&gt;Your Rails app is not being selective about cuisine. The difference is, we earlier imported the &lt;code&gt;tacos.jpg&lt;/code&gt; image in Webpack, but not &lt;code&gt;guacamole.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One way to fix this issue is to import the &lt;code&gt;guacamole.jpg&lt;/code&gt; image somewhere in your Webpack dependency graph. It&amp;#39;s not necessary to grab a reference to the imported variable because we only care about the side effect of emitting the file for Rails to reference in the view.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;import &amp;#39;../images/guacamole.jpg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to fix this issue is to import &lt;em&gt;all&lt;/em&gt; images in the &lt;code&gt;app/javascript/images&lt;/code&gt; directory. Webpack provides a special function to import many files in a directory in one expression: &lt;code&gt;require.context&lt;/code&gt;. You might add this to your &lt;code&gt;application.js&lt;/code&gt; pack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

require.context(&amp;#39;../images&amp;#39;, true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This expression will recursively require all the files in the &lt;code&gt;images&lt;/code&gt; directory. As a result, we can now render &lt;code&gt;guacamole.jpg&lt;/code&gt; in a Rails view.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I only recommend using &lt;code&gt;require.context&lt;/code&gt; for your images if you need to render them in your Rails views; &lt;code&gt;require.context&lt;/code&gt; is NOT necessary to import images into JS files like your React components, as illustrated earlier.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="reconfiguring" class="title title-h3"&gt;
        &lt;a name="reconfiguring" class="anchor" href="#reconfiguring"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Reconfiguring
      &lt;/h3&gt;
    
&lt;p&gt;If you don&amp;#39;t feel comfortable with &lt;code&gt;app/javascript&lt;/code&gt; as the source directory for &lt;code&gt;images&lt;/code&gt;, you can either rename the source path or add to the set of resolved paths.&lt;/p&gt;

&lt;p&gt;To rename &lt;code&gt;app/javascript&lt;/code&gt;, rename the directory and tell Rails about it in &lt;code&gt;config/webpacker.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;default: &amp;amp;default
  source_path: app/frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add to the set of resolved paths where Webpack should look for assets besides in &lt;code&gt;app/javascript&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;default: &amp;amp;default
  resolved_paths:
    - app/assets
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="diving-deeper" class="title title-h3"&gt;
        &lt;a name="diving-deeper" class="anchor" href="#diving-deeper"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Diving Deeper
      &lt;/h3&gt;
    
&lt;p&gt;I have to admit, a few years ago, when I first heard about Webpack, I was super-confused. I understood it to be a JavaScript module bundler. &lt;em&gt;How on Earth does it handles images?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The short answer, of course, is &lt;em&gt;it depends&lt;/em&gt;. Generally, Webpack will treat everything it can understand as a JavaScript module. To help Webpack understand images, projects would add a &amp;quot;loader&amp;quot; (or loaders) to the Webpack configuration. A suitable loader would know how to handle an image file and output a representation of something, like an inlined base64 string, that can be manipulated in JavaScript.&lt;/p&gt;

&lt;p&gt;To help Webpack understand images, svg files, and fonts in your Rails project, Webpacker adds the &lt;code&gt;file-loader&lt;/code&gt; package. This package will emit the imported file as a side effect of the build and return a path to the file as the module contents.&lt;/p&gt;

&lt;p&gt;For more on how Webpack works with images, check out the &lt;a href="https://webpack.js.org/guides/asset-management/#loading-images"&gt;asset management docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also put together a sample Rails 6 Webpacker demo project on GitHub for more context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/rails6-webpacker-demo/compare/example/images"&gt;Images in JS, CSS, and Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/rails6-webpacker-demo/compare/example/react-image"&gt;Images with CSS-in-JS in a React app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Overpacking: A Common Webpacker Mistake</title>
    <link rel="alternate" href="/blog/overpacking-a-common-webpacker-mistake.html"/>
    <id>/blog/overpacking-a-common-webpacker-mistake.html</id>
    <published>2019-12-03T00:00:00+00:00</published>
    <updated>2019-12-03T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I recently encountered a Rails app at work that was spending nearly seven minutes precompiling assets:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-before-fix.png" alt="CI Screenshot: Precompile assets, 6:56"&gt;&lt;/p&gt;

&lt;p&gt;I looked in the &lt;code&gt;Gemfile&lt;/code&gt; and found the project was using Webpacker. My spidey sense started to tingle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've seen this before&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Leaning on prior...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I recently encountered a Rails app at work that was spending nearly seven minutes precompiling assets:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-before-fix.png" alt="CI Screenshot: Precompile assets, 6:56" /&gt;&lt;/p&gt;

&lt;p&gt;I looked in the &lt;code&gt;Gemfile&lt;/code&gt; and found the project was using Webpacker. My spidey sense started to tingle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;#39;ve seen this before&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Leaning on prior experience, I found the problem, moved some files around, and pushed a branch with the fix up to CI.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-after-fix.png" alt="CI Screenshot: Precompile assets, 0:44" /&gt;&lt;/p&gt;

&lt;p&gt;The build step dropped from nearly seven minutes to less than one. Big improvement! When I heard from the team, the fix also greatly improved the local development experience; before, re-compiling Webpack assets on page refreshes would take a painfully long time.&lt;/p&gt;

&lt;p&gt;So what were the changes?&lt;/p&gt;

      &lt;h3 id="a-common-problem" class="title title-h3"&gt;
        &lt;a name="a-common-problem" class="anchor" href="#a-common-problem"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A Common Problem
      &lt;/h3&gt;
    
&lt;p&gt;First, let&amp;#39;s take a step back. If you&amp;#39;re new to Webpack and Webpacker for Rails, chances are you may be making some simple mistakes.&lt;/p&gt;

&lt;p&gt;I know this because I was once in your shoes struggling to learn how Webpack works. I&amp;#39;ve also spent a lot of time helping others on my team, on StackOverflow, and via &lt;a href="https://github.com/rails/webpacker"&gt;&lt;code&gt;rails/webpacker&lt;/code&gt;&lt;/a&gt; Github issues.&lt;/p&gt;

&lt;p&gt;One of the most frequently-reported issues I&amp;#39;ve seen is slow build times. This is often coupled with high memory and CPU usage. For Heroku users on small dynos, resource-intensive asset precompilation can lead to failed deploys.&lt;/p&gt;

&lt;p&gt;More often than not, the root cause is a simple oversight in directory structure—a mistake I call &amp;quot;overpacking&amp;quot;.&lt;/p&gt;

      &lt;h3 id="overpacking-explained" class="title title-h3"&gt;
        &lt;a name="overpacking-explained" class="anchor" href="#overpacking-explained"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Overpacking explained
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the layout of the &lt;code&gt;app/javascript&lt;/code&gt; directory in the Rails app &lt;em&gt;before&lt;/em&gt; I introduced the fix:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rake assets:precompile — 6:56&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/
  javascript/
    packs/
      application.js
      components/     # lots of files
      images/         # lots of files
      stylesheets/    # lots of files
      ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#39;s what the project looked like building in under a minute:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rake assets:precompile — 0:44&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/
  javascript/
    components/
    images/
    stylesheets/
    ...
    packs/
      application.js    # just one file in packs/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;The primary change here was moving everything except &lt;code&gt;application.js&lt;/code&gt; outside of the &lt;code&gt;packs&lt;/code&gt; directory under &lt;code&gt;app/javascript&lt;/code&gt;. (To make this work properly, I also had to update some relative paths in &lt;code&gt;import&lt;/code&gt; statements.)&lt;/p&gt;

      &lt;h3 id="webpack-entry-points" class="title title-h3"&gt;
        &lt;a name="webpack-entry-points" class="anchor" href="#webpack-entry-points"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Webpack Entry Points
      &lt;/h3&gt;
    
&lt;p&gt;So why did this matter?&lt;/p&gt;

&lt;p&gt;Webpack needs at least one &lt;strong&gt;entry&lt;/strong&gt; point to build the dependency graph for produce the JavaScript and CSS bundles and static assets (images, fonts, etc).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Webpacker project refers to entries as &lt;strong&gt;packs&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;quot;Entry&amp;quot; is listed as the first key concept on Webpack&amp;#39;s documentation site: &lt;a href="https://webpack.js.org/concepts/#entry"&gt;https://webpack.js.org/concepts/#entry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Webpack will build a separate dependency graph for every entry specified in its configuration. The more entry points you provide, the more dependency graphs Webpack has to build.&lt;/p&gt;

&lt;p&gt;Since Webpack*er*, by default, treats &lt;em&gt;every file&lt;/em&gt; in the &lt;code&gt;packs&lt;/code&gt; directory as a separate entry, it will build a separate dependency graph for &lt;em&gt;every file&lt;/em&gt; located there.&lt;/p&gt;

&lt;p&gt;That also means, for &lt;em&gt;every file&lt;/em&gt; in the &lt;code&gt;packs&lt;/code&gt; directory, there will be at least one, possibly more, files emitted as output in the &lt;code&gt;public&lt;/code&gt; directory during precompilation. If you&amp;#39;re not linking to these files anywhere in your app, then they don&amp;#39;t need to be emitted as output. For a large project, that could be lot of unnecessary work.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a case where Rails tries to make things easier for you—by auto-configuring entry files—while also making it easier to shoot yourself in the foot.&lt;/p&gt;

      &lt;h3 id="a-simple-rule" class="title title-h3"&gt;
        &lt;a name="a-simple-rule" class="anchor" href="#a-simple-rule"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A Simple Rule
      &lt;/h3&gt;
    
&lt;p&gt;Is your Webpacker compilation taking forever? You may be overpacking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If any file in Webpacker&amp;#39;s &amp;quot;packs&amp;quot; directory does not also have a corresponding &lt;code&gt;javascript_pack_tag&lt;/code&gt; in your application, then you&amp;#39;re overpacking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be good to yourself and your development and deployment experience by being very intentional about what files you put in your &amp;quot;packs&amp;quot; directory.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t overpack. At best, this is wasteful; at worst, this is a productivity killer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Bootstrap with Rails Webpacker</title>
    <link rel="alternate" href="/blog/webpacker-with-bootstrap.html"/>
    <id>/blog/webpacker-with-bootstrap.html</id>
    <published>2019-11-25T00:00:00+00:00</published>
    <updated>2019-11-25T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;In this post, I'll demonstrate how to set up a Rails application with Bootstrap for Webpacker.&lt;/p&gt;

&lt;p&gt;If you'd prefer to skip the post and go straight to the demo app, you can find it here: &lt;a href="https://github.com/rossta/rails-webpacker-bootstrap-demo"&gt;https://github.com/rossta/rails-webpacker-bootstrap-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The examples...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In this post, I&amp;#39;ll demonstrate how to set up a Rails application with Bootstrap for Webpacker.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d prefer to skip the post and go straight to the demo app, you can find it here: &lt;a href="https://github.com/rossta/rails-webpacker-bootstrap-demo"&gt;https://github.com/rossta/rails-webpacker-bootstrap-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The examples and demo app described in this post use the following dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;# Ruby/Rails
Rails 6.0.1
Ruby 2.6.5
Webpacker 4.2.0

# npm
@rails/webpacker 4.2.0
bootstrap 4.3.1
jQuery 3.4.1
popper.js 1.16.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ll assume we&amp;#39;re working from a recently-created Rails 6 app with the default Webpacker installation. The examples may also work with other versions Rails that support Webpacker 4.&lt;/p&gt;

&lt;p&gt;When the Webpacker install is run, i.e. &lt;code&gt;bin/rails webpacker:install&lt;/code&gt;, it adds the file &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;. Webpack calls this file an &amp;quot;entry point&amp;quot; and Webpacker calls it a &amp;quot;pack&amp;quot;. We&amp;#39;ll use the terms interchangeably. Either way, this file will be the top of the dependency tree for all assets bundled by Webpack.&lt;/p&gt;

&lt;p&gt;The file initially looks something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js
require(&amp;quot;@rails/ujs&amp;quot;).start()
require(&amp;quot;channels&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: the &lt;code&gt;require&lt;/code&gt; statements in the generated javascript can be converted into &lt;code&gt;import&lt;/code&gt; statements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Installation should also insert the appropriate javascript and stylesheet &amp;quot;pack&amp;quot; tags in your application layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;%= stylesheet_pack_tag &amp;#39;application&amp;#39;, media: &amp;#39;all&amp;#39; %&amp;gt;
&amp;lt;%= javascript_pack_tag &amp;#39;application&amp;#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: If you omit the &lt;code&gt;javascript_pack_tag&lt;/code&gt; and have &lt;code&gt;extract_css: false&lt;/code&gt; set for your environment in &lt;code&gt;config/webpacker.yml&lt;/code&gt;, then the CSS won&amp;#39;t load! The JS bundle is necessary in this case.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="installing-bootstrap" class="title title-h3"&gt;
        &lt;a name="installing-bootstrap" class="anchor" href="#installing-bootstrap"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Installing bootstrap
      &lt;/h3&gt;
    
&lt;p&gt;To add Bootstrap, install via yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ yarn add bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the time of this post, the above is the equivalent to &lt;code&gt;yarn add bootstrap@4.3.0&lt;/code&gt;. Your installation may vary; I would expect the tutorial here will still work for other versions of Bootstrap 4.&lt;/p&gt;

&lt;p&gt;To get Bootstrap css working, add a stylesheet &lt;code&gt;app/javascript/css/site.scss&lt;/code&gt;. Here, you&amp;#39;ll import the global Bootstrap scss file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="scss"&gt;// app/javascript/css/site.scss

@import &amp;quot;~bootstrap/scss/bootstrap.scss&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: the file extensions are important, i.e., Webpacker configure files ending in &amp;#39;.scss&amp;#39; and &amp;#39;.sass&amp;#39; to be processed by Webpack&amp;#39;s &lt;code&gt;sass-loader&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To include our new stylesheet in the build output, we must import it from somewhere in our dependency tree. Let&amp;#39;s put this import in the entry point, our &lt;code&gt;application.js&lt;/code&gt; pack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;css/site&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#39;re new to Webpack, this may comes as a surprise: yes, you import your stylesheets via javascript. In Sprockets, we typically have separate &lt;code&gt;application.css&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt; files as the top of separate dependency trees. In Webpack, think of your application.js pack as the lone root the dependency tree from which all static assets will be imported; the &lt;code&gt;application.css&lt;/code&gt; bundle is simply a by-product of the build. In other words, there is no need for a separate &amp;quot;stylesheet pack&amp;quot; like &lt;code&gt;app/javascript/packs/application.css&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: With Webpack, it&amp;#39;s recommended to have only &lt;em&gt;one&lt;/em&gt; entry point (or &amp;quot;pack&amp;quot; in WebpackER terminology) per page for your bundled assets. For our starter app, the entry point is &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;. I cannot stress this point enough.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="adding-sass-overrides" class="title title-h3"&gt;
        &lt;a name="adding-sass-overrides" class="anchor" href="#adding-sass-overrides"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Adding SASS overrides
      &lt;/h3&gt;
    
&lt;p&gt;Since &lt;code&gt;bootstrap.scss&lt;/code&gt; uses SASS variables for theme-ing, you can override the defaults with new values.&lt;/p&gt;

&lt;p&gt;For example, you can change the background and font colors as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="scss"&gt;// app/javascript/css/site.scss

// sass variable overrides
$body-bg: aliceblue;
$body-color: #111;

@import &amp;quot;~bootstrap/scss/bootstrap.scss&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also surgically import selected parts of bootstrap to limit bundle size:&lt;/p&gt;

&lt;pre&gt;&lt;code class="scss"&gt;// app/javascript/css/site.scss

// Option A: Include all of Bootstrap
// @import &amp;quot;~bootstrap/scss/bootstrap.scss&amp;quot;;

// Option B: Include parts of Bootstrap
@import &amp;quot;~bootstrap/scss/functions.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/variables.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/mixins.scss&amp;quot;;

@import &amp;quot;~bootstrap/scss/reboot.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/type.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/images.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/code.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/grid.scss&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bootstrap also ships with some JavaScript utilities that function as jQuery plugins. To enable this functionality, add jQuery and popper.js as dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn add jquery popper.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These libraries need to be available in your Webpack build, so import them along with bootstrap javascript:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

// ...
import &amp;#39;jquery&amp;#39;
import &amp;#39;popper.js&amp;#39;
import &amp;#39;bootstrap&amp;#39;
// ...
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="optimizing-the-javascript-bundle" class="title title-h3"&gt;
        &lt;a name="optimizing-the-javascript-bundle" class="anchor" href="#optimizing-the-javascript-bundle"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Optimizing the JavaScript bundle
      &lt;/h3&gt;
    
&lt;p&gt;An optional, advanced technique would be to import selected modules asynchronously. The benefit is to limit the size of our initial bundle and defer as much as possible to decrease latency for downloading, parsing, and evaluating JavaScript on page load. Note the &lt;code&gt;application.js&lt;/code&gt; bundle (fingerprinted as &lt;code&gt;js/application-c67c235b5c7d8ac4f1fe.js&lt;/code&gt;) is already 940kB in our Webpack build:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;Version: webpack 4.41.2
Time: 1003ms
Built at: 11/25/2019 4:08:14 PM
                                     Asset       Size       Chunks                         Chunk Names
              css/application-8d90f960.css    175 KiB  application  [immutable]            application
          css/application-8d90f960.css.map    377 KiB  application  [dev]                  application
    js/application-c67c235b5c7d8ac4f1fe.js    940 KiB  application  [emitted] [immutable]  application
js/application-c67c235b5c7d8ac4f1fe.js.map   1.06 MiB  application  [emitted] [dev]        application
                             manifest.json  640 bytes               [emitted]
ℹ ｢wdm｣: Compiled successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an exercise, we might decide to defer the import and initialization of the jquery plugins. Let&amp;#39;s consider &lt;code&gt;jquery&lt;/code&gt; as a critical dependency; it is needed as part of the &amp;quot;initial&amp;quot; bundle that blocks the page load while it is parsed and evaluated. But &lt;code&gt;popper.js&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; can be deferred; since they are plugins that affect the DOM, they&amp;#39;re not as critical, i.e., the DOM needs to be loaded first anyways.&lt;/p&gt;

&lt;p&gt;One such deferring technique is dynamic import. Webpack will recognize when &lt;code&gt;import&lt;/code&gt; is used as a function, e.g. &lt;code&gt;import(&amp;#39;some-lib&amp;#39;)&lt;/code&gt;, and pull out the module as a separate &amp;quot;chunk&amp;quot; (another file), that will be loaded asynchronously when the function is evaluated.&lt;/p&gt;

&lt;p&gt;In our demo app, we can move &lt;code&gt;popper.js&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; to a separate file. Critically, this file is NOT in &lt;code&gt;app/javascript/packs&lt;/code&gt; but outside of this directory, such as &lt;code&gt;app/javascript/src&lt;/code&gt;, where we will put all our non-entry-point js:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/src/plugins.js

import &amp;#39;popper.js&amp;#39;
import &amp;#39;bootstrap&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back in the application pack, we replace the &lt;code&gt;popper.js&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; imports with a &lt;em&gt;dynamic&lt;/em&gt; import of &lt;code&gt;app/javascript/src/plugins.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;jquery&amp;#39;
import(&amp;#39;src/plugins&amp;#39;) // note the function usage!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When compiling, Webpack will show us a number of additional javascript &amp;quot;chunks&amp;quot; of smaller size than the bundle previously:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;Version: webpack 4.41.2
Time: 41ms
Built at: 11/25/2019 4:03:54 PM
                                     Asset       Size       Chunks                         Chunk Names
              css/application-8d90f960.css    175 KiB  application  [immutable]            application
          css/application-8d90f960.css.map    377 KiB  application  [dev]                  application
        js/0-7f46c35cf4589f8534f7.chunk.js    217 KiB            0  [immutable]
    js/0-7f46c35cf4589f8534f7.chunk.js.map    257 KiB            0  [dev]
        js/1-6bb4a0148baccc5762c4.chunk.js  926 bytes            1  [immutable]
    js/1-6bb4a0148baccc5762c4.chunk.js.map  246 bytes            1  [dev]
    js/application-0b7847cb72725f896091.js    727 KiB  application  [emitted] [immutable]  application
js/application-0b7847cb72725f896091.js.map    835 KiB  application  [emitted] [dev]        application
                             manifest.json  640 bytes               [emitted]
ℹ ｢wdm｣: Compiled successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ve knocked the &lt;code&gt;application.js&lt;/code&gt; bundle, (now fingerprinted as &lt;code&gt;js/application-0b7847cb72725f896091.js&lt;/code&gt;) down to 727kB. Still sizable, but represents a significant reduction from the first pass.&lt;/p&gt;

&lt;p&gt;Another optimization step could be to configure the &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/"&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt;&lt;/a&gt; to code-split our bundle programmatically, but we&amp;#39;ll save that for another post.&lt;/p&gt;

&lt;p&gt;Our final &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt; file is:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import Rails from &amp;quot;@rails/ujs&amp;quot;

import &amp;#39;jquery&amp;#39;
import(&amp;#39;src/plugins&amp;#39;) // loads async

import &amp;#39;css/site&amp;#39;

Rails.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our final directory structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
  javascript/
    css/
      site.css
    src/
      plugins.js
    packs/
      application.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also check out the demo app for this post at &lt;a href="https://github.com/rossta/rails-webpacker-bootstrap-demo"&gt;https://github.com/rossta/rails-webpacker-bootstrap-demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this post shed some light on using Bootstrap with Webpacker on Rails and wish you Happy Webpacking!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vue.js is omakase</title>
    <link rel="alternate" href="/blog/vue-js-is-omakase.html"/>
    <id>/blog/vue-js-is-omakase.html</id>
    <published>2019-01-08T00:00:00+00:00</published>
    <updated>2019-01-08T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I'm borrowing from David Heinemeier Hansson here. Six years ago, he wrote &lt;a href="https://dhh.dk//2012/rails-is-omakase.html"&gt;Rails is omakase&lt;/a&gt; to capture his notion of what makes a delicious software framework: it is heavily curated and borne of experience. I think of Vue.js the same way.&lt;/p&gt;

&lt;p&gt;Here's an...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m borrowing from David Heinemeier Hansson here. Six years ago, he wrote &lt;a href="https://dhh.dk//2012/rails-is-omakase.html"&gt;Rails is omakase&lt;/a&gt; to capture his notion of what makes a delicious software framework: it is heavily curated and borne of experience. I think of Vue.js the same way.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an excerpt from DHH&amp;#39;s post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are lots of à la carte software environments in this world... I want this for my ORM, I want that for my template language, and let&amp;#39;s finish it off with this routing library... It&amp;#39;s a very popular way of consuming software. Rails is not that. Rails is omakase. A team of chefs picked out the ingredients, designed the APIs, and arranged the order of consumption on your behalf according to their idea of what would make for a tasty full-stack framework. The menu can be both personal and quirky. It isn&amp;#39;t designed to appeal to the taste of everyone, everywhere.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I love this metaphor, because a) Rails, including all its API choices and baggage, has treated me very well throughout my career in tech, and b) I love me some agedashi tofu.&lt;/p&gt;

&lt;p&gt;What does this have to do with Vue? I believe Vue&amp;#39;s growing popularity is partly due to its highly selective maintainers and that the recommended ingredients, though not to everyone&amp;#39;s taste, are well-suited to most projects, big and small.&lt;/p&gt;

      &lt;h3 id="enjoy-a-multiple-course-meal" class="title title-h3"&gt;
        &lt;a name="enjoy-a-multiple-course-meal" class="anchor" href="#enjoy-a-multiple-course-meal"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Enjoy a multiple-course meal
      &lt;/h3&gt;
    
&lt;p&gt;Vue articulates many courses making up the full meal for a frontend framework. These days, developers have come to expect a robust API to build components and a fast implementation built on top of a virtual dom. However, Vue.js doesn&amp;#39;t stop there. For Vue developers, the framework and its ecosystem provide adequate if not excellent implementations of orthogonal dependencies that solve problems many non-trivial apps eventually need.&lt;/p&gt;

&lt;p&gt;The offering includes the Vue Router, Vuex for state management, and the Vue test utils for unit testing. Through the Vue CLI, developers also get sensible defaults in Webpack configuration for hot module replacement, code-splitting, tree-shaking, efficient long-term caching, while having access to pre-configured opt-ins for TypeScript, Progressive Web Apps, ESLint, and multiple test runners.&lt;/p&gt;

&lt;p&gt;There is great comfort in knowing that the Vue team is behind these projects and they complement one another appropriately in my Vue.js applications.&lt;/p&gt;

      &lt;h3 id="substitutions-cost-little-extra" class="title title-h3"&gt;
        &lt;a name="substitutions-cost-little-extra" class="anchor" href="#substitutions-cost-little-extra"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Substitutions cost little extra
      &lt;/h3&gt;
    
&lt;p&gt;So you may not agree with everything on the menu. That&amp;#39;s fine! Many of the defaults are easily changed through configuration or add-ons. Want to use Redux? No problem! Class-style syntax? The customer is always right. Don&amp;#39;t like mustache-style curly braces in templates? You can change it! Maybe you can&amp;#39;t stand the fact that Vue has templates at all and would prefer to use JavaScript. Well, that&amp;#39;s ok too; add another &lt;a href="https://github.com/vuejs/babel-plugin-transform-vue-jsx"&gt;Babel plugin&lt;/a&gt;, and you can write Vue components with JSX inside of render functions a lot like React.&lt;/p&gt;

&lt;p&gt;As another example, let&amp;#39;s talk about Webpack. I think it is a fantastic piece of software. I&amp;#39;ve spent months learning how it works. I have given &lt;a href="https://rossta.net/talks/webpack-survival-guide-rails.html"&gt;a conference talk&lt;/a&gt; about it. However, usually, most of us, myself included, don’t want to maintain a custom configuration from project to project when we have deadlines to meet. The Vue CLI defaults are just fine. Still need to customize? Vue provides an API to extend the base configuration while making it easier to upgrade to take advantage of framework-supported improvements. There&amp;#39;s also nothing stopping you from ditching Webpack for Parcel or Rollup or whatever other transpiler or module bundler you prefer.&lt;/p&gt;

      &lt;h3 id="an-opinionated-chef" class="title title-h3"&gt;
        &lt;a name="an-opinionated-chef" class="anchor" href="#an-opinionated-chef"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        An opinionated chef
      &lt;/h3&gt;
    
&lt;p&gt;The core team consistently shows restraint in decided what features and improvements to fold into the framework. For example, much has been made of Vue&amp;#39;s choice to avoid class syntax for components as the default, e.g. &lt;a href="https://github.com/vuejs/vue/issues/2371"&gt;this issue on GitHub&lt;/a&gt;. There are excellent reasons for this decision, one of which is for Vue to work without a build environment. As a feature, this makes Vue incredibly easy to get up-and-running, for beginners learning the framework or for seasoned developers trying out a quick prototype. &amp;quot;It will fail,&amp;quot; some said. I suppose that remains to be seen, but after several years of arguing, the framework continues to thrive.&lt;/p&gt;

      &lt;h3 id="a-consistent-experience-for-all-customers" class="title title-h3"&gt;
        &lt;a name="a-consistent-experience-for-all-customers" class="anchor" href="#a-consistent-experience-for-all-customers"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A consistent experience for all customers
      &lt;/h3&gt;
    
&lt;p&gt;Scott Molinari made this comment on a previous post of mine:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;once the usage of the API is down pat, anyone and everyone who knows Vue is basically doing the same thing. This also means the need for best practices are held to a minimum and both of these advantages mean cognitive load over time is reduced. i.e. when you dig into someone else’s component, you understand it quickly. This all in turn means Vue code is more robust and in the end, it’s of higher quality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This point is especially important for both beginners and experienced developers alike. One of the significant tradeoffs to cobbling libraries together is that it can be harder to transition into new projects or unfamiliar parts of a large codebase. This approach may pay off for the right teams. In most cases, those tradeoffs aren&amp;#39;t worth it to me because I place much value on consistency.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;When my late wife and I lived in New York City, our favorite restaurant was &lt;a href="https://www.zenkichi.com/"&gt;Zenkichi&lt;/a&gt;. The cuisine is Japanese brasserie, but the experience is so much more. If you make it to the Williamsburg neighborhood in Brooklyn, you should try it.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/stock/zenkichi-tofu.jpg" alt="Zenkichi tofu" /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s housed in a small building with a wooden exterior and no discernable markings. Located near the East River in the Williamsburg of Brooklyn, it&amp;#39;s easy to miss from the outside.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/stock/zenkichi-entrance.jpg" alt="Zenkichi entrance" /&gt;&lt;/p&gt;

&lt;p&gt;The interior is dark, romantic, hand-crafted. Each table upstairs is like a small private dining room with a pull-down curtain and a small buzzer to summon the wait staff.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/stock/zenkichi-tables.jpg" alt="Zenkichi tables" /&gt;&lt;/p&gt;

&lt;p&gt;Everytime we ate there, we chose the omakase menu. We left all the decision-making up to the chef. It&amp;#39;s difficult at first to place that kind of trust in someone else&amp;#39;s judgment. Giving up control is uncomfortable. However, this led to some delightful discoveries. Of course, not all the courses were to our liking. Nevertheless, we loved the experience.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The chef’s menu need not be reserved for special occasions in web development. With Vue.js, we have a framework that gives us all the ingredients we need to jump into building outstanding user interfaces. It also makes it relatively easy to swap out menu items to suit your preferences. So it would seem you &lt;a href="https://en.wikipedia.org/wiki/You_can%27t_have_your_cake_and_eat_it"&gt;can have your cake and eat it too&lt;/a&gt;? Just another reason why I find Vue.js so fulfilling.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Seven reasons choose Vue.js in 2019</title>
    <link rel="alternate" href="/blog/reasons-to-choose-vue-js-in-2019.html"/>
    <id>/blog/reasons-to-choose-vue-js-in-2019.html</id>
    <published>2019-01-01T00:00:00+00:00</published>
    <updated>2019-01-01T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I love building applications in Vue.js and here's why I think the future is looking bright for the framework and its community.&lt;/p&gt;

      &lt;h3 id="1-no-build-step-required" class="title title-h3"&gt;
        &lt;a name="1-no-build-step-required" class="anchor" href="#1-no-build-step-required"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        1. No build step required
      &lt;/h3&gt;
    
&lt;p&gt;A critical aspect of the Vue philosophy...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I love building applications in Vue.js and here&amp;#39;s why I think the future is looking bright for the framework and its community.&lt;/p&gt;

      &lt;h3 id="1-no-build-step-required" class="title title-h3"&gt;
        &lt;a name="1-no-build-step-required" class="anchor" href="#1-no-build-step-required"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        1. No build step required
      &lt;/h3&gt;
    
&lt;p&gt;A critical aspect of the Vue philosophy is it be easy to get started. Unlike some other popular frameworks, it&amp;#39;s not necessary to use a complex build tool like Webpack to build an application with it. Just include a script tag pointing to the &lt;a href="https://vuejs.org/v2/guide/installation.html#Direct-lt-script-gt-Include"&gt;latest release for development or production&lt;/a&gt;, and you have access to the Vue runtime.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having a low barrier to entry makes Vue a worthy consideration as a first JS framework to learn.&lt;/p&gt;

      &lt;h3 id="2-a-world-class-command-line-interface" class="title title-h3"&gt;
        &lt;a name="2-a-world-class-command-line-interface" class="anchor" href="#2-a-world-class-command-line-interface"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        2. A world-class command line interface
      &lt;/h3&gt;
    
&lt;p&gt;Of course, many developers are looking for advanced development features like ES or TypeScript transpilation, hot module replacement, and tree-shaking, made possible by build tools. Vue has you covered there as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g @vue/cli
vue create my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This past year, the Vue core team re-wrote their command line interface from the ground up, resulting in Vue CLI 3. It&amp;#39;s designed in such a way to promote best practices and a full-featured default Webpack configuration that should be easier to extend without making it difficult to upgrade, i.e., &amp;quot;no need to eject.&amp;quot; Vue CLI provides a ton of useful additional features, including an interactive project initialization wizard (available through the terminal or a web-based UI), a plugin system to support generators and configuration for community add-ons, and the ability to specify alternative build targets, like web components or as libraries.&lt;/p&gt;

      &lt;h3 id="3-friendly-learning-curve" class="title title-h3"&gt;
        &lt;a name="3-friendly-learning-curve" class="anchor" href="#3-friendly-learning-curve"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        3. Friendly learning curve
      &lt;/h3&gt;
    
&lt;p&gt;A common criticism I hear about Vue is that its API has a larger surface area than some other popular frameworks and I agree up to a point (depending on the framework). Ironically, one thing I hear &lt;a href="https://hackernoon.com/should-you-learn-react-or-vue-first-7dc0d4dd8c04"&gt;over&lt;/a&gt; and &lt;a href="https://www.quora.com/How-does-Vue-js-compare-to-React-js"&gt;over&lt;/a&gt; in some of these comparisons are Vue is easy to learn. Though this point is subjective and anecdotal, this has held for folks I&amp;#39;ve heard from regardless of previous experience with JavaScript frameworks and JavaScript in general.&lt;/p&gt;

&lt;p&gt;One reason for this, I believe, is that Vue is a &amp;quot;progressive JavaScript framework.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/vue/vuejs.org-homepage.png" alt="Vue is a Progressive JavaScript Framework" /&gt;&lt;/p&gt;

&lt;p&gt;No need to learn the whole API to get started with Vue, no need to learn a new syntax like JSX; only basic HTML, CSS, and JS knowledge is required to get started.&lt;/p&gt;

      &lt;h3 id="4-a-solid-ecosystem" class="title title-h3"&gt;
        &lt;a name="4-a-solid-ecosystem" class="anchor" href="#4-a-solid-ecosystem"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        4. A solid ecosystem
      &lt;/h3&gt;
    
&lt;p&gt;Before Vue, I&amp;#39;ve gotten frustrated with the fractured nature of learning best practices beyond the basics. What client-side router should I use? Which data management/Flux implementation should I use? How do I test my components? How should I configure my build system? Over time, answering these questions has gotten easier, depending on the community, but I&amp;#39;ve liked Vue&amp;#39;s approach since the start.&lt;/p&gt;

&lt;p&gt;Vue provides official support for several essential add-ons, including &lt;code&gt;vue-router&lt;/code&gt; for client-side routing, &lt;code&gt;vuex&lt;/code&gt; for managing state, &lt;code&gt;vue-test-utils&lt;/code&gt; for unit testing components, the &lt;code&gt;vue-devtools&lt;/code&gt; browser extension for debugging, Vue CLI as described earlier. None of these tools are required Vue can work quite well with alternatives for these libraries, like &lt;code&gt;redux&lt;/code&gt; or &lt;code&gt;mobx&lt;/code&gt; instead of &lt;code&gt;vuex&lt;/code&gt;, or another router. The critical point is that the community assists developers by supporting a set of very good recommended defaults, something that a backend framework like Ruby on Rails has traditionally done very well.&lt;/p&gt;

      &lt;h3 id="5-the-vue-instance" class="title title-h3"&gt;
        &lt;a name="5-the-vue-instance" class="anchor" href="#5-the-vue-instance"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        5. The Vue instance
      &lt;/h3&gt;
    
&lt;p&gt;The most potent aspect Vue is its &lt;a href="https://codingexplained.com/coding/front-end/vue-js/understanding-vue-js-reactivity"&gt;reactivity system&lt;/a&gt;. We can tap into it through &lt;a href="https://vuejs.org/v2/guide/instance.html"&gt;the &lt;code&gt;Vue&lt;/code&gt; instance&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;new Vue({
  el: &amp;quot;#app&amp;quot;,
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This invocation is how every Vue application is initialized. It also creates a fully-reactive root component of the application. A Vue instance can also be used as an event bus or for tracking dependency changes separately from the application component tree, say, as an implementation detail of a Vue plugin.&lt;/p&gt;

&lt;p&gt;Vue&amp;#39;s reactivity system is beautiful in its simplicity. Playing with the Vue instance is an excellent way to understanding how the reactivity system works and level up one&amp;#39;s Vue, and JavaScript, skills in general.&lt;/p&gt;

      &lt;h3 id="6-vue-3-lands-this-year" class="title title-h3"&gt;
        &lt;a name="6-vue-3-lands-this-year" class="anchor" href="#6-vue-3-lands-this-year"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        6. Vue 3 lands this year
      &lt;/h3&gt;
    
&lt;p&gt;Speaking of Vue&amp;#39;s reactivity system, &lt;a href="https://medium.com/the-vue-point/plans-for-the-next-iteration-of-vue-js-777ffea6fabf"&gt;Vue 3 is expected to ship this year&lt;/a&gt;. Among some architectural and performance improvements and minor API changes, Vue 3 provides a new Proxy-based implementation of its reactivity system.&lt;/p&gt;

&lt;p&gt;The Proxy-based system solves &lt;a href="https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats"&gt;some of the known caveats with Vue change detection&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;In Vue 2, Vue cannot:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Detect property addition, e.g., &lt;code&gt;vm.b = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Detect array modification through indexing or modifying length, e.g., &lt;code&gt;arr[0] = 2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;The workound: use &lt;code&gt;Vue.set&lt;/code&gt;, e.g., &lt;code&gt;Vue.set(vm, &amp;#39;b&amp;#39;, 2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue 3 Proxy-based reactivity makes these annoying issues go away.&lt;/p&gt;

      &lt;h3 id="7-an-amazing-community" class="title title-h3"&gt;
        &lt;a name="7-an-amazing-community" class="anchor" href="#7-an-amazing-community"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        7. An amazing community
      &lt;/h3&gt;
    
&lt;p&gt;Since I&amp;#39;ve started using Vue, I&amp;#39;ve been fortunate to learn from a variety of Vue developers through forums, on Twitter and GitHub, and at local meetups. Vue has a distributed, hard-working core team, who are continually improving the framework without over-burdening developers with a bunch of fringe features or painful upgrades. The &lt;a href="https://forum.vuejs.org/"&gt;Vue forums&lt;/a&gt; is a great way to get insight from experts on tricky issues. Vue conferences, like &lt;a href="https://vueconf.us/"&gt;VueConf.us&lt;/a&gt; and &lt;a href="https://www.vuejs.amsterdam/"&gt;Vue Amsterdam&lt;/a&gt;, a great way to connect with other members of the community and attend more in-depth workshops, are already taking place all over the world. There&amp;#39;s also &lt;a href="https://vuevixens.org/"&gt;Vue Vixens&lt;/a&gt;, an organization that provides safe environments for people who identify as women to learn Vue.js.&lt;/p&gt;

      &lt;h3 id="bonus-it-39-s-just-plain-fun" class="title title-h3"&gt;
        &lt;a name="bonus-it-39-s-just-plain-fun" class="anchor" href="#bonus-it-39-s-just-plain-fun"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Bonus. It&amp;#39;s just plain fun
      &lt;/h3&gt;
    
&lt;p&gt;I got my start in web development just as the Ruby and the Rails framework was taking off. One thing I have always loved about Ruby is creator Yukihiro Matsumoto&amp;#39;s explicit (and, dare I say, audacious) goal of inventing a language optimized for developer happiness.&lt;/p&gt;

&lt;p&gt;I get these same feelings when I build interfaces with Vue.js. I was spending less time wrestling with configuration and APIs and more time building and having fun doing it.&lt;/p&gt;

&lt;p&gt;While I don&amp;#39;t know that Vue.js was created so explicitly in the name of developer happiness, for, it has and continues to be fulfilling to that end. It&amp;#39;s something I hear from many others who&amp;#39;ve taken time to learn the framework and probably the most important reason I&amp;#39;ll recommend Vue.js in 2019.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;So what are you waiting for? Best of luck with your Vue.js journey in the coming year.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Refactoring to nested abstract components</title>
    <link rel="alternate" href="/blog/refactoring-to-nested-abstract-components-vuejs-pdf-viewer.html"/>
    <id>/blog/refactoring-to-nested-abstract-components-vuejs-pdf-viewer.html</id>
    <published>2018-12-30T00:00:00+00:00</published>
    <updated>2018-12-30T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;To add a preview pane to the Vue.js PDF viewer, I wanted it to have very similar behavior to the document pane. In this post, I'll demonstrate how I extracted this behavior with a set of components, as opposed to alternatives, like a mixin.&lt;/p&gt;

     ...</summary>
    <content type="html">&lt;p&gt;To add a preview pane to the Vue.js PDF viewer, I wanted it to have very similar behavior to the document pane. In this post, I&amp;#39;ll demonstrate how I extracted this behavior with a set of components, as opposed to alternatives, like a mixin.&lt;/p&gt;

      &lt;h3 id="the-project" class="title title-h3"&gt;
        &lt;a name="the-project" class="anchor" href="#the-project"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The project
      &lt;/h3&gt;
    
&lt;p&gt;This post is part of ongoing series, &lt;a href="/blog/series/pdf-viewer.html"&gt;Building a PDF Viewer with Vue.js&lt;/a&gt;. The source code for this project is on Github at &lt;a href="https://github.com/rossta/vue-pdfjs-demo"&gt;rossta/vue-pdfjs-demo&lt;/a&gt;. The source code for the behavior described in this post can be found in the &lt;a href="https://github.com/rossta/vue-pdfjs-demo/tree/tutorial/part-4-shared-behavior-components"&gt;&lt;code&gt;tutorial/part-4-shared-behavior-components&lt;/code&gt; branch on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the latest &lt;a href="https://rossta.net/vue-pdfjs-demo/"&gt;project demo&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="catching-up-from-last-time" class="title title-h3"&gt;
        &lt;a name="catching-up-from-last-time" class="anchor" href="#catching-up-from-last-time"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Catching up from last time
      &lt;/h3&gt;
    
&lt;p&gt;So far in &lt;a href="/blog/series/pdf-viewer.html"&gt;this series&lt;/a&gt;, we have built a simple PDF viewer to render the pages of PDF document to &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements with Vue. We have also updated our components to fetch and render PDF pages lazily as they are scrolled into the viewport and we have extracted this behavior into a &lt;code&gt;&amp;lt;PDFData&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/screenshots/screenshot-pdf-viewer-part-3.jpg" alt="Preview of the preview" /&gt;&lt;/p&gt;

      &lt;h3 id="the-problem" class="title title-h3"&gt;
        &lt;a name="the-problem" class="anchor" href="#the-problem"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The problem
      &lt;/h3&gt;
    
&lt;p&gt;At a high level, both the preview and document panes must:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Be independently scrollable&lt;/li&gt;
&lt;li&gt;Trigger events, received by the &lt;a href="/blog/extracting-a-data-component-in-vue.html"&gt;data source, the &lt;code&gt;&amp;lt;PDFData&amp;gt;&lt;/code&gt; component&lt;/a&gt;, to fetch more page data as they are scrolled.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The new preview pane will have a similar layout to the document. Given the following component hierarchy for the current document viewer:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;PDFData&amp;gt;
  &amp;lt;PDFDocument&amp;gt;
    &amp;lt;PDFPage /&amp;gt;
    &amp;lt;PDFPage /&amp;gt;
    &amp;lt;PDFPage /&amp;gt;
    ...
  &amp;lt;/PDFDocument&amp;gt;
&amp;lt;/PDFData&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That of the preview pane will be nearly identical:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;PDFData&amp;gt;
  &amp;lt;PDFPreview&amp;gt;
    &amp;lt;PDFThumbnail /&amp;gt;
    &amp;lt;PDFThumbnail /&amp;gt;
    &amp;lt;PDFThumbnail /&amp;gt;
    ...
  &amp;lt;/PDFPreview&amp;gt;
&amp;lt;/PDFData&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extracting the scroll-and-fetch functionality presents an interesting challenge because it is currently split between the &lt;code&gt;&amp;lt;PDFDocument&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;PDFPage&amp;gt;&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;Among other things, the &lt;code&gt;&amp;lt;PDFDocument&amp;gt;&lt;/code&gt; is responsible for determining when:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the scrollable &amp;quot;boundary&amp;quot;, i.e., where in the document the viewport is located&lt;/li&gt;
&lt;li&gt;the last fetched page has entered the viewport, i.e., when to fetch additional pages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;PDFPage&amp;gt;&lt;/code&gt; is responsible for determining when it is visible by determining whether its boundaries overlap with the viewport.&lt;/p&gt;

      &lt;h3 id="the-component-based-solution" class="title title-h3"&gt;
        &lt;a name="the-component-based-solution" class="anchor" href="#the-component-based-solution"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The component-based solution
      &lt;/h3&gt;
    
&lt;p&gt;To share this behavior with the preview pane hierarchy, we&amp;#39;ll create two abstract components, a &lt;code&gt;&amp;lt;ScrollingPage&amp;gt;&lt;/code&gt; to take the responsibility of determing page visibility and a &lt;code&gt;&amp;lt;ScrollingDocument&amp;gt;&lt;/code&gt; to absorb the properties and methods for determining the scroll boundaries and when the request more pages. We&amp;#39;ll compose both the document and new preview panes from these new components.&lt;/p&gt;

&lt;p&gt;The hierarchy becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;PDFData&amp;gt;
  &amp;lt;PDFPreview&amp;gt;
    &amp;lt;ScrollingDocument&amp;gt;
      &amp;lt;ScrollingPage&amp;gt;
        &amp;lt;PDFThumbnail /&amp;gt;
      &amp;lt;/ScrollingPage&amp;gt;
      &amp;lt;ScrollingPage&amp;gt;
        &amp;lt;PDFThumbnail /&amp;gt;
      &amp;lt;/ScrollingPage&amp;gt;
      ...
    &amp;lt;/ScrollingDocument&amp;gt;
  &amp;lt;/PDFPreview&amp;gt;
  &amp;lt;PDFDocument&amp;gt;
    &amp;lt;ScrollingDocument&amp;gt;
      &amp;lt;ScrollingPage&amp;gt;
        &amp;lt;PDFPage /&amp;gt;
      &amp;lt;/ScrollingPage&amp;gt;
      &amp;lt;ScrollingPage&amp;gt;
        &amp;lt;PDFPage /&amp;gt;
      &amp;lt;/ScrollingPage&amp;gt;
      ...
    &amp;lt;/ScrollingDocument&amp;gt;
  &amp;lt;/PDFDocument&amp;gt;
&amp;lt;/PDFData&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rather than detailing all the changes, but I&amp;#39;ll highlight some key takeaways about how I fit the pieces together.&lt;/p&gt;

&lt;p&gt;First, these changes are made possible by Vue &lt;code&gt;slots&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;ScrollingPage&amp;gt;&lt;/code&gt; component is abstract, meaning it does not render any html itself. Instead, it delegates to its children, which, for our app, is a single &lt;code&gt;&amp;lt;PDFPage&amp;gt;&lt;/code&gt;, through its &lt;code&gt;render&lt;/code&gt; function while passing in additional properties via &lt;code&gt;this.$scopedSlots&lt;/code&gt;. This is akin to calling the child component with arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// src/components/ScrollingPage.vue

render() {
  return this.$scopedSlots.default({
    isElementVisible: this.isElementVisible,
  });
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;ScrollingDocument&amp;gt;&lt;/code&gt; uses a &lt;code&gt;v-for&lt;/code&gt; loop to render each of the fetched pages as &lt;code&gt;&amp;lt;ScrollingPage&amp;gt;&lt;/code&gt; components passing in properties the &lt;code&gt;&amp;lt;ScrollingPage&amp;gt;&lt;/code&gt; needs to perform its calculations. Here is a simplified version of the &lt;code&gt;&amp;lt;ScrollingDocument&amp;gt;&lt;/code&gt; template.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;template&amp;gt;
  &amp;lt;ScrollingPage
    v-for=&amp;quot;page in pages&amp;quot;
    :key=&amp;quot;page.pageNumber&amp;quot;
    v-bind=&amp;quot;{page, scrollTop, clientHeight}&amp;quot;
    &amp;gt;
    &amp;lt;div
      class=&amp;quot;scrolling-page&amp;quot;
      slot-scope=&amp;quot;{isElementVisible}&amp;quot;
      &amp;gt;
      &amp;lt;slot v-bind=&amp;quot;{page, isElementVisible}&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/ScrollingPage&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the use of the &lt;code&gt;slot-scope&lt;/code&gt; to receive the &lt;code&gt;isElementVisible&lt;/code&gt; prop passed in from the &lt;code&gt;&amp;lt;ScrollingPage&amp;gt;&lt;/code&gt; scoped slot. This and the individual &lt;code&gt;page&lt;/code&gt; prop, provided by the &lt;code&gt;v-for&lt;/code&gt; loop, are passed on to the &lt;code&gt;slot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The new &lt;code&gt;&amp;lt;PDFDocument&amp;gt;&lt;/code&gt; template below shows how this slot is used. It inserts &lt;code&gt;&amp;lt;PDFPage&amp;gt;&lt;/code&gt; as a child of &lt;code&gt;&amp;lt;ScrollingDocument&amp;gt;&lt;/code&gt; and extracts the key props with another usage of &lt;code&gt;slot-scope&lt;/code&gt; (a &lt;code&gt;slot-scope&lt;/code&gt; within a &lt;code&gt;slot-scope&lt;/code&gt;!) while merging in an additional prop, &lt;code&gt;scale&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;template&amp;gt;
  &amp;lt;ScrollingDocument
    class=&amp;quot;pdf-document&amp;quot;
    v-bind=&amp;quot;{pages, pageCount, currentPage}&amp;quot;
    @pages-fetch=&amp;quot;onPagesFetch&amp;quot;
    &amp;gt;
    &amp;lt;PDFPage
      slot-scope=&amp;quot;{page, isElementVisible}&amp;quot;
      v-bind=&amp;quot;{scale, page, isElementVisible}&amp;quot;
    /&amp;gt;
  &amp;lt;/ScrollingDocument&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;PDFPreview&amp;gt;&lt;/code&gt; is almost identical and demonstrates why we went to the trouble of using scoped slots&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;template&amp;gt;
  &amp;lt;ScrollingDocument
    class=&amp;quot;pdf-document&amp;quot;
    v-bind=&amp;quot;{pages, pageCount, currentPage}&amp;quot;
    @pages-fetch=&amp;quot;onPagesFetch&amp;quot;
    &amp;gt;
    &amp;lt;PDFThumbnail
      slot-scope=&amp;quot;{page, isElementVisible}&amp;quot;
      v-bind=&amp;quot;{scale, page, isElementVisible}&amp;quot;
    /&amp;gt;
  &amp;lt;/ScrollingDocument&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can render a different experience in this part of the component hierachy by changing the component we give to the slot (the &lt;code&gt;&amp;lt;PDFThumbnail&amp;gt;&lt;/code&gt;) while also getting the benefits of the shared behavior.&lt;/p&gt;

      &lt;h3 id="stepping-back" class="title title-h3"&gt;
        &lt;a name="stepping-back" class="anchor" href="#stepping-back"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Stepping back
      &lt;/h3&gt;
    
&lt;p&gt;Note the contrast in this approach with mixins. It would have been arguably much more straight forward easier to move required props, methods, and hooks into separate mixins for the preview and document panes. While we could accomplish the goal of code-sharing, it comes at the cost of implicit dependencies, potential name clashes, and other aspects of mounting complexity we noted earlier.&lt;/p&gt;

&lt;p&gt;Refactoring to components has a higher barrier to entry; it requires some extra thought and a grasp of &lt;code&gt;slots&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; (yes, it can get confusing).&lt;/p&gt;

&lt;p&gt;One practical advantage is we can troubleshoot the scrolling behavior with a clear picture of where the behavior is located in our component tree with Vue devtools:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/vue-pdf-viewer/part-4-shared-behavior-devtools.jpg" alt="scrolling components in Vue devtools" /&gt;&lt;/p&gt;

&lt;p&gt;In my opinion, this approach allows us to gain a clear separation of concerns and a better representation of how the pieces fit together as a whole; i.e., I believe the system is easier to understand and debug.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, I left out many of the implementation details for the components described here. Feel free to check out the &lt;a href="https://github.com/rossta/vue-pdfjs-demo"&gt;source code on Github&lt;/a&gt;. Make a pull request or let me know how I could improve things by &lt;a href="https://twitter.com/rossta"&gt;reaching out on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
