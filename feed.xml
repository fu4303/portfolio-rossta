<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2018-01-18T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Animating Connect Four with Vue.js</title>
    <link rel="alternate" href="/blog/animating-connect-four-with-vue.js.html"/>
    <id>/blog/animating-connect-four-with-vue.js.html</id>
    <published>2018-01-18T00:00:00+00:00</published>
    <updated>2018-01-18T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;When we left off our Connect Four game last, we used Vue.js components to
convert a static HTML view of the Connect Four board into a playable interface.
In this post, we'll animate the checkers falling and bouncing into place when
added to the game...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When we left off our Connect Four game last, we used Vue.js components to
convert a static HTML view of the Connect Four board into a playable interface.
In this post, we&amp;#39;ll animate the checkers falling and bouncing into place when
added to the game board.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how the game behaved at the end of &lt;a href="/blog/basic-connect-four-with-vuejs.html"&gt;the previous post&lt;/a&gt;:&lt;/p&gt;

&lt;p data-height="481" data-theme-id="0" data-slug-hash="eyrMBy" data-default-tab="js,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four Vue.js, SVG: first pass" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyrMBy/"&gt;Connect Four Vue.js, SVG: first pass&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;Clicking columns simply adds new checkers to the board in the first available
slots. Though it works, it doesn&amp;#39;t quite &lt;em&gt;feel&lt;/em&gt; like Connect Four; we want
checkers falling to the bottom of each column.&lt;/p&gt;

&lt;p&gt;Vue.js can help us here. It provides a number of features to support
&lt;em&gt;transitions&lt;/em&gt;, such as adding/removing single elements, adding/removing items in
a list, and even between values in data itself. Vue provides a &lt;a href="https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components"&gt;&lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;
component, which can be leverage to animate elements as they enter and leave the DOM&lt;/a&gt;. This is what we&amp;#39;ll hook into to animate checkers as they are added to the board.&lt;/p&gt;

&lt;p&gt;The Vue &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; element has mechanisms for either CSS or JavaScript
animation. Since we&amp;#39;ll have exact coordinates as component properties
representing the start and end points of the checker&amp;#39;s fall, we&amp;#39;ll want to reach
for the component&amp;#39;s &lt;a href="https://vuejs.org/v2/guide/transitions.html#JavaScript-Hooks"&gt;JavaScript
hooks&lt;/a&gt;, which
include &lt;code&gt;before-enter&lt;/code&gt;, &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;after-enter&lt;/code&gt;, &lt;code&gt;before-leave&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;, etc. To
keep things short and sweet, we&amp;#39;ll simply animate checkers as they are added to
the board—we may come back to animating of release of checkers from the
board in a later post.&lt;/p&gt;

&lt;p&gt;The template for our checker is simply a SVG &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element with &lt;code&gt;cx&lt;/code&gt; and
&lt;code&gt;cy&lt;/code&gt; properties to indicate its resting position in the column.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- board-checker-template --&amp;gt;
&amp;lt;circle :cx=&amp;quot;centerX&amp;quot; :cy=&amp;quot;centerY&amp;quot; ... /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of these HTML properties is bound to component properties in the &lt;code&gt;BoardChecker&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  computed: {
    centerX() {
      return (this.cellSize / 2);
    },

    centerY() {
      return (this.cellSize / 2) + (this.cellSize * (this.rowCount - 1 - this.row));
    },

    // ...
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To animate the arrival of this checker to the board, we need to wrap the
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;transition
  @enter=&amp;quot;enter&amp;quot;
  :css=&amp;quot;false&amp;quot;
  &amp;gt;
  &amp;lt;circle ... /&amp;gt;
&amp;lt;/transition&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vue recommends setting the &lt;code&gt;:css&lt;/code&gt; property of a &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; element to
&lt;code&gt;false&lt;/code&gt; as an optimization if only JavaScript animation will be used.
We also bind a callback named &amp;quot;enter&amp;quot; to the &lt;code&gt;@enter&lt;/code&gt; listener on the &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;
component. The definition of that callback will be a method on the
&lt;code&gt;BoardChecker&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  method: {
    enter(element, done) {
      // animate!

      done();
    },

    // ...
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vue expects that the &lt;code&gt;enter&lt;/code&gt; callback may be asynchronous, so the framework
provides a &lt;code&gt;done&lt;/code&gt; parameter which is a function that must be called to indicate that the
transition has completed.&lt;/p&gt;

&lt;p&gt;So how to animate? We can lean on a third-party library to do the heavy-lifting;
we just need to wire it up correctly to get the desired effect. I chose the
&lt;code&gt;GSAP&lt;/code&gt; library from &lt;a href="https://greensock.com/"&gt;Greensock&lt;/a&gt; which is well-suited for
SVG animation, though just about any popular animation library could work in its
place. But don&amp;#39;t take it from me—here&amp;#39;s what expert, Sarah Drasner, has to say
in her book &lt;a href="http://shop.oreilly.com/product/0636920045335.do"&gt;SVG Animations&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Due to the fact that GreenSock corrects some of SVG’s cross-browser quirks,
and has thought of every different use case for animation, GreenSock is going
to be the animation technology I recommend for production sites most
frequently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The GSAP ships with a number of utilities to support complex animation and
synchronization. We&amp;#39;re going to use the
&lt;a href="https://greensock.com/docs/TweenMax/static.fromTo"&gt;&lt;code&gt;TweenMax.fromTo&lt;/code&gt;&lt;/a&gt; function
with an easing parameter to bounce the checker in to place. It needs a target
element, a duration, &amp;quot;from params&amp;quot;, and &amp;quot;to params&amp;quot;, which describe the
animation at the start and end—hence, &lt;code&gt;fromTo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;TweenMax.fromTo(element, duration, { y: startPosition }, { y: endPosition });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the checker&amp;#39;s path of motion will have only vertical motion, we will
animate the &lt;code&gt;y&lt;/code&gt; position. The key insight is to understand that the &lt;code&gt;TweenMax&lt;/code&gt;
start and end &lt;code&gt;y&lt;/code&gt; positions are relative to element&amp;#39;s static position; in this
case, that is the &lt;code&gt;cy&lt;/code&gt; property of our &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element. The start position
for the animiation must be above the checker&amp;#39;s finish position, it&amp;#39;s given &lt;code&gt;cy&lt;/code&gt;
coordinate; because the origin of the SVG view box is in the top left, the
vertical start position must be a &lt;em&gt;negative&lt;/em&gt; value with repect to the finish. To
start the animation just barely outside the view box, we want the negative value
of the static &lt;code&gt;cy&lt;/code&gt; position and subtract the &lt;code&gt;cellSize&lt;/code&gt;. The end position is
simply 0—no change from the given &lt;code&gt;cy&lt;/code&gt; coordinate.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const fromParams = {
  y: (-1 * (this.centerY + this.cellSize))
};

const toParams = {
  y: 0,
  ease: Bounce.easeOut,
  onComplete: done,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;toParams&lt;/code&gt; also accept an &lt;code&gt;ease&lt;/code&gt; property, for which we&amp;#39;ll use GSAP&amp;#39;s
&lt;code&gt;Bounce.easeOut&lt;/code&gt;, and an &lt;code&gt;onComplete&lt;/code&gt; callback property, which will be the
&lt;code&gt;done&lt;/code&gt; callback provided by Vue transition&amp;#39;s &lt;code&gt;enter&lt;/code&gt; hook. This will allow us to
prevent changes in game state until the checker has finished animating.&lt;/p&gt;

&lt;p&gt;We also can play with the &lt;code&gt;duration&lt;/code&gt; property. As we add more checkers to a
single column, each checker will have a shorter distance to fall. If we
otherwise kept the duration the same for all checkers, they would appear to fall
more slowly as they had less distance to fall.&lt;/p&gt;

&lt;p&gt;Finding a duration that feels right takes a little trial and error, but where we
currently have it, the duration is an arbitrary constant multiplied by a
percentage of the total column height based on where the checker will end up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const percentage = (this.rowCount - this.row) / this.rowCount;
const duration = return 0.2 + 0.4 * this.percentage;           // seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Putting this altogether, our final &lt;code&gt;enter&lt;/code&gt; method looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  // ...

  methods: {
    enter(el, done) {
      // start above board, outside the view box
      const fromY = -1 * (this.centerY + this.cellSize);

      // finish at the position given to
      const toY = 0;

      const fromParams = {
        y: fromY
      };

      const toParams = {
        y: toY,
        ease: Bounce.easeOut,
        onComplete: done,
      };

      const percentage = (this.rowCount - this.row) / this.rowCount;
      const duration = return 0.2 + 0.4 * this.percentage; // arbitrary constants

      return TweenMax.fromTo(el, this.duration, fromParams, destParams);
    },
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding this to our game board, we now have some nicely animated checkers falling
into place as we play! Note that, because we&amp;#39;re using SVG pattern masking, as
described in &lt;a href="#"&gt;an earlier post&lt;/a&gt;, the checkers appear to fall behind the Connect
Four wall, visible through the portholes.&lt;/p&gt;

&lt;p data-height="483" data-theme-id="0" data-slug-hash="jYxxGv" data-default-tab="js,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four in Vue.js, SVG: animated checkers" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/jYxxGv/"&gt;Connect Four in Vue.js, SVG: animated checkers&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;In the next post, we&amp;#39;ll introduce some additional game state so we can check for
a win or draw.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building basic Connect Four with Vue.js</title>
    <link rel="alternate" href="/blog/basic-connect-four-with-vuejs.html"/>
    <id>/blog/basic-connect-four-with-vuejs.html</id>
    <published>2018-01-15T00:00:00+00:00</published>
    <updated>2018-01-15T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG, Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lately, I've gotten excited about the &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; JavaScript
framework view rendering due to its versatility, low barrier to entry, and
community...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG, Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lately, I&amp;#39;ve gotten excited about the &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; JavaScript
framework view rendering due to its versatility, low barrier to entry, and
community supported extensions for state management and routing.  In this post,
we&amp;#39;ll use Vue.js 2 to dynamically render the Connect Four game board we started
&lt;a href="/blog/connect-four-with-svg-pattern-masking.html"&gt;last time&lt;/a&gt;. This
will not be a complete tutorial on Vue.js, but it hopefully will illustrate
some of Vue&amp;#39;s basic concepts and its powerful and intuitive features.
Check out the &lt;a href="https://vuejs.org/v2/guide/"&gt;excellent Vue.js guides&lt;/a&gt; for a
thorough introduction to the framework.&lt;/p&gt;

&lt;p&gt;To see where we&amp;#39;ll end up, here&amp;#39;s a pen:&lt;/p&gt;

&lt;p data-height="485" data-theme-id="0" data-slug-hash="eyrMBy" data-default-tab="js,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four Vue.js, SVG: first pass" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyrMBy/"&gt;Connect Four Vue.js, SVG: first pass&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

      &lt;h2 id="breaking-it-down" class="title"&gt;
        &lt;a name="breaking-it-down" class="anchor" href="#breaking-it-down"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Breaking it down
      &lt;/h2&gt;
    
&lt;p&gt;We&amp;#39;ll use Vue.js to convert the static layout, which renders the Connect Four board in SVG with a few checkers in place as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- board --&amp;gt;
&amp;lt;svg viewBox=&amp;quot;0 0 700 600&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;!-- defs for svg pattern masking --&amp;gt;

  &amp;lt;!-- column 0 --&amp;gt;
  &amp;lt;svg x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot;&amp;gt;

    &amp;lt;!-- checker --&amp;gt;
    &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;550&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;#254689&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;

    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;600&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
  &amp;lt;/svg&amp;gt;

  &amp;lt;!-- column 1 --&amp;gt;
  &amp;lt;svg x=&amp;quot;100&amp;quot; y=&amp;quot;0&amp;quot;&amp;gt;
    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;600&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
  &amp;lt;/svg&amp;gt;

  &amp;lt;!-- and more columns... --&amp;gt;

&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#39;s easy to spot some repetition. There are a fixed number of columns of
the same dimensions and appearance, each of which may contain checkers. As
Vue.js is a component based framework, we&amp;#39;ll want to break these pieces into logical
units: the game will be composed of a single Board component, which will render
all the Column components, each of which will render their &amp;quot;stack&amp;quot; of Checker
components. Here&amp;#39;s how we might visualize this breakdown:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four-components-442b46a4.png" style="width:70%;margin:2em auto;display:block;" alt="Connect four components" /&gt;&lt;/p&gt;

&lt;p&gt;Aside from this hierarchy, we also will make an informal distinction to describe
the Board, Column, and Checker: they are &amp;quot;presentation&amp;quot; components.
Notably, their main role is to determine how the app will look. We&amp;#39;ll wrap
the Board in a &amp;quot;container&amp;quot; component, whose main role is to determine how the
app will work. For more on this distinction, check out Dan Abramov&amp;#39;s React article on
&lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"&gt;Presentational and Container
Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For our game, a &lt;code&gt;GameContainer&lt;/code&gt; component will keep track of and manipulate the key
game state, including adding checkers when a player selects a column, toggling
the player turns, and, later, determine if a player has won the game. Here&amp;#39;s
the complete component hierarchy in Vue/HTML pseudocode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;game-container&amp;gt; &amp;lt;!-- state: checkers, current player --&amp;gt;
  &amp;lt;game-board :checkers=&amp;quot;checkers&amp;quot;&amp;gt; &amp;lt;!-- state: board dimensions --&amp;gt;
    &amp;lt;board-column v-for=&amp;quot;column in columns&amp;quot; :stack=&amp;quot;stack(column)&amp;quot;&amp;gt;
      &amp;lt;board-checker v-for=&amp;quot;checker in stack&amp;quot;&amp;gt;&amp;lt;/board-checker&amp;gt;
    &amp;lt;/board-column&amp;gt;
  &amp;lt;/game-board&amp;gt;
&amp;lt;/game-container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In practice, our presentation components will keep some of their own state and
logic as well, but it will be very specfic to the local concerns of that
component; when a presentation component needs to know about higher level
state, it will be passed in as props from its parent. Any events triggered in
the user interface will be passed back up the heirarchy, eventually reaching
our container; &amp;quot;actions up, data down&amp;quot;. For this first pass, the main action
will be clicking a column in which to drop the next checker.&lt;/p&gt;

      &lt;h2 id="the-container" class="title"&gt;
        &lt;a name="the-container" class="anchor" href="#the-container"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The container
      &lt;/h2&gt;
    
&lt;p&gt;The &lt;code&gt;GameContainer&lt;/code&gt; component be the source of truth for the key game-level
concerns including an object to store the checkers that have been played and
numbers representing row and column (abbreviated throughout the code as &lt;code&gt;col&lt;/code&gt;)
counts. For now, we&amp;#39;ll also hardcode the first player to &amp;quot;red&amp;quot;. The
&lt;code&gt;GameContainer&lt;/code&gt; markup is simply to render the &lt;code&gt;GameBoard&lt;/code&gt;, which will receive
data from the container via props.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const GameContainer = Vue.component(&amp;#39;game-container&amp;#39;, {
  data() {
    return {
      checkers: {},
      playerColor: &amp;#39;red&amp;#39;,
      rowCount: 6,
      colCount: 7,
      // ...
    };
  },

  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- game-container-template --&amp;gt;
&amp;lt;game-board :checkers=&amp;quot;checkers&amp;quot; :rowCount=&amp;quot;rowCount&amp;quot; :colCount=&amp;quot;colCount&amp;quot;&amp;gt;&amp;lt;/game-board&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I&amp;#39;ve chosen to store checker data in an object, where each checker will be
identified by a key based on its row and column number. Each value in the
&lt;code&gt;checkers&lt;/code&gt; object will itself be an object with properties for row, column,
color of a dropped checker, i.e., &lt;code&gt;{ row, col, color }&lt;/code&gt;. A common alternative for
storing data in a grid-based game is to use an array of arrays; I personally
have found it easier to represent the grid in a map-like data structure, such
as a JavaScript object, to manipulate, search for, and perform transformations
on game data. Either approach would work for the purpose of this demo—the
mechanics of getting and setting checker data in the &lt;code&gt;GameContainer&lt;/code&gt; would just
differ slightly.&lt;/p&gt;

      &lt;h2 id="the-board" class="title"&gt;
        &lt;a name="the-board" class="anchor" href="#the-board"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The board
      &lt;/h2&gt;
    
&lt;p&gt;The &lt;code&gt;GameBoard&lt;/code&gt; has the primary responsibility of defining the dimensions of
the board layout, based off the row and column counts it receives from the
&lt;code&gt;GameContainer&lt;/code&gt; and the size of each cell, which will come from local data.
From this data, the board computes board width and height and the radius of
each checker. The &lt;code&gt;GameBoard&lt;/code&gt; will also be responsible for filtering the
checkers specific to each column into the correct &lt;code&gt;BoardColumn&lt;/code&gt; children
components, as shown in the &lt;code&gt;checkerStack(col)&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const GameBoard = Vue.component(&amp;#39;game-board&amp;#39;, {
  data() {
    return {
      cellSize: 100,
    };
  },

  computed: {
    cols() { return range(this.colCount); },

    boardWidth() { return this.colCount * this.cellSize; },
    boardHeight() { return this.rowCount * this.cellSize; },
    checkerRadius() { return this.cellSize * 0.45; },

    // ...
  },

  methods: {
    checkerStack(col) {
      return Object.values(this.checkers).filter(c =&amp;gt; c.col === col);
    },
  },

  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A neat trick here is to use a custom &lt;code&gt;range&lt;/code&gt; function that converts the
&lt;code&gt;colCount&lt;/code&gt; into a list of &lt;code&gt;0..colCount-1&lt;/code&gt; to identify the columns, using the
spread operator and the &lt;code&gt;Array.prototype.keys&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const range = num =&amp;gt; [...Array(num).keys()];
// range(7)
// [0, 1, 2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;GameBoard&lt;/code&gt; template, we&amp;#39;re able convert the hard-coded width, height,
, x, and y positions of our original SVG layout to dynamic properties. The
&lt;code&gt;GameBoard&lt;/code&gt; also renders each of the &lt;code&gt;BoardColumn&lt;/code&gt; components using the &lt;code&gt;v-for&lt;/code&gt;
directive on our &lt;code&gt;col&lt;/code&gt; range, again, passing key game state and checker data
as props. The props also include the url to the pattern &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; that will
give the columns the transparent portholes, as discussed in the &lt;a href="/blog/connect-four-with-svg-pattern-masking.html"&gt;previous
post&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- game-board-template --&amp;gt;
&amp;lt;svg :viewBox=&amp;quot;`0 0 ${boardWidth} ${boardHeight}`&amp;quot;
  xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;defs&amp;gt;
    &amp;lt;pattern :id=&amp;quot;patternId&amp;quot; :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;cellSize&amp;quot;
      patternUnits=&amp;quot;userSpaceOnUse&amp;quot;&amp;gt;
      &amp;lt;circle :cx=&amp;quot;cellSize / 2&amp;quot; :cy=&amp;quot;cellSize / 2&amp;quot; :r=&amp;quot;checkerRadius&amp;quot; fill=&amp;quot;black&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
    &amp;lt;/pattern&amp;gt;
    &amp;lt;mask :id=&amp;quot;maskId&amp;quot;&amp;gt;
      &amp;lt;rect :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;boardHeight&amp;quot; fill=&amp;quot;white&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
      &amp;lt;rect :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;boardHeight&amp;quot; :fill=&amp;quot;pattern&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;/mask&amp;gt;
  &amp;lt;/defs&amp;gt;
  &amp;lt;board-column
    v-for=&amp;quot;col in cols&amp;quot;
    :checkers=&amp;quot;checkerStack(col)&amp;quot;
    :col=&amp;quot;col&amp;quot;
    :mask=&amp;quot;mask&amp;quot;
    ...  /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more on the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; elements, see the previous
article on &lt;a href="/blog/connect-four-with-svg-pattern-masking.html"&gt;SVG pattern
masking&lt;/a&gt;.&lt;/p&gt;

      &lt;h2 id="the-columns" class="title"&gt;
        &lt;a name="the-columns" class="anchor" href="#the-columns"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The columns
      &lt;/h2&gt;
    
&lt;p&gt;Now on to the &lt;code&gt;BoardColumn&lt;/code&gt; component and its template. It is responsible for
rendering the pattern-masked &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; and any checkers dropped in its column.
By wrapping the &lt;code&gt;BoardColumn&lt;/code&gt; in a nested &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element with an x value based
off &lt;code&gt;col * cellSize&lt;/code&gt;, the rendered child elements of the &lt;code&gt;BoardColumn&lt;/code&gt; will be
positioned relatively within. Note how straightforward it is to add a click
listener to our template where we&amp;#39;ll trigger a &lt;code&gt;drop&lt;/code&gt; method on the
&lt;code&gt;BoardColumn&lt;/code&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- board-column-template --&amp;gt;
&amp;lt;svg :x=&amp;quot;col * cellSize&amp;quot; y=&amp;quot;0&amp;quot;&amp;gt;
  &amp;lt;g @click=&amp;quot;drop&amp;quot; class=&amp;quot;column&amp;quot;&amp;gt;
    &amp;lt;board-checker
      v-for=&amp;quot;checker in checkers&amp;quot;
      :checker=&amp;quot;checker&amp;quot;
      :cellSize=&amp;quot;cellSize&amp;quot;
      :rowCount=&amp;quot;rowCount&amp;quot;
      ...  /&amp;gt;
    &amp;lt;rect :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;boardHeight&amp;quot; :fill=&amp;quot;color&amp;quot; :mask=&amp;quot;mask&amp;quot; /&amp;gt;
  &amp;lt;/g&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#39;s check out that &lt;code&gt;drop&lt;/code&gt; method on &lt;code&gt;BoardColumn&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const BoardColumn = Vue.component(&amp;#39;board-column&amp;#39;, {
  computed: {
    // Find the current max occupied row and add 1
    nextOpenRow() {
      return Math.max(...this.checkers.map(c =&amp;gt; c.row).concat(-1)) + 1;
    },
  },

  methods: {
    drop(col) {
      const row = this.nextOpenRow;

      if (row &amp;lt; this.rowCount) {
        this.$emit(&amp;#39;drop&amp;#39;, { row, col });
      } else {
        console.log(&amp;#39;cannot drop&amp;#39;, { row, col });
      }
    },
  },
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method&amp;#39;s responsibility is to trigger a &lt;code&gt;&amp;#39;drop&amp;#39;&lt;/code&gt; event up the component hierarchy
with data for &lt;code&gt;{ row, col }&lt;/code&gt;. This will indicate an attempt has been made to drop
a checker at that position. To accomplish this, it calculates the next
available row in the &lt;code&gt;nextOpenRow&lt;/code&gt; function. If the next open row would be off
the board, then the column is full and the attempt is swallowed. We calculate
&lt;code&gt;nextOpenRow&lt;/code&gt; by finding the max row number in the stack and adding one. If the
checker stack is empty in this column, then the result will be &lt;code&gt;0&lt;/code&gt;, which is
where we&amp;#39;d want the first checker to land.&lt;/p&gt;

      &lt;h2 id="updating-game-state" class="title"&gt;
        &lt;a name="updating-game-state" class="anchor" href="#updating-game-state"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Updating game state
      &lt;/h2&gt;
    
&lt;p&gt;Note this constitues some game logic so we&amp;#39;re cheating a little given our
presentation/container distinction noted earlier; it may make more sense to
push this logic to our &lt;code&gt;GameContainer&lt;/code&gt; later, but for now, it&amp;#39;s convenient to
leave it here. As we&amp;#39;ll see later, the &lt;code&gt;GameContainer&lt;/code&gt; will respond to this
event and do the work to update the &lt;code&gt;checkers&lt;/code&gt; map for the game.&lt;/p&gt;

&lt;p&gt;Back in the &lt;code&gt;GameContainer&lt;/code&gt;, an emitted &lt;code&gt;drop&lt;/code&gt; event with &lt;code&gt;{ row, col }&lt;/code&gt; data is
captured here, where the game will add the current player&amp;#39;s &lt;code&gt;color&lt;/code&gt; as
property, update the &lt;code&gt;checkers&lt;/code&gt; object, and toggle the color for the next
player.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const GameContainer = Vue.component(&amp;#39;game-container&amp;#39;, {
  methods: {
    toggleColor() {
      if (this.playerColor === RED) {
        this.playerColor = BLACK;
      } else {
        this.playerColor = RED;
      }
    },

    drop({ col, row }) {
      const color = this.playerColor;

      console.log(&amp;#39;setting checker&amp;#39;, key(row, col), { row, col, color });
      Vue.set(this.checkers, key(row, col), { row, col, color });
      this.toggleColor();
    },

    // ...
  },

  // ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note an important gotcha when using &lt;code&gt;Vue.js&lt;/code&gt; demonstrated here: we need to use
&lt;code&gt;Vue.set&lt;/code&gt; when adding a new checker to the &lt;code&gt;checkers&lt;/code&gt; object. Vue needs to hook
into getters/setters to track dependencies and propagate data changes
throughout the application. Unfortunately, because of how JavaScript works,
&lt;em&gt;Vue can&amp;#39;t detect property addition or deletion&lt;/em&gt;. This affects how we
adding checkers to the underlying data structure during game play. By using
&lt;code&gt;Vue.set&lt;/code&gt;, we ensure the data change results in rendering the new checker
on the game board.&lt;/p&gt;

      &lt;h2 id="the-checkers" class="title"&gt;
        &lt;a name="the-checkers" class="anchor" href="#the-checkers"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The checkers
      &lt;/h2&gt;
    
&lt;p&gt;To render the checkers, we have a &lt;code&gt;BoardChecker&lt;/code&gt; component. It is simply a &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- board-checker-template --&amp;gt;
&amp;lt;circle :cx=&amp;quot;centerX&amp;quot; :cy=&amp;quot;centerY&amp;quot; :r=&amp;quot;checkerRadius&amp;quot; :fill=&amp;quot;adjustedColor&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; properties are computed based on the &lt;code&gt;checker&lt;/code&gt; object&amp;#39;s &lt;code&gt;row&lt;/code&gt; and the &lt;code&gt;cellSize&lt;/code&gt; and &lt;code&gt;rowCount&lt;/code&gt; properties passed in from the parent column. We translate the canonical red/black color names to prettier hex colors to fill each &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  data() {
    return {
      colorHexes: {
        red: &amp;#39;#FC7E69&amp;#39;,
        black: &amp;#39;#254689&amp;#39;,
      },
    };
  },

  computed: {
    row() { return this.checker.row; },
    col() { return this.checker.col; },
    color() { return this.checker.color; },

    adjustedColor() {
      return this.colorHexes[this.color];
    },

    centerX() {
      return (this.cellSize / 2);
    },

    centerY() {
      return (this.cellSize / 2) + (this.cellSize * (this.rowCount - 1 - this.row));
    },
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, here&amp;#39;s a link to &lt;a href="https://codepen.io/rossta/pen/jYxxGv?editors=1010"&gt;the pen on
codepen.io&lt;/a&gt; where you can
see the full source code and try out the game for yourself.&lt;/p&gt;

&lt;p&gt;This completes our first pass at using Vue.js to create a playable Connect Four
game in the browser. We&amp;#39;re not yet detecting a game win or draw; that&amp;#39;s still
to come. In &lt;a href="/blog/animating-connect-four-with-vue.js.html"&gt;the next post&lt;/a&gt;, we use Vue to animate each checker falling into
place as they are added to the board.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Connect Four with SVG pattern masking</title>
    <link rel="alternate" href="/blog/connect-four-with-svg-pattern-masking.html"/>
    <id>/blog/connect-four-with-svg-pattern-masking.html</id>
    <published>2018-01-10T00:00:00+00:00</published>
    <updated>2018-01-10T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG,
Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my recent side projects to learn new technologies
has been to build a browser-based rendition of &lt;a href="https://en.wikipedia.org/wiki/Connect_Four"&gt;Connect
Four&lt;/a&gt;.
The fully-functional...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG,
Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my recent side projects to learn new technologies
has been to build a browser-based rendition of &lt;a href="https://en.wikipedia.org/wiki/Connect_Four"&gt;Connect
Four&lt;/a&gt;.
The fully-functional version of the game will have both a backend and frontend
component with some good challenges including animating checkers
falling into place and connecting two players over the network.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;#39;ll demonstrate rendering the static board with SVG, including
the use of pattern masking to emulate a game board wall with portholes through
which to view the checkers.&lt;/p&gt;

      &lt;h2 id="let-39-s-talk-about-svg" class="title"&gt;
        &lt;a name="let-39-s-talk-about-svg" class="anchor" href="#let-39-s-talk-about-svg"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Let&amp;#39;s talk about SVG
      &lt;/h2&gt;
    
&lt;p&gt;SVG feels scary and confusing to the uninitiated, myself included. The good news
is that we can take a progressive approach to adopting SVG without understanding
everything there is to know about it at first.&lt;/p&gt;

&lt;p&gt;Here are a few reasons why using SVG is a good fit to render the elements of a
Connect Four game board:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SVG has shape elements like &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; that are better
semantically than using divs to render columns and checkers using &lt;a href="https://davidwalsh.name/css-circles"&gt;the rounded
border trick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVG provides simple, declarative rules for positioning visual elements; no
need to mess with picture-perfect pixels, absolute positioning, and z-indexing&lt;/li&gt;
&lt;li&gt;SVG elements animate smoothly, which will allow us to render a dropped checker
bouncing into place with a realistic touch and that it has a coordinate system&lt;/li&gt;
&lt;li&gt;SVG provides &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; elements, so we can animate falling
checkers behind &amp;quot;holes&amp;quot; in the game wall&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="pattern-masking" class="title"&gt;
        &lt;a name="pattern-masking" class="anchor" href="#pattern-masking"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Pattern masking
      &lt;/h2&gt;
    
&lt;p&gt;A first pass at the game board might be to explicitly render circles for all 42
game cells (6 rows, 7 columns) and set their fill colors based on game state to
red, black, or as the background color to fake an empty cell. What if, instead,
we could render the game board with portholes punched into it? That way, the only
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; elements we need to render explicitly are the checkers themselves.&lt;/p&gt;

&lt;p&gt;This is where SVG pattern masking comes in. A powerful feature of desktop visual
editing tools Adobe Photoshop/Illustrator is available on the web.
&lt;a href="https://www.w3.org/TR/SVG/masking.html"&gt;Masking&lt;/a&gt; allows for a graphic (or set of
graphics) to act as a transparent overlay to reveal background elements. Applied
to our game, it provides a mechanism by which we can see checkers falling
through holes in the game board wall. To my knowledge, there&amp;#39;s no (easy) way
with typical HTML/CSS to accomplish this other than, perhaps, creating a
transparent png, something we won&amp;#39;t be able to manipulate easily
programmatically.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start with a demonstration of pattern masking by rendering a single game
board cell and checker.&lt;/p&gt;

&lt;p&gt;Within a containing &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element with a &lt;code&gt;viewBox&lt;/code&gt; of 100x100 units, we&amp;#39;ll
start by adding a &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; to represent a checker positioned slightly
offscreen to mimic it falling into place.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;svg viewBox=&amp;quot;0 0 100 100&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;25&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;#254689&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The game wall is simply a &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; positioned over the circle; once added, we
can&amp;#39;t see the circle anymore.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;svg viewBox=&amp;quot;0 0 100 100&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;25&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;#254689&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
  &amp;lt;rect col=&amp;quot;0&amp;quot; width=&amp;quot;100&amp;quot; height=&amp;quot;600&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to create the hole with a pattern mask. To accomplish this, we use
(surprise) both a &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; elements. These elements are not
graphical, meaning, they won&amp;#39;t be directly rendered in the view box. Instead,
we&amp;#39;ll later add the resulting mask as an attribute of our &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; game wall—the
element we want to see through. The &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; elements are nested
inside a &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element so they can be available for reuse.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;defs&amp;gt;
  &amp;lt;pattern id=&amp;quot;cell-pattern&amp;quot; patternUnits=&amp;quot;userSpaceOnUse&amp;quot; width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot;&amp;gt;
    &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;50&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;black&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
  &amp;lt;/pattern&amp;gt;
  &amp;lt;mask id=&amp;quot;cell-mask&amp;quot;&amp;gt;
    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot; fill=&amp;quot;white&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot; fill=&amp;quot;url(#cell-pattern)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
  &amp;lt;/mask&amp;gt;
&amp;lt;/defs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is simply matches the size of a cell, 100x100, and it contains a
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;, representing the hole, that matches the size of the checker. The
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; gets a fill color of &amp;quot;black&amp;quot;; when applied the to &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt;, this
this means the absence of space, or full transparency, as opposed to literal
black.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; is composed of two &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; elements that match the game wall size;
the first gets a fill color of &amp;quot;white&amp;quot; (opposite of &amp;quot;black&amp;quot; in a mask) to
represent the part of the wall we want to be opaque. The second &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; sits on
top of the first and has a &lt;code&gt;fill&lt;/code&gt; of &lt;code&gt;url(#cell-pattern)&lt;/code&gt; which refers to the
pattern we created above.&lt;/p&gt;

&lt;p&gt;Now, we can set the &lt;code&gt;mask&lt;/code&gt; attribute for our game wall &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; by referencing
the &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; element by id.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This punches a hole through the wall to reveal the checker underneath.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what we have so far on &lt;a href="https://codepen.io/rossta/pen/NXMrLg"&gt;CodePen&lt;/a&gt;:&lt;/p&gt;

&lt;p data-height="265" data-theme-id="0" data-slug-hash="NXMrLg" data-default-tab="html,result" data-user="rossta" data-embed-version="2" data-pen-title="SVG mask demo" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/NXMrLg/"&gt;SVG mask demo&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;A nice feature of the &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; element is that it repeats itself based
on the height/width attributes we&amp;#39;ve provided. This means we can extend the dimensions of the view
box and our game wall &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; to reveal the seven rows of a
single column—we don&amp;#39;t have to add each circular hole to the DOM explicitly! To
build multiple columns, we&amp;#39;ll simply, for each column, add a nested &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;
element at the correct x position to wrap each masked &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt;. This allows us
to position each column relative to the container &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; without needed to
specify x coordinates for each child &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the full demo of a static Connect Four SVG game board on
&lt;a href="https://codepen.io/rossta/pen/eyrgJe"&gt;CodePen&lt;/a&gt;:&lt;/p&gt;

&lt;p data-height="370" data-theme-id="0" data-slug-hash="eyrgJe" data-default-tab="html,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four board in SVG" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyrgJe/"&gt;Connect Four board in SVG&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;Finally, here&amp;#39;s a sneak preview of the how the falling checker will look behind the pattern mask:&lt;/p&gt;

&lt;p data-height="265" data-theme-id="0" data-slug-hash="eyPpog" data-default-tab="html,result" data-user="rossta" data-embed-version="2" data-pen-title="SVG mask demo" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyPpog/"&gt;SVG mask demo&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;For more related info, check out the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial"&gt;MDN SVG Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MDN docs for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern"&gt;&lt;code&gt;&amp;lt;pattern /&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask"&gt;&lt;code&gt;&amp;lt;mask /&amp;gt;&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs"&gt;&lt;code&gt;&amp;lt;defs /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pretty much anything &lt;a href="https://twitter.com/sarah_edo"&gt;Sarah Drasner&lt;/a&gt; publishes, including &lt;a href="http://shop.oreilly.com/product/0636920045335.do"&gt;SVG Animations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="/blog/building-basic-connect-four-with-vuejs.html"&gt;the next post&lt;/a&gt;, we&amp;#39;ll
take a look at using Vue.js to render the board dynamically and add checkers
based on user interaction.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How we switched from Sprockets to Webpack</title>
    <link rel="alternate" href="/blog/from-sprockets-to-webpack.html"/>
    <id>/blog/from-sprockets-to-webpack.html</id>
    <published>2017-11-05T00:00:00+00:00</published>
    <updated>2017-11-05T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;In case you missed the news, &lt;a href="http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/"&gt;Rails is loving JavaScript&lt;/a&gt; and Rails 5.1 ships with the option to compile JavaScript with &lt;a href="https://webpack.js.org"&gt;Webpack&lt;/a&gt; via the &lt;a href="https://github.com/rails/webpacker"&gt;Webpacker gem&lt;/a&gt;. This is a big change after years of the Rails asset pipeline running on Sprockets. My team at &lt;a href="https://learnzillion.com"&gt;LearnZillion&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In case you missed the news, &lt;a href="http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/"&gt;Rails is loving JavaScript&lt;/a&gt; and Rails 5.1 ships with the option to compile JavaScript with &lt;a href="https://webpack.js.org"&gt;Webpack&lt;/a&gt; via the &lt;a href="https://github.com/rails/webpacker"&gt;Webpacker gem&lt;/a&gt;. This is a big change after years of the Rails asset pipeline running on Sprockets. My team at &lt;a href="https://learnzillion.com"&gt;LearnZillion&lt;/a&gt; recently decided to embrace this change and make the switch to Webpack with Webpacker to compile our clientside JavasScript for our Rails 4.2 application. &lt;em&gt;Gulp!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post describes the challenges we encountered while switching from Sprockets to Webpack, how we solved those issues, and what we learned along the way.&lt;/p&gt;

&lt;p&gt;Though much of what follows may be generally relevant to other teams considering a similar change, this post is not intended to be a step-by-step guide for replacing the Rails asset pipeline with Webpack. This post also won&amp;#39;t help you integrate with of the currently popular frameworks like React, Angular, Vue, or Ember (we use Knockout.js).&lt;/p&gt;

&lt;p&gt;That said, if you&amp;#39;re working in a legacy Rails application and considering Webpack, perhaps you can learn from our mistakes.&lt;/p&gt;

      &lt;h2 id="table-of-contents" class="title"&gt;
        &lt;a name="table-of-contents" class="anchor" href="#table-of-contents"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Table of Contents
      &lt;/h2&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href="#why-switch-"&gt;Why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpack-the-rails-way"&gt;Webpack, the Rails Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-a-plan"&gt;Making a plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-webpack-entries"&gt;Setting up Webpack entries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#maintaining-backwards-compatibility"&gt;Maintaining backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-a-javascript-module"&gt;Migrating a JavaScript module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exporting-from-webpack"&gt;Exporting from Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resolving-application-modules"&gt;Resolving application modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extending-the-webpack-configuration"&gt;Extending the Webpack configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#importing-libraries-and-global-scope"&gt;Importing libraries and global scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#discovering-webpack-chunks"&gt;Discovering Webpack chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extracting-common-chunks"&gt;Extracting common chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-predictable-long-term-caching"&gt;Adding predictable long-term caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-party-stylesheets-images-and-fonts"&gt;Third party stylesheets, images, and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-with-capistrano-and-nginx"&gt;Deploying with Capistrano and Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unit-testing-with-karma"&gt;Unit testing with Karma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-development-with-ssl"&gt;Local development with SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      &lt;h2 id="why-switch-" class="title"&gt;
        &lt;a name="why-switch-" class="anchor" href="#why-switch-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why switch?
      &lt;/h2&gt;
    
&lt;p&gt;The asset pipeline was revolutionary in the Rails community when it was first introduced in Rails 3.1 and it has served our project well over the years. In the mean time, JavaScript has exploded in popularity and the collective efforts of the community have led to many improvements, including in the domain the Sprockets was originally created to solve.&lt;/p&gt;

&lt;p&gt;Given this context, here are a few reasons we decided to switch (paraphrasing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sprockets is too slow, i.e., in development, we don&amp;#39;t want to run JavaScript compilation through our Rails process&lt;/li&gt;
&lt;li&gt;To adopt ES6 syntax and &lt;a href="https://github.com/TannerRogalsky/sprockets-es6#sprockets-es6"&gt;Sprockets support for ES6 is experimental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For advanced features not available in Sprockets (or without extra effort), i.e., modularity, tree-shaking, live-reload, configurable source-maps, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though there are number of JavaScript tools that we could have chosen instead Webpack, our decision here was pretty simple. As a team policy, we aim to stick with Rails conventions where possible. Given the official support in Rails and the general momentum in the Webpack community, this was the appropriate choice for our team.&lt;/p&gt;

      &lt;h2 id="webpack-the-rails-way" class="title"&gt;
        &lt;a name="webpack-the-rails-way" class="anchor" href="#webpack-the-rails-way"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Webpack, the Rails Way
      &lt;/h2&gt;
    
&lt;p&gt;&lt;a href="https://github.com/rails/webpacker"&gt;Webpacker&lt;/a&gt; is the official Rails gem for integrating Webpack with Rails. &lt;a href="https://medium.com/@gauravtiwari"&gt;Guarav Tiwari&lt;/a&gt; recently wrote a &lt;a href="https://medium.com/statuscode/introducing-webpacker-7136d66cddfb"&gt;detailed introduction to Webpacker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why does Webpacker exist?&lt;/p&gt;

&lt;p&gt;First, Webpacker helps make Webpack &lt;em&gt;Rails-friendly&lt;/em&gt;. Webpack is powerful tool built to be extremely flexible. As a consequence, it is fairly complex to configure from scratch making it somewhat of an odd choice for Rails, which promotes &lt;em&gt;convention over configuration&lt;/em&gt;. Webpacker fills the gap. The gem introduces some conventions and abstracts away a default configuration to make it easier to get up-and-running with, for example, out-of-the-box ES6 syntax support through integration with &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, Webpacker helps form the bridge between the Webpack build and the Rails application. Rails needs to be able to render &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags for Webpack assets in views. Webpacker provides helpers, including &lt;code&gt;javascript_pack_tag&lt;/code&gt;, for this purpose.&lt;/p&gt;

&lt;p&gt;By Webpacker convention, Webpack will build JavaScript from source files located in &lt;code&gt;app/javascript&lt;/code&gt; (a new addition to the traditional Rails directory structure) and from &lt;code&gt;node_modules&lt;/code&gt; installed via &lt;code&gt;yarn&lt;/code&gt;. To determine what dependencies to build, Webpack is configured by Webpacker to treat each file in &lt;code&gt;app/javascript/packs&lt;/code&gt; as a separate &lt;a href="https://webpack.js.org/concepts/#entry"&gt;entry&lt;/a&gt; point. Entries in Webpack are analogous to JavaScript assets configured for Sprockets compilation via &lt;code&gt;Rails.configuration.assets.precompile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For deployment, the precompile task, &lt;code&gt;rake assets:precompile&lt;/code&gt;, runs both Sprockets and Webpack build steps. By default, each Webpack entry will correspond to an output file that will be compiled to the &lt;code&gt;public/packs&lt;/code&gt; directory in production, analogous to the &lt;code&gt;public/assets&lt;/code&gt; directory for Sprockets builds. Webpack generates a &lt;code&gt;manifest.json&lt;/code&gt; in &lt;code&gt;public/packs&lt;/code&gt; that maps asset names to their locations. Rails will read the manifest to determine the urls for Webpack assets.&lt;/p&gt;

&lt;p&gt;In development, there is the option to run the Webpack dev server alongside the Rails server. The benefit is the Webpack dev server will listen for JavaScript source file changes, recompile, and reload the browser automatically. To help make setup easier, Webpacker inserts a Rails middleware in development to proxy Webpack asset requests to the dev server.&lt;/p&gt;

      &lt;h2 id="making-a-plan" class="title"&gt;
        &lt;a name="making-a-plan" class="anchor" href="#making-a-plan"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Making a plan
      &lt;/h2&gt;
    
&lt;p&gt;The key feature of Webpacker critical to our decision to making the switch is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Webpacker allows Webpack and Sprockets to be used side-by-side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ability to compile &lt;code&gt;some_module.js&lt;/code&gt; via Webpack and &lt;code&gt;another_module.js&lt;/code&gt; via Sprockets allowed us to move dependencies over to Webpack gradually, in small changesets. With any upgrade, our primary goal is &lt;em&gt;Don&amp;#39;t break the site.&lt;/em&gt; and the incremental adoption of Webpack allowed us to more easily address issues through our continuous integration and QA process.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a high level overview of how we broke down the move to Webpack from Sprockets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Prep phase&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add Webpacker and setup dependencies in development and remote servers (upgrade &lt;code&gt;node.js&lt;/code&gt;, install &lt;code&gt;yarn&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Deploy a small Webpack bundle (with no critical code) to iron out deployment concerns, including Nginx and capistrano configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Migration phase&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move our third-party dependencies from Rails asset gems to NPM packages via Webpack&lt;/li&gt;
&lt;li&gt;Move our application code to Webpack&lt;/li&gt;
&lt;li&gt;Modify Webpack configuration as needed to support new dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Cleanup phase&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove Rails assets gems and redundant Sprockets configuration&lt;/li&gt;
&lt;li&gt;Optimize our Webpack bundles&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our gradual approach to the migration had its downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We needed to figure out how to reference modules across two scopes&lt;/li&gt;
&lt;li&gt;We had a large suite of JavaScript unit tests to support in two separate testing environments&lt;/li&gt;
&lt;li&gt;We assumed global variables our in Sprockets-based JavaScript, so any module bundled by Webpack would need to be exposed to the global scope somehow&lt;/li&gt;
&lt;li&gt;We had a learning curve with Webpack such that simply moving a dependency from a Sprockets bundle to a Webpack bundle was not always straightforward&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Supporting both Sprockets or Webpack while we rolled out incremental changes required more effort and time. Given the rapid development cycle of Webpacker, Webpack, and its various plugins and utilities, we were continually upgrading and smoothing wrinkles throughout the process. Ultimately, this approach worked for us as it allowed time to wade into the Webpack waters while adopting new conventions along the way.&lt;/p&gt;

      &lt;h2 id="setting-up-webpack-entries" class="title"&gt;
        &lt;a name="setting-up-webpack-entries" class="anchor" href="#setting-up-webpack-entries"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Setting up Webpack entries
      &lt;/h2&gt;
    
&lt;p&gt;Our team traditionally has compiled two Sprockets bundles for the browser: let&amp;#39;s call them &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt;. The &lt;code&gt;vendor&lt;/code&gt; bundle is for our main bundle third party, infrequently changing libraries like &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;knockout.js&lt;/code&gt;, and &lt;code&gt;lodash&lt;/code&gt;. The &lt;code&gt;application&lt;/code&gt; bundle, which changes more often, is for smaller third party plugins and our application code.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an overview of what that looked like in our codebase:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/assets/javascript
|-- vendor.js
|-- application.js
|-- some_module.js
|-- another_module.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We rendered script tags for the vendor and application bundle respectively in the Rails application layout.&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- application.html.erb --&amp;gt;

&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- ... --&amp;gt;

        &amp;lt;%= javascript_include_tag &amp;#39;vendor&amp;#39; %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;#39;application&amp;#39; %&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To move dependencies to Webpack, we first created counterpart &amp;quot;packs&amp;quot; for &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Webpacker convention: each file in the packs directory serves as a separate entry point in Webpack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/assets/javascript
|-- vendor.js
|-- application.js
|-- another_module.js
|-- some_module.js
app/javascript
|-- packs
    |-- vendor.js
    |-- application.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We added script tags to the application layout using the helper provided by Webpacker &lt;code&gt;javascript_pack_tag&lt;/code&gt; to render Webpack bundles.&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- application.html.erb --&amp;gt;

&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- ... --&amp;gt;
        &amp;lt;%= javascript_pack_tag &amp;#39;vendor&amp;#39; %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;#39;vendor&amp;#39; %&amp;gt;

        &amp;lt;%= javascript_pack_tag &amp;#39;application&amp;#39; %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;#39;application&amp;#39; %&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea was that we could port dependencies from &lt;code&gt;app/assets/javascripts&lt;/code&gt; to &lt;code&gt;app/javascript&lt;/code&gt; one-by-one. So, we&amp;#39;d move &lt;code&gt;some_module.js&lt;/code&gt; from &lt;code&gt;app/assets/javascripts&lt;/code&gt; to &lt;code&gt;app/javascript&lt;/code&gt;, update its syntax to ES6.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/assets/javascript
|-- vendor.js
|-- application.js
|-- another_module.js
app/javascript
|-- some_module.js
|-- packs
    |-- vendor.js
    |-- application.js
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="maintaining-backwards-compatibility" class="title"&gt;
        &lt;a name="maintaining-backwards-compatibility" class="anchor" href="#maintaining-backwards-compatibility"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Maintaining backwards compatibility
      &lt;/h2&gt;
    
&lt;p&gt;As we moved libraries and individual components from the asset pipeline to Webpack, we needed to maintain backwards compatibility with our legacy JavaScript—-the un-migrated portion of our codebase.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, our legacy JavaScript relied heavily on the global scope. We have references to jQuery, lodash, knockout littered throughout our compiled code, Rails views, and Knockout templates. To minimize the risk in this migration, we weren&amp;#39;t going to change that.&lt;/p&gt;

&lt;p&gt;But why was this an issue?&lt;/p&gt;

&lt;p&gt;It helps to understand that Sprockets and Webpack are two completely different paradigms of bundling JavaScript for the browser. The differences get to the heart of &lt;a href="https://what-problem-does-it-solve.com/webpack/intro.html#what-problem-does-webpack-solve"&gt;how Webpack works&lt;/a&gt;. Instead of concatenating all your JavaScript into the global scope, as Sprockets does, Webpack provides a runtime that compartmentalizes each JavaScript module into separate scopes via closures so that access between modules must be declared via imports. By default, none of these modules are exposed to the global scope.&lt;/p&gt;

&lt;aside class="callout panel"&gt;
&lt;h3&gt;What problem does Webpack solve?&lt;/h3&gt;
&lt;p&gt;
For more background on this topic, checkout &lt;a href="https://twitter.com/davetron5000"&gt;David Copeland's&lt;/a&gt; recent book, &lt;a href="https://what-problem-does-it-solve.com/webpack/intro.html"&gt;Webpack from Nothing&lt;/a&gt;. It may also help to understand the code that Webpack generates to form the runtime, which &lt;a href="https://twitter.com/seanlandsman"&gt;Sean Landsman&lt;/a&gt; nicely explains in &lt;a href="https://www.ag-grid.com/ag-grid-understanding-webpack/"&gt;Understanding How Webpack Works&lt;/a&gt;.
&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;We decided, as a policy. we did not want our Webpack modules to depend on global variables. This meant we would have no references to Sprockets-compiled code in our Webpack pipeline. Therefore, to migrate an individual file, &lt;code&gt;some_module.js&lt;/code&gt;, we needed to answer two questions first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can we import all third party dependencies of &lt;code&gt;some_module.js&lt;/code&gt; from Webpack?&lt;/li&gt;
&lt;li&gt;can we import all application dependencies of &lt;code&gt;some_module.js&lt;/code&gt; from Webpack?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In reality, we had to compromise in some cases. While most of our third party JavaScript could be moved to &lt;code&gt;node_modules&lt;/code&gt;, we also relied on a number of vendor JavaScript APIs loaded via script tags in the browser. For example, since we don&amp;#39;t compile our Google Analytics script via Webpack and instead load this script from Google&amp;#39;s servers, we left global references to &lt;code&gt;window.ga&lt;/code&gt; in our codebase.&lt;/p&gt;

      &lt;h2 id="migrating-a-javascript-module" class="title"&gt;
        &lt;a name="migrating-a-javascript-module" class="anchor" href="#migrating-a-javascript-module"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Migrating a Javascript Module
      &lt;/h2&gt;
    
&lt;p&gt;Our legacy JavaScript application consistently followed a pattern of defining and accessing properties on a global JavaScript object: &lt;code&gt;window.App&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/assets/javascripts/some_module.js

App = App || {};

App.SomeModule = (function() {
  someMethod: function() {
    var timestamp = moment();
    return App.AnotherModule.method(timestamp);
  }
}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we moved them over to Webpack, the new version of the file above might look like the example below as we converted to ES6 syntax and replaced global references with imports:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/some_module.js

import moment from &amp;#39;moment&amp;#39;;
import AnotherModule from &amp;#39;./another_module&amp;#39;;

const SomeModule = {
  someMethod() {
    const timestamp = moment();
    return AnotherModule.method(timestamp);
  }
};

export default SomeModule;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;#39;s a problem though. Once &lt;code&gt;SomeModule&lt;/code&gt; moved to Webpack, it was no longer available in the global scope as a property of &lt;code&gt;App&lt;/code&gt;. References to &lt;code&gt;App.SomeModule&lt;/code&gt; in Sprockets would be &lt;code&gt;undefined&lt;/code&gt;. To maintain backwards compatibility, we had to find a way to make &lt;code&gt;SomeModule&lt;/code&gt; available in both Webpack and Sprockets.&lt;/p&gt;

&lt;p&gt;Practically, this meant &lt;code&gt;SomeModule&lt;/code&gt; could be available both as an import in Webpack...&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import SomeModule from &amp;#39;../some_module&amp;#39;;

SomeModule.someMethod();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;...and in the global scope as a property the global &lt;code&gt;App&lt;/code&gt; instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;App.SomeModule.someMethod();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, we wanted to have our ES6 module cake and eat it too. Luckily, Webpack provides a mechanism to do this.&lt;/p&gt;

&lt;aside class="callout panel"&gt;
&lt;h3&gt;Guest appearance by TSort&lt;/h3&gt;
&lt;p&gt;
To ensure we selected modules to migrate in the right order, we wrote a short script using &lt;a href="https://ruby-doc.org/stdlib-2.3.0/libdoc/tsort/rdoc/TSort.html"&gt;Ruby's &lt;code&gt;TSort&lt;/code&gt; module&lt;/a&gt;. &lt;code&gt;TSort&lt;/code&gt; is for topological sorting, which is to say, given a list of dependencies, sort them in a valid order such that all the dependencies of a given item are satisfied before processing that item. I'll go into more detail about how we did this in another post.
&lt;/p&gt;
&lt;/aside&gt;

      &lt;h2 id="exporting-from-webpack" class="title"&gt;
        &lt;a name="exporting-from-webpack" class="anchor" href="#exporting-from-webpack"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Exporting from Webpack
      &lt;/h2&gt;
    
&lt;p&gt;Webpack provides for a use case that met our needs: that of library authors. This entails &lt;a href="https://webpack.js.org/configuration/output/#output-library"&gt;configuring the Webpack output to export a variable&lt;/a&gt; to its receiving scope�—in our case, the browser &lt;code&gt;window&lt;/code&gt;. That meant we would package our Webpack modules into a library for our Sprockets code!&lt;/p&gt;

&lt;p&gt;To do this, we modified our Webpack config:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/shared.js

output: {
  // Makes exports from entry packs available to global scope, e.g.
  library: [&amp;#39;Packs&amp;#39;, &amp;#39;[name]&amp;#39;],
  libraryTarget: &amp;#39;var&amp;#39;
},

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above configuration, Webpack will export a module called &lt;code&gt;Packs&lt;/code&gt; to the global scope. The &lt;code&gt;Packs&lt;/code&gt; variable will have a property corresponding to each &lt;code&gt;entry&lt;/code&gt; by name. In our case, this means Webpack exports a &lt;code&gt;Packs.vendor&lt;/code&gt; and &lt;code&gt;Packs.application&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;To add modules to the library, we export them from our entry files. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

export { default as SomeModule } from &amp;#39;./some_module`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Webpack would then make &lt;code&gt;SomeModule&lt;/code&gt; a property of the &lt;code&gt;Packs.application&lt;/code&gt; module, i.e., &lt;code&gt;Packs.application.SomeModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;Packs&lt;/code&gt; variable gets exported to the global scope. We added some glue code to merge our &lt;code&gt;Packs&lt;/code&gt; modules into the &lt;code&gt;App&lt;/code&gt; namespace as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/assets/javascripts/application.js

App = App || {};
_.assign(App, Packs.application);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Now, we&amp;#39;d be able to use our Webpack-compiled module as &lt;code&gt;App.SomeModule&lt;/code&gt; in Sprockets without making any other changes to our legacy JavaScript.&lt;/p&gt;

      &lt;h2 id="resolving-application-modules" class="title"&gt;
        &lt;a name="resolving-application-modules" class="anchor" href="#resolving-application-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Resolving application modules
      &lt;/h2&gt;
    
&lt;p&gt;As a convenience, we learned to resolve modules in our application as &lt;code&gt;import &amp;#39;some_module&amp;#39;&lt;/code&gt; instead of via relative paths like &lt;code&gt;import &amp;#39;../some_module&lt;/code&gt;. To do this, we set up an alias in &lt;code&gt;.babelrc&lt;/code&gt;. Webpacker installs &lt;code&gt;.babelrc&lt;/code&gt; as a separate configuration file for Babel. We added the &lt;code&gt;babel-plugin-module-resolver&lt;/code&gt; and updated the relevant section in our &lt;code&gt;.babelrc&lt;/code&gt; in the plugins section:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// .babelrc

{
  // ...
  &amp;quot;plugins&amp;quot;: [
    // ...
    [&amp;quot;module-resolver&amp;quot;, { &amp;quot;root&amp;quot;: [&amp;quot;./app/javascript&amp;quot;], &amp;quot;alias&amp;quot;: {} }]
  ],
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="extending-the-webpack-configuration" class="title"&gt;
        &lt;a name="extending-the-webpack-configuration" class="anchor" href="#extending-the-webpack-configuration"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Extending the Webpack configuration
      &lt;/h2&gt;
    
&lt;p&gt;Though Webpacker&amp;#39;s default configuration made it easy to get started, we soon ran into the need to modify it to fit our needs. The configuration is extracted away in the &lt;code&gt;@rails/webpacker&lt;/code&gt; NPM package, so we often revisit the source and debug it in the node REPL.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ NODE_ENV=development node
&amp;gt; let config = require(&amp;#39;./config/webpack/development&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a shared file in the &lt;code&gt;config/webpack&lt;/code&gt; directory that imports the Webpack configuration through its API and exports the modified config object for the enviornment-specific config files to consume.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// config/webpack/environment.js

const {environment} = require(&amp;#39;@rails/webpacker&amp;#39;);
module.exports = environment;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// config/webpack/shared.js

const merge = require(&amp;#39;webpack-merge&amp;#39;);
const environment = require(&amp;#39;./environment&amp;#39;);

// make changes
environment.loaders.set(&amp;#39;ChosenJSLoader&amp;#39;, {
    test: require.resolve(&amp;quot;chosen-js&amp;quot;),
    use: [&amp;quot;script-loader&amp;quot;],
  },
);

environment.plugins.set(&amp;#39;CommonsChunkPlugin&amp;#39;
    new webpack.optimize.CommonsChunkPlugin({ options });

const config = environment.toWebpackConfig();

const additionalConfig = {
  // stuff to add
};

module.exports = merge(config, additionalConfig);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// config/webpack/development.js

module.exports = require(&amp;#39;./shared&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Webpacker docs also provide &lt;a href="https://github.com/rails/webpacker/blob/05bf821ce983a2ad88fba0da476023e67f8efe43/docs/webpack.md#configuration"&gt;some helpful tips&lt;/a&gt; on how to extend the default configuration.&lt;/p&gt;

      &lt;h2 id="importing-libraries-and-global-scope" class="title"&gt;
        &lt;a name="importing-libraries-and-global-scope" class="anchor" href="#importing-libraries-and-global-scope"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Importing libraries and global scope
      &lt;/h2&gt;
    
&lt;p&gt;Though Webpack tries hard to encourage you to avoid exporting your dependencies to the global scope. Recall this wasn&amp;#39;t an option for us.&lt;/p&gt;

&lt;p&gt;To make our third party JavaScript libraries, like jQuery and knockout, available in the global scope, we added special &lt;a href="https://webpack.js.org/concepts/loaders/"&gt;loader&lt;/a&gt; to the Webpack pipeline. A Webpack loader generally describes a type of transformation for a given file type. For example, &lt;a href="https://github.com/rails/webpacker/blob/b2d899b25fb9f1cb11426b1b5e2d699c680bdcf6/package/loaders/babel.js"&gt;Babel integrates with Webpack via a loader&lt;/a&gt; in Webpacker to transform any JavaScript file from ES6 to ES5 syntax.&lt;/p&gt;

&lt;p&gt;One way to instruct Webpack to expose variables exported by a given library to the global scope is via the official &lt;a href="https://github.com/webpack-contrib/expose-loader"&gt;&lt;code&gt;expose-loader&lt;/code&gt;&lt;/a&gt;. To use this loader, we updated the default Webpack config provided by Webpacker to ensure that our Webpack-compiled &lt;code&gt;jQuery&lt;/code&gt; package is made available in the global scope for our legacy JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/shared.js

module: {
  rules: [
   {
      test: require.resolve(&amp;#39;jquery&amp;#39;),
      use: [{
        loader: &amp;#39;expose-loader&amp;#39;,
        options: &amp;#39;$&amp;#39;,
      }, {
        loader: &amp;#39;expose-loader&amp;#39;,
        options: &amp;#39;jQuery&amp;#39;,
      }],
    },

    // ... other custom loader rules
  ],
},

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have similar &lt;code&gt;expose-loader&lt;/code&gt; rules for each of our commonly-used libraries such as &lt;code&gt;knockout&lt;/code&gt; and &lt;code&gt;lodash&lt;/code&gt;.&lt;/p&gt;

      &lt;h2 id="discovering-webpack-chunks" class="title"&gt;
        &lt;a name="discovering-webpack-chunks" class="anchor" href="#discovering-webpack-chunks"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Discovering Webpack chunks
      &lt;/h2&gt;
    
&lt;p&gt;However, after adding &lt;code&gt;expose-loader&lt;/code&gt; for jQuery, not everything worked as we expected in the early going.&lt;/p&gt;

&lt;p&gt;Consider the following where we import jQuery in &lt;code&gt;vendor.js&lt;/code&gt;. Then we&amp;#39;ve added the &lt;code&gt;chosen-js&lt;/code&gt; package and import it in &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/vendor.js

import &amp;#39;jquery&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;chosen-js&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can show that this works on the Dev Tools console:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&amp;gt; typeof $.fn.chosen
&amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we installed another jQuery plugin, like &lt;code&gt;slick-carousel&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/vendor.js

import &amp;#39;jquery&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;chosen-js&amp;#39;;
import &amp;#39;slick-carousel&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the Dev Tools console, we can test for the new plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&amp;gt; typeof $.fn.slick
&amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But something happened. The &lt;code&gt;chosen&lt;/code&gt; plugin is missing:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&amp;gt; typeof $.fn.chosen
&amp;quot;undefined&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not expected! Clearly, there are some side effects from importing these packages in Webpack. Turns out, there were a couple issues here converging at once.&lt;/p&gt;

&lt;p&gt;At this point, it would help to visualize what&amp;#39;s happening in our Webpack bundles. We can do this in development with &lt;a href="https://github.com/robertknight/webpack-bundle-size-analyzer"&gt;&lt;code&gt;webpack-bundler-analyzer&lt;/code&gt;&lt;/a&gt;. Adding this plugin to our Webpack config produces a separate local webserver that graphs the packages used in each bundle.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the analyzer produced before we added &lt;code&gt;slick-carousel&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack-bundle-analyzer-one-jquery-73ee3547.png" alt="Webpack bundle analyzer one jquery" /&gt;&lt;/p&gt;

&lt;p&gt;And after we added &lt;code&gt;slick-carousel&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack-bundle-analyzer-two-jquerys-b74a1ea8.png" alt="Webpack bundle analyzer two jquerys" /&gt;&lt;/p&gt;

&lt;p&gt;Two jQuerys! (You may have noticed some other modules are duplicated as well.)&lt;/p&gt;

&lt;p&gt;It turns out that &lt;code&gt;slick-carousel&lt;/code&gt; employs a common pattern in modern JavaScript packages to detect the presence of a JavaScript module loader API, such as Asynchronous Module Definition (AMD) or CommonJS. The pattern looks something like this, &lt;a href="https://github.com/kenwheeler/slick/blob/ee7d37faeb92c4619ffeefeba2cc4c733f39b1b3/slick/slick.js#L18"&gt;excerpted from the &lt;code&gt;slick-carousel&lt;/code&gt; source&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;;(function(factory) {
    &amp;#39;use strict&amp;#39;;
    if (typeof define === &amp;#39;function&amp;#39; &amp;amp;&amp;amp; define.amd) {
        define([&amp;#39;jquery&amp;#39;], factory);
    } else if (typeof exports !== &amp;#39;undefined&amp;#39;) {
        module.exports = factory(require(&amp;#39;jquery&amp;#39;));
    } else {
        factory(jQuery);
    }

}(function($) {
  // library code
  // ...
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Webpack recognizes both AMD &lt;code&gt;define&lt;/code&gt; and CommonJs style &lt;code&gt;require&lt;/code&gt; to resolve modules. Since &lt;code&gt;slick-carousel&lt;/code&gt; imports &lt;code&gt;jQuery&lt;/code&gt;, as seen in the except above, it&amp;#39;s now included in the &lt;code&gt;application.js&lt;/code&gt; bundle. Webpack knows nothing about how we&amp;#39;re including both &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt; in the same HTML page, so it happily includes &lt;code&gt;jQuery&lt;/code&gt; in both bundles—exactly as it&amp;#39;s been instructed to do.&lt;/p&gt;

&lt;p&gt;Ok, but why didn&amp;#39;t we see two jQuerys when we included &lt;code&gt;chosen-js&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The reason is that the Chosen jQuery plugin only works with browser globals, as described by &lt;a href="https://github.com/harvesthq/chosen/issues/2215"&gt;this issue on the chosen-js GitHub repository&lt;/a&gt;. It doesn&amp;#39;t use a module loader pattern, so if we hadn&amp;#39;t exported &lt;code&gt;jQuery&lt;/code&gt; to global scope in the first place, it wouldn&amp;#39;t have worked at all. In that case, we would have followed &lt;a href="http://reactkungfu.com/2015/10/integrating-jquery-chosen-with-webpack-using-imports-loader/"&gt;this post that describes how to integrate Chosen with Webpack using the &lt;code&gt;imports-loader&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When we import &lt;code&gt;chosen-js&lt;/code&gt; in the &lt;code&gt;application.js&lt;/code&gt; bundle, it attaches itself to the global &lt;code&gt;jQuery&lt;/code&gt; instance we imported in &lt;code&gt;vendor.js&lt;/code&gt;. When we then import &lt;code&gt;slick-carousel&lt;/code&gt;, it subsequently imports &lt;code&gt;jQuery&lt;/code&gt; again, which is represented by a separate &amp;quot;chunk&amp;quot; in Webpack. This new instance of &lt;code&gt;jQuery&lt;/code&gt; clobbers the original instance in the global. Since the original instance is the one to which the Chosen plugin attached itself, no &lt;code&gt;$.fn.chosen&lt;/code&gt; function appears in the browser.&lt;/p&gt;

&lt;p&gt;Luckily, you don&amp;#39;t have to resort to global variables just to use Chosen or most other packages that fail to employ the module loader pattern. In most cases, there&amp;#39;s a loader (or plugin) for that! The Webpack documentation devotes an entire &lt;a href="https://webpack.js.org/guides/shimming/"&gt;guide to shimming modules&lt;/a&gt; that&amp;#39;s worth your time.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re not able to shim a module, you can always resort to the &lt;a href="https://webpack.js.org/loaders/script-loader/"&gt;&lt;code&gt;script-loader&lt;/code&gt;&lt;/a&gt;, which will evaluate the module in the global context. The main takeaway here is you may have to roll up your sleeves and dig into the source of your dependencies to understand whether they&amp;#39;ll work in the Webpack context and/or whether you&amp;#39;ll need to integrate with a loader or plugin.&lt;/p&gt;

&lt;p&gt;Through our debugging sessions we came to learn a good lesson the hard way:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Importing a new Webpack dependency may have side effects you did not anticipate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To avoid any misunderstanding about the affects of adding new dependencies to Wepback, it helps to have a visual model of the Webpack &amp;quot;chunks&amp;quot;. The &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; is a good place to start.&lt;/p&gt;

      &lt;h2 id="extracting-common-chunks" class="title"&gt;
        &lt;a name="extracting-common-chunks" class="anchor" href="#extracting-common-chunks"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Extracting common chunks
      &lt;/h2&gt;
    
&lt;p&gt;We fixed the &amp;quot;two jQuerys&amp;quot; problem with some additional Webpack configuration. We essentially have to instruct Webpack to pull jQuery (or just about any module) into only one bundle.&lt;/p&gt;

&lt;p&gt;Two promising strategies of note include use of community supported Webpack plugins. One of these is the &lt;a href="https://webpack.js.org/plugins/dll-plugin/"&gt;&lt;code&gt;DllPlugin&lt;/code&gt;&lt;/a&gt;, which is a powerful way to split bundles and drastically improve build performance. It&amp;#39;s also a bit more complex to setup and requires an extra build step.&lt;/p&gt;

&lt;p&gt;We decided to use the &lt;a href="https://webpack.js.org/plugins/commons-chunk-plugin/"&gt;CommonsChunkPlugin&lt;/a&gt; instead as this was bit easier to setup in Webpacker. (If you&amp;#39;re interested in setting up the DllPlugin with Webpacker, &lt;a href="https://github.com/rails/webpacker/issues/702"&gt;check out this thread on GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To ensure jQuery and any other package from &lt;code&gt;node_modules&lt;/code&gt; ends up in the &lt;code&gt;vendor.js&lt;/code&gt; bundle only, we add something like this to our Webpack plugins configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;new webpack.optimize.CommonsChunkPlugin({
  name: &amp;#39;vendor&amp;#39;,
  chunks: [&amp;#39;vendor&amp;#39;, &amp;#39;application&amp;#39;],
  minChunks(module) {
    return module.context &amp;amp;&amp;amp; module.context.indexOf(&amp;#39;node_modules&amp;#39;) &amp;gt;= 0;
  },
}),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This basic config basically says, take any &amp;quot;chunk&amp;quot; (effectively, a module) that is loaded from &lt;code&gt;node_modules&lt;/code&gt; and occurs in both &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt;, and extract it only to &lt;code&gt;vendor.js&lt;/code&gt; in a way that can be shared by both modules. Rebuilding with this setup fixed our jQuery plugin issue (among other side effects of clobbering global variables).&lt;/p&gt;

      &lt;h2 id="adding-predictable-long-term-caching" class="title"&gt;
        &lt;a name="adding-predictable-long-term-caching" class="anchor" href="#adding-predictable-long-term-caching"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Adding predictable long term caching
      &lt;/h2&gt;
    
&lt;p&gt;We learned though that we had a problem with our initial &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Without prior knowledge of how Webpack works, one might expect that making a change only to a module imported by &lt;code&gt;application.js&lt;/code&gt; would only affect only the application bundle output during a deploy. While using the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; configuration as shown in the previous section this is, in fact, not the case.&lt;/p&gt;

&lt;p&gt;To demonstrate, let&amp;#39;s say all we did was import jQuery in our vendor bundle and &lt;code&gt;./some_module&lt;/code&gt; in our application bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/vendor.js

import &amp;#39;jquery&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import SomeModule from &amp;#39;../some_module&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#39;s the output of the Webpack build, using the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; setup as described in the previous section:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ bin/webpack
Hash: 6331dfce0c27b4723c58
Version: webpack 3.8.1
Time: 779ms
                              Asset       Size  Chunks                    Chunk Names
application-5b435b20467ae799d8e6.js    3.42 kB       0  [emitted]         application
     vendor-282477ba5e90974e92cb.js     789 kB       1  [emitted]  [big]  vendor
                      manifest.json  124 bytes          [emitted]
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the digest of the application and vendor bundles under &amp;quot;Asset&amp;quot;: &lt;code&gt;application-5b435b20467ae799d8e6.js&lt;/code&gt; and &lt;code&gt;vendor-282477ba5e90974e92cb.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s make only a change to &lt;code&gt;application.js&lt;/code&gt; as below. &lt;code&gt;AnotherModule&lt;/code&gt; brings in no new dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import SomeModule from &amp;#39;../some_module&amp;#39;;
import AnotherModule from &amp;#39;../another_module&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rebuilding now, we might expect only the digest for &lt;code&gt;application.js&lt;/code&gt; would change:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ bin/webpack
Hash: 7a033d5c3c2dffec095b
Version: webpack 3.8.1
Time: 758ms
                              Asset       Size  Chunks                    Chunk Names
application-80aab62cb2b8b0bfd6f3.js     4.5 kB       0  [emitted]         application
     vendor-a5762b269bc7170f5a51.js     789 kB       1  [emitted]  [big]  vendor
                      manifest.json  124 bytes          [emitted]
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, you&amp;#39;ll notice both the application and vendor digests changed. Again, not expected!&lt;/p&gt;

&lt;p&gt;The root problem (and solution) gets into the real meat of how Webpack works under the hood. First, here is &lt;a href="https://www.ag-grid.com/ag-grid-understanding-webpack/"&gt;an article that has helped us better understand how Webpack works&lt;/a&gt; including its use of module ids to link modules in the Webpack runtime.&lt;/p&gt;

&lt;p&gt;Building on that primer, we followed the steps outlined in this &lt;a href="https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31"&gt;great article on predictable long term caching&lt;/a&gt; to ensure Webpack generates the same fingerprinted output for our infrequently changing vendor bundle.&lt;/p&gt;

      &lt;h2 id="third-party-stylesheets-images-and-fonts" class="title"&gt;
        &lt;a name="third-party-stylesheets-images-and-fonts" class="anchor" href="#third-party-stylesheets-images-and-fonts"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Third-party stylesheets, images, and fonts
      &lt;/h2&gt;
    
&lt;p&gt;Since we decided to leave stylesheets, images, and fonts in &lt;code&gt;app/assets&lt;/code&gt; &lt;em&gt;under Sprockets compilation&lt;/em&gt;, we needed to make Sprockets aware of asset sources we we now installing as NPM modules.&lt;/p&gt;

&lt;p&gt;In most cases, we&amp;#39;d replace the corresponding Rails asset gem and add the appropriate &lt;code&gt;node_modules&lt;/code&gt; directory to the Sprockets load path. For example, for &lt;code&gt;foundation&lt;/code&gt;, here&amp;#39;s how we did it:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# Gemfile

- gem &amp;quot;foundation-rails&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// package.json

&amp;quot;dependencies&amp;quot;: {
   // ...
+ &amp;quot;foundation-sites&amp;quot;: &amp;quot;~6.3.0&amp;quot;,
   // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/initializers/assets.rb

+ Rails.application.config.assets.paths &amp;lt;&amp;lt; Rails.root.join(&amp;quot;node_modules&amp;quot;, &amp;quot;foundation-sites&amp;quot;, &amp;quot;scss&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, Webpack can bundle stylesheets as well and we&amp;#39;ll likely investigate
this on a future iteration when we&amp;#39;re ready to remove Sprockets entirely.&lt;/p&gt;

      &lt;h2 id="deploying-with-capistrano-and-nginx" class="title"&gt;
        &lt;a name="deploying-with-capistrano-and-nginx" class="anchor" href="#deploying-with-capistrano-and-nginx"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Deploying with Capistrano and Nginx
      &lt;/h2&gt;
    
&lt;p&gt;We use Capistrano to deploy our Rails application. The &lt;code&gt;capistrano/rails&lt;/code&gt; plugin adds some deployment configuration for the Rails asset pipeline, but we needed to make some changes to support Webpack properly.&lt;/p&gt;

&lt;p&gt;Webpack compilation happens automatically with each deploy because Webpacker hooks into the &lt;code&gt;rake assets:precompile&lt;/code&gt; task. This task relies on a Webpacker binstub, &lt;code&gt;bin/webpack&lt;/code&gt;, which needs to be checked into version control.&lt;/p&gt;

&lt;p&gt;We also needed to set &lt;code&gt;public/packs&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; as shared directories to ensure Webpack build output and NPM package installation via &lt;code&gt;yarn&lt;/code&gt; are shared across deploys.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/deploy.rb

set :linked_dirs, fetch(:linked_dirs, []).push(&amp;#39;public/packs&amp;#39;, &amp;#39;node_modules&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also helps to be aware of that Webpacker uses the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable to select the right Webpack configuration. If &lt;code&gt;NODE_ENV&lt;/code&gt; is not set, it will infer its value from &lt;code&gt;RAILS_ENV&lt;/code&gt;. We also have a staging environment where we use the environment variable &lt;code&gt;RAILS_ENV=staging&lt;/code&gt;. Our initial Webpack deploy to staging failed because we did not have a Webpack config for staging. Since our Webpack configuration for staging would be identical to production, we simply set &lt;code&gt;NODE_ENV=production&lt;/code&gt; on our staging environments:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/deploy.rb

set :default_env, { &amp;#39;NODE_ENV&amp;#39; =&amp;gt; &amp;#39;production&amp;#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, since we use Nginx as a reverse proxy to our Rails application, we want to be sure the proper HTTP response headers are added for anything Webpack compiles to &lt;code&gt;public/packs&lt;/code&gt; to improve cacheability. So we added &amp;quot;packs&amp;quot; to our Nginx location block for assets, similar to below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="nginx"&gt;server {
  listen 443;
  server_name example.com;
  root /path/to/application/current/public;

  location ^~ /assets|packs/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  # ...
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="unit-testing-with-karma" class="title"&gt;
        &lt;a name="unit-testing-with-karma" class="anchor" href="#unit-testing-with-karma"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Unit Testing with Karma
      &lt;/h2&gt;
    
&lt;p&gt;For unit testing our JavaScript with the Rails asset pipeline, we used &lt;a href="https://github.com/searls/jasmine-rails"&gt;jasmine-rails&lt;/a&gt;. That gem has allowed us to run JS unit tests either in the browser or on the command line. Given its tight coupling to the Rails asset pipeline, we would also have to replace our test runner. After trying out a few options, we liked the features of &lt;a href="https://karma-runner.github.io/1.0/index.html"&gt;Karma&lt;/a&gt; and that a) it was easy to setup with Webpack, and b) supports the Jasmine assertion syntax. That meant we could port our existing tests to Karma + Webpack with minimal changes.&lt;/p&gt;

&lt;p&gt;There are plenty of tutorials and tips out there for Karma + Webpack, including &lt;a href="https://github.com/rails/webpacker/blob/master/docs/testing.md#karma-setup-for-typescript"&gt;Karma setup instructions in the Webpacker docs&lt;/a&gt;. Here&amp;#39;s a brief overview of what we did:&lt;/p&gt;

&lt;p&gt;First we added several packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;yarn add --dev karma karma-cli karma-sourcemap-loader karma-webpack karma-jasmine karma-chrome-launcher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make Karma work with our Webpacker setup, we started with the default &lt;code&gt;karma.config.js&lt;/code&gt; configuration file and made some modifications as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// karma.conf.js

// Require our Webpack test configuration
const webpackConfig = require(&amp;#39;./config/webpack/test.js&amp;#39;);

// Remove the plugins to workaround for several issues
// https://github.com/webpack-contrib/karma-webpack/issues/22
// https://github.com/rails/webpacker/issues/435
const {assign} = require(&amp;#39;lodash&amp;#39;);
assign(webpackConfig, { plugins: [] });

module.exports = function(config) {
  config.set({
    frameworks: [&amp;#39;jasmine&amp;#39;],

    // list of files / patterns to load in the browser
    files: [
      { pattern: &amp;#39;spec/javascript/**/*.js&amp;#39;, watched: false },
    ],

    // preprocess matching files before serving them to the browser
    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {
      &amp;#39;spec/javascript/**/*.js&amp;#39;: [&amp;#39;webpack&amp;#39;, &amp;#39;sourcemap&amp;#39;],
    },

    // For karma-webpack extension
    webpack: webpackConfig,
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We ran into few problems using Karma with certain Webpack plugins, including &lt;a href="https://github.com/webpack-contrib/karma-webpack/issues/22"&gt;this issue&lt;/a&gt; with &lt;code&gt;karma-webpack&lt;/code&gt; plus the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; and &lt;a href="https://github.com/rails/webpacker/issues/435"&gt;this issue&lt;/a&gt; with Webpacker&amp;#39;s use of the &lt;code&gt;ManifestPlugin&lt;/code&gt;. Turns out, to run unit tests in the Karma context, our Webpack plugins are irrelevant, so we&amp;#39;ve opted to remove them altogether in the Karma configuration for now. The downside is that our unit testing setup does not exercise our Webpack plugin configuration, but any issue there would be caught by our integration testing workflow.&lt;/p&gt;

&lt;p&gt;Another problem we needed to solve was to keep our legacy specs in jasmine-rails passing during the transition. As soon as we moved our first critical dependency from the asset pipeline to Webpack, all of our jasmine-rails specs broke. This is because jasmine-rails assumes you&amp;#39;re just using Sprockets and knows nothing about our Webpack output.&lt;/p&gt;

&lt;p&gt;Fortunately, jasmine-rails allowed us to override the Rails template &lt;code&gt;spec_runner.html.erb&lt;/code&gt; that gets rendered when jasmine-rails executes the test suite in the browser. We just copied the default jasmine-rails ERB layout into our project and added our Webpack &amp;quot;packs&amp;quot; in the right place.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- app/views/layouts/jasmine_rails/spec_runner.html.erb --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta content=&amp;quot;text/html;charset=UTF-8&amp;quot; http-equiv=&amp;quot;Content-Type&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;/&amp;gt;
    &amp;lt;title&amp;gt;Jasmine Specs&amp;lt;/title&amp;gt;

    &amp;lt;%= stylesheet_link_tag *jasmine_css_files %&amp;gt;

    &amp;lt;!-- add the packs! --&amp;gt;
    &amp;lt;%= javascript_pack_tag &amp;quot;vendor&amp;quot;, &amp;quot;application&amp;quot; %&amp;gt;

    &amp;lt;%= javascript_include_tag *jasmine_js_files, :defer =&amp;gt; &amp;quot;defer&amp;quot; %&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body data-no-turbolink&amp;gt;
    &amp;lt;div id=&amp;quot;jasmine_content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;%= yield %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once all our unit test were ported over to Karma, we were able to remove &lt;code&gt;jasmine-rails&lt;/code&gt; from our application.&lt;/p&gt;

      &lt;h2 id="local-development-with-ssl" class="title"&gt;
        &lt;a name="local-development-with-ssl" class="anchor" href="#local-development-with-ssl"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Local development with SSL
      &lt;/h2&gt;
    
&lt;p&gt;Our team also strives for dev/prod parity as much as possible, from the 12 factor app methodology. This includes using a non-localhost domain, like &lt;code&gt;myapp.dev&lt;/code&gt;, Nginx as a reverse proxy, and enforcing SSL in development. Fortunately, the Webpack dev server supports SSL, but we needed to do a few things to make it work properly, including submitting a few patches to Webpacker.&lt;/p&gt;

&lt;p&gt;Webpack assets are proxied to the Webpack dev server by the Webpacker middleware, but after enabling &lt;code&gt;https&lt;/code&gt; for the dev server, autoreload wasn&amp;#39;t working. This is because Webpack inserts a script that opens up a websocket connection to the dev server over the endpoint &lt;code&gt;/sockjs-node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We needed to provide the hostname to webpack dev server so it can initiate the websocket connection for live reloading (&lt;a href="https://webpack.js.org/configuration/dev-server/#devserver-public"&gt;Webpack docs&lt;/a&gt;). To do so, we set the &lt;code&gt;public&lt;/code&gt; option in &lt;code&gt;config/webpacker.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  dev_server:
    # ...
    public: myapp.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also add the following location block to development Nginx server configuration to allow the websocket connection to proxy through Nginx.&lt;/p&gt;

&lt;pre&gt;&lt;code class="nginx"&gt;server {
    listen 80;
    server_name myapp.dev

    # Proxy webpack dev server websocket requests
    location /sockjs-node {
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
        proxy_pass http://127.0.0.1:3035; # change to match your webpack-dev-server host
    }

    # ...
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="wrapping-up" class="title"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h2&gt;
    
&lt;p&gt;Wow, you made it this far!&lt;/p&gt;

&lt;p&gt;Perhaps the most important lesson we learned throughout this process is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Choosing Webpack means investing time in understanding how it works and how to get the most out of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gone are the days when we could &amp;quot;set it and forget it&amp;quot; for most of our dependencies under Sprockets. Despite the ease with which Webpacker let us get Webpack running in our Rails application, it has required effort to experiment with configuration, optimize bundles, integrate with third-party modules, set up predictable, long-term caching, and stay up-to-date with rapidly changing dependencies, like Webpack itself.&lt;/p&gt;

&lt;p&gt;As of this writing, all of our clientside application JavaScript now runs through Webpack in development and for deployment. So far, our team has been delighted by results and we&amp;#39;re glad we invested in upgrading from the asset pipeline.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Testing Rails generators</title>
    <link rel="alternate" href="/blog/testing-rails-generators.html"/>
    <id>/blog/testing-rails-generators.html</id>
    <published>2016-11-12T00:00:00+00:00</published>
    <updated>2016-11-12T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;This is the post I wished existed before attempting to write tests for a Rails generator with TDD.&lt;/p&gt;

&lt;p&gt;I recently added a Rails generator to my gem, &lt;code&gt;serviceworker-rails&lt;/code&gt;, to make it easier to add the assets and configuration files needed to &lt;a href="/blog/make-your-rails-app-a-progressive-web-app.html"&gt;turn your Rails...&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;This is the post I wished existed before attempting to write tests for a Rails generator with TDD.&lt;/p&gt;

&lt;p&gt;I recently added a Rails generator to my gem, &lt;code&gt;serviceworker-rails&lt;/code&gt;, to make it easier to add the assets and configuration files needed to &lt;a href="/blog/make-your-rails-app-a-progressive-web-app.html"&gt;turn your Rails app into a Progressive Web App&lt;/a&gt;. I&amp;#39;ve written a few Rails generators before, but have usually skipped the part about writing tests because––no excuse.&lt;/p&gt;

      &lt;h2 id="the-requirements" class="title"&gt;
        &lt;a name="the-requirements" class="anchor" href="#the-requirements"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The requirements
      &lt;/h2&gt;
    
&lt;p&gt;Rails generators are commonly used to create and/more modify project files in a Rails project. Setting up a Rails project with a Service Worker in the Rails asset pipeline can be a bit involved, and using the Rails generator to take care of the boilerplate makes it more convenient to get up-and-running with the gem.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the &lt;code&gt;serviceworker-rails&lt;/code&gt; install generator does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adds a starter &lt;code&gt;serviceworker.js&lt;/code&gt; file and companion JavaScript to &lt;code&gt;app/assets/javascripts&lt;/code&gt; for service worker registration&lt;/li&gt;
&lt;li&gt;Modifies &amp;#39;application.js` to require the companion JavaScript&lt;/li&gt;
&lt;li&gt;Adds a web app manifest file, &lt;code&gt;manifest.json&lt;/code&gt;, to &lt;code&gt;app/assets/javascripts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag to the application layout for the browser to locate the manifest&lt;/li&gt;
&lt;li&gt;Adds a Rails initializer to configure the serviceworker asset routes&lt;/li&gt;
&lt;li&gt;Modifies &lt;code&gt;config/initializers/assets.rb&lt;/code&gt; to precompile &lt;code&gt;serviceworker.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds a default &lt;code&gt;offline.html&lt;/code&gt; file to &lt;code&gt;public/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though this is a testing post but I&amp;#39;ll briefly mention some resources I&amp;#39;ve found helpeful for writing Rails generators. I recommend the &lt;a href="http://guides.rubyonrails.org/generators.html"&gt;Rails guides&lt;/a&gt; to get your Rails generator started. It also help to understand how &lt;code&gt;Thor&lt;/code&gt; works (&lt;a href="http://whatisthor.com/"&gt;What is Thor?&lt;/a&gt;), the library on which most Rails commandline tools are based. The Rails generator base classes leverage &lt;a href="http://www.rubydoc.info/github/erikhuda/thor/master/Thor/Actions"&gt;Thor actions&lt;/a&gt;, i.e., &lt;code&gt;create_file&lt;/code&gt;, &lt;code&gt;gsub_file&lt;/code&gt;, &lt;code&gt;insert_into_file&lt;/code&gt;, and sprinkle in some &lt;a href="http://api.rubyonrails.org/classes/Rails/Generators/Actions.html"&gt;Rails-specific methods&lt;/a&gt;, including &lt;code&gt;gem&lt;/code&gt;, &lt;code&gt;rake&lt;/code&gt;, &lt;code&gt;initializer&lt;/code&gt;, etc.&lt;/p&gt;

      &lt;h2 id="a-first-pass" class="title"&gt;
        &lt;a name="a-first-pass" class="anchor" href="#a-first-pass"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A first pass
      &lt;/h2&gt;
    
&lt;p&gt;So: how do I test this?&lt;/p&gt;

&lt;p&gt;Without consulting an external library for &amp;quot;testing Rails generators&amp;quot;, I wanted to take a pass at figuring it out on my own. I&amp;#39;d need to run the generator in the tests to verify the output and that the generator is working. This means the tests would have side effects that modify the file system.&lt;/p&gt;

&lt;p&gt;When using database access in tests, we typically expect to wipe test database clean before each test either by truncating or rolling back transactions. Modifying the file system is pretty much the same thing we&amp;#39;re trying to do with testing a Rails generator: trigger some side effects, wipe the slate clean, repeat.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;serviceworker-rails&lt;/code&gt; generator adds and modifies files in a Rails app, I decided I needed to generate a fresh Rails app while running the tests and delete it after the tests finish. Crazy, right? I ended up with a test helper that generates the app with something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def generate_sample_app
  system &amp;quot;rails new dummy --skip-active-record --skip-test-unit --skip-spring --skip-bundle&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Skipping all those features simplified things a bit, but still, creating and destroying a temporary Rails app for each test was overkill so I decided to generate the Rails app once, before all the tests were run. Since I use &lt;code&gt;MiniTest&lt;/code&gt; for &lt;code&gt;serviceworker-rails&lt;/code&gt;, the test setup looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; MiniTest::Test
  include GeneratorTestHelpers

  generate_sample_app

  Minitest.after_run do
    remove_sample_app
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the tests, I also started by running the rails generator command to invoke
my install generator. So given this library code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;
require &amp;quot;rails/generators&amp;quot;

module Serviceworker
  module Generators
    class InstallGenerator &amp;lt; ::Rails::Generators::Base

      def create_assets
        template &amp;quot;manifest.json&amp;quot;, javascripts_dir(&amp;quot;manifest.json.erb&amp;quot;)
        template &amp;quot;serviceworker.js&amp;quot;, javascripts_dir(&amp;quot;serviceworker.js.erb&amp;quot;)
        template &amp;quot;serviceworker-companion.js&amp;quot;, javascripts_dir(&amp;quot;serviceworker-companion.js&amp;quot;)
      end

      # ... additional steps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could run the generator for each test with:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def run_serviceworker_generator
  system &amp;quot;rails generator serviceworker:install&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also needed to make the following types of assertions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assert that a file was generated at a given location&lt;/li&gt;
&lt;li&gt;assert the contents of a generated or modified file&lt;/li&gt;
&lt;li&gt;assert a generated file with interpolations renders valid output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this first pass, I ended up with something very similar to Zurb&amp;#39;s
&lt;code&gt;foundation-rails&lt;/code&gt; tests for its install generator: &lt;a href="https://github.com/zurb/foundation-rails/blob/4dfe9b12e8cf3a1aa04b257ff64c782832efc6a0/spec/features/generator_spec.rb"&gt;spec&lt;/a&gt; and &lt;a href="https://github.com/zurb/foundation-rails/blob/4dfe9b12e8cf3a1aa04b257ff64c782832efc6a0/spec/support/helpers.rb"&gt;helper
methods&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def test_generates_serviceworker
   serviceworker_js = File.read(sample_app_path(&amp;quot;app/assets/javascripts/serviceworker.js.erb&amp;quot;))
   companion_js = File.read(sample_app_path(&amp;quot;app/assets/javascripts/serviceworker-companion.js&amp;quot;))

   assert serviceworker_js =~ /self.addEventListener\(&amp;#39;install&amp;#39;, onInstall\)/,
     &amp;quot;Expected serviceworker to be generated&amp;quot;
   assert companion_js =~ /navigator.serviceWorker.register/,
     &amp;quot;Expected serviceworker companion to be generated&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had several tests that read the contents of files and matches expected content
through regular expressions.&lt;/p&gt;

      &lt;h2 id="using-rails-generators-testcase" class="title"&gt;
        &lt;a name="using-rails-generators-testcase" class="anchor" href="#using-rails-generators-testcase"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Using Rails::Generators::TestCase
      &lt;/h2&gt;
    
&lt;p&gt;Though what I came up with worked and didn&amp;#39;t rely on any third-party dependencies, I wasn&amp;#39;t totally happy with it. The tests were very verbose. I didn&amp;#39;t like that I had to shell out to run the generator. I finally decided to &amp;quot;peek&amp;quot; and see how Rails tests its own generators, you know, the ones you love for generating models, migrations, and entire resource scaffolds.&lt;/p&gt;

&lt;p&gt;It turns out Rails generators are tested using &lt;code&gt;Rails::Generators::TestCase&lt;/code&gt;. Since Rails tests are also written in &lt;code&gt;MiniTest&lt;/code&gt; and my library already relies on Rails as a dependency--it &lt;em&gt;is&lt;/em&gt; a Rails engine--making the switch in my tests easy. If you&amp;#39;re using RSpec, I did come across &lt;a href="https://github.com/alexrothenberg/ammeter"&gt;&lt;code&gt;ammeter&lt;/code&gt;&lt;/a&gt;, which delegates to &lt;code&gt;Rails::Generators::TestCase&lt;/code&gt; under the hood, so it&amp;#39;d be quite similar to what I did here.&lt;/p&gt;

&lt;p&gt;First, we inherit from the base class:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing so brings in a bunch of helper methods for configuring the destination
directory, running the generator, and conveniences for making assertions on the generated
files. We declare the generator under test and a destination:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase
  tests ServiceWorker::Generators::InstallGenerator
  destination File.expand_path(&amp;quot;../tmp&amp;quot;, File.dirname(__FILE__))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following the style of Rails generator tests, a test case would look like the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;creates a file&amp;quot; do
  run_generator

  # make some assertions about file and its contents
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;run_generator&lt;/code&gt; method will instatiate the generator class and execute it in
the configured destination directory within the test process (no shell command, yay!). The test case class does provide a setup macro to ensure the destination directory exists:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase
  tests ServiceWorker::Generators::InstallGenerator
  destination File.expand_path(&amp;quot;../tmp&amp;quot;, File.dirname(__FILE__))

  setup :prepare_destination
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this method makes no assumptions about what I want to modify in that
directory, so as far as I could tell, I still needed to generate the rails app
in the destination directory and clean it up after the test run. I ended up
keeping the approach I had used previously:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase
  include GeneratorTestHelpers

  tests ServiceWorker::Generators::InstallGenerator
  destination File.expand_path(&amp;quot;../tmp&amp;quot;, File.dirname(__FILE__))

  generate_sample_app

  Minitest.after_run do
    remove_sample_app
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Rails::Generators::TestCase&lt;/code&gt; provides some useful helper methods.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;assert_file&lt;/code&gt; is used to verify a file was created. The given path would be
relative to the destination directory, Rails root:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates serviceworker&amp;quot; do
  run_generator
  assert_file &amp;quot;app/assets/javascripts/serviceworker.js.erb&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;assert_file&lt;/code&gt; accepts a block that yield the content of the file so we can check
its contents with plain-old &lt;code&gt;MiniTest&lt;/code&gt; helpers like &lt;code&gt;assert_match&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates serviceworker&amp;quot; do
  run_generator
  assert_file &amp;quot;app/assets/javascripts/serviceworker.js.erb&amp;quot; do |content|
    assert_match(/self.addEventListener\(&amp;#39;install&amp;#39;, onInstall\)/, content)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complementary &lt;code&gt;assert_no_file&lt;/code&gt; method is useful for ensuring a file was not created under certain
conditions. There is also &lt;code&gt;asset_migration&lt;/code&gt; and &lt;code&gt;assert_no_migration&lt;/code&gt; for
verifying migration files without having to know the migration timestamp to
locate the file by absolute path.&lt;/p&gt;

&lt;p&gt;One final technique I used was to verify the output of a generated file after
rendering it with ERB with interpolation. For example, the web app manifest I
provide in the &lt;code&gt;serviceworker-rails&lt;/code&gt; install generator, &lt;code&gt;manifest.json.erb&lt;/code&gt;, uses ERB to embed some
Ruby method calls. At compile time for the browser, the file must contain valid
JSON. How to test this again? No convenience methods here, so I rolled up my sleeves on this one.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the source template looks like for &lt;code&gt;manifest.json.erb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;&amp;lt;%% icon_sizes = Rails.configuration.serviceworker.icon_sizes %&amp;gt;
{
  &amp;quot;name&amp;quot;: &amp;quot;My Progressive Rails App&amp;quot;,
  &amp;quot;short_name&amp;quot;: &amp;quot;Progressive&amp;quot;,
  &amp;quot;start_url&amp;quot;: &amp;quot;/&amp;quot;,
  &amp;quot;icons&amp;quot;: [
  &amp;lt;%% icon_sizes.map { |s| &amp;quot;#{s}x#{s}&amp;quot; }.each.with_index do |dim, i| %&amp;gt;
    {
      &amp;quot;src&amp;quot;: &amp;quot;&amp;lt;%%= image_path &amp;quot;serviceworker-rails/heart-#{dim}.png&amp;quot; %&amp;gt;&amp;quot;,
      &amp;quot;sizes&amp;quot;: &amp;quot;&amp;lt;%%= dim %&amp;gt;&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;image/png&amp;quot;
    }&amp;lt;%%= i == (icon_sizes.length - 1) ? &amp;#39;&amp;#39; : &amp;#39;,&amp;#39; %&amp;gt;
  &amp;lt;%% end %&amp;gt;
  ],
  &amp;quot;theme_color&amp;quot;: &amp;quot;#000000&amp;quot;,
  &amp;quot;background_color&amp;quot;: &amp;quot;#FFFFFF&amp;quot;,
  &amp;quot;display&amp;quot;: &amp;quot;fullscreen&amp;quot;,
  &amp;quot;orientation&amp;quot;: &amp;quot;portrait&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, I&amp;#39;m using the &amp;quot;double-percent&amp;quot; style ERB tags, &lt;code&gt;&amp;lt;%% %&amp;gt;&lt;/code&gt;, on purpose.
Because the template itself is rendered through ERB, the double-percent tag
escapes interpolation so we can actually output ERB tags in its place.&lt;/p&gt;

&lt;p&gt;So, for my first attempt, I though I could grab the contents of the manifest ERB template, render it through ERB, parse it as JSON, and make assertions on the JSON object (as a Ruby hash). Something like the following&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates web app manifest&amp;quot; do
  assert_file &amp;quot;app/assets/javascripts/manifest.json.erb&amp;quot; do |content|
    result = ERB.new(content).result
    json = JSON.parse(result)

    assert_equal json[&amp;quot;name&amp;quot;], &amp;quot;My Progressive Rails App&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom, this generated an error:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;ServiceWorker::InstallGeneratorTest#test_generates_web_app_manifest:
NoMethodError: undefined method `image_path&amp;#39; for main:Object
/Users/ross/.rubies/ruby-2.2.3/lib/ruby/2.2.0/erb.rb:863:in `eval&amp;#39;
/Users/ross/.rubies/ruby-2.2.3/lib/ruby/2.2.0/erb.rb:863:in `result&amp;#39;
/Users/ross/dev/rossta/serviceworker-rails/test/serviceworker/install_generator_test.rb:28:in `block (2 levels) in &amp;lt;class:InstallGeneratorTest&amp;gt;&amp;#39;
/Users/ross/.gem/ruby/2.2.3/gems/railties-4.2.6/lib/rails/generators/testing/assertions.rb:30:in `assert_file&amp;#39;
/Users/ross/dev/rossta/serviceworker-rails/test/serviceworker/install_generator_test.rb:27:in `block in &amp;lt;class:InstallGeneratorTest&amp;gt;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The asset helper method &lt;code&gt;image_path&lt;/code&gt; is needed to output an appropriate digest urls for the web app icons. This will work in development or asset precompilation for production because this method is provided by the Sprockets environment. While I could load the Sprockets environment just for this test, it seems like both overkill and, honestly, way more work than I&amp;#39;m interested in.&lt;/p&gt;

&lt;p&gt;Instead of loading Sprockets, I decided to stub the &lt;code&gt;image_path&lt;/code&gt; method. The &lt;code&gt;ERB#result&lt;/code&gt; method takes a &lt;code&gt;binding&lt;/code&gt; as an optional argument. All Ruby objects have a private method &lt;code&gt;binding&lt;/code&gt;, which exposes the execution context to other objects, like &lt;code&gt;ERB&lt;/code&gt; for rendering template strings. The template doesn&amp;#39;t care what binding we give it, as long as it responds to the methods and instance variables present in the embedded ERB tags. It&amp;#39;s a classic example of dependency injection in the Ruby standard library.&lt;/p&gt;

&lt;p&gt;So I defined some helper methods to build up a context to mimic the behavior of
Sprockets by defining an implementation of the &lt;code&gt;image_path&lt;/code&gt; method and exposing
its &lt;code&gt;binding&lt;/code&gt; to be passes to the &lt;code&gt;ERB#result&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def evaluate_erb_asset_template(template)
  engine = ::ERB.new(template)
  asset_binding = asset_context_class.new.context_binding
  engine.result(asset_binding)
end

def asset_context_class
  Class.new do
    def image_path(name)
      &amp;quot;/assets/#{name}&amp;quot;
    end

    def context_binding
      binding
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I&amp;#39;m able to assert the contents of the generated, compiled JSON!&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates web app manifest&amp;quot; do
  assert_file &amp;quot;app/assets/javascripts/manifest.json.erb&amp;quot; do |content|
    json = JSON.parse(evaluate_erb_asset_template(content))

    assert_equal json[&amp;quot;name&amp;quot;], &amp;quot;My Progressive Rails App&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/rossta/serviceworker-rails/blob/94c45720f793397f0df66dbd4d67c680f3a293c3/test/serviceworker/install_generator_test.rb"&gt;Check out the source&lt;/a&gt; of the &lt;code&gt;serviceworker-rails&lt;/code&gt; generator test case to see the full picture of how all the pieces fit together.&lt;/p&gt;

      &lt;h2 id="wrapping-up" class="title"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h2&gt;
    
&lt;p&gt;I don&amp;#39;t often have to write generators for my libraries or production codebases,
but now that I&amp;#39;ve worked through both &amp;quot;rolling my own&amp;quot; testing strategy and
leveraging the behavior of Rails own &lt;code&gt;Rails::Generators::TestCase&lt;/code&gt;, I think I&amp;#39;ve
got a good feel for how I can test more generators moving forward.&lt;/p&gt;

&lt;p&gt;Hopefully, you&amp;#39;ll find this useful when and if you decide to write a Rails generator yourself.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Your first Progressive Web App on Rails</title>
    <link rel="alternate" href="/blog/make-your-rails-app-a-progressive-web-app.html"/>
    <id>/blog/make-your-rails-app-a-progressive-web-app.html</id>
    <published>2016-11-09T00:00:00+00:00</published>
    <updated>2016-11-09T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Discussion of &lt;a href="https://developers.google.com/web/progressive-web-apps/"&gt;Progressive Web Apps&lt;/a&gt; (PWA) is &lt;a href="https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0"&gt;catching fire&lt;/a&gt; in the JavaScript community, but amongst Rails developers... not so much.&lt;/p&gt;

&lt;p&gt;Progressive Web App technology is still very young and rapidly churning; perhaps there's more reluctance on Rails teams...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Discussion of &lt;a href="https://developers.google.com/web/progressive-web-apps/"&gt;Progressive Web Apps&lt;/a&gt; (PWA) is &lt;a href="https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0"&gt;catching fire&lt;/a&gt; in the JavaScript community, but amongst Rails developers... not so much.&lt;/p&gt;

&lt;p&gt;Progressive Web App technology is still very young and rapidly churning; perhaps there&amp;#39;s more reluctance on Rails teams to get onboard with new JavaScript APIs until they become more stable. Also, the Rails community hasn&amp;#39;t had a clear path to integrating PWA technology&amp;mdash;until now. In this post, we&amp;#39;ll demonstrate how to turn your Rails app into a Progressive Web App using the &lt;code&gt;serviceworker-rails&lt;/code&gt; gem.&lt;/p&gt;

&lt;p&gt;What are Progressive Web Apps? Simply put, they are web applications that deliver mobile
app-like experiences. For example, open web technologies are now making it possible for browser-based web apps to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;installable&lt;/strong&gt; - add web apps to the Home Screen of a mobile device easily&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;more reliable&lt;/strong&gt; - provide a user experience when the device is offline or network responsiveness has degraded; sync user requests in the background when network capability is restored&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;more engaging&lt;/strong&gt; - notify users of activity even when they&amp;#39;re not using the site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sound good? Let&amp;#39;s get started.&lt;/p&gt;

      &lt;h2 id="your-first-progressive-web-app-on-rails" class="title"&gt;
        &lt;a name="your-first-progressive-web-app-on-rails" class="anchor" href="#your-first-progressive-web-app-on-rails"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Your first Progressive Web App on Rails
      &lt;/h2&gt;
    
&lt;p&gt;Eric Elliot recently posted &lt;a href="https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0"&gt;a thorough overview of Progessive Web App
requirements&lt;/a&gt;
that&amp;#39;s worth a read. Here&amp;#39;s summary of what&amp;#39;s needed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS - any page that uses Progressive Web App technology needs to be served
over SSL/TLS so &amp;quot;HTTPS everywhere&amp;quot; is recommended&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Manifest"&gt;Web App Manifest&lt;/a&gt; - a
text file with application metadata to support home screen installation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"&gt;Service Worker&lt;/a&gt; - a client-side JavaScript worker that can intercept network requests, modify responses, interact with local caches, sync data in the background, and enable push notifications&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="set-up-https" class="title"&gt;
        &lt;a name="set-up-https" class="anchor" href="#set-up-https"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Set up HTTPS
      &lt;/h3&gt;
    
&lt;p&gt;To enable HTTPS on our website, we&amp;#39;ll need to decide for ourselves how to set up our web
server depending on our hosting provider and deployment needs. Tutorials for setting up &lt;a href="https://devcenter.heroku.com/articles/ssl"&gt;Heroku&lt;/a&gt; and &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-an-ssl-certificate-from-a-commercial-certificate-authority"&gt;Digital Ocean&lt;/a&gt; may be a good place to start.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll also want to force SSL settings in our Rails application
configuration for our remote environments, i.e., &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/environments/production.rb

Rails.application.configure do
  # ...

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should be sure to test out this behavior on a secondary remote environment before going live in
production as we&amp;#39;ll want to be aware of hiccups like mixed content warnings and
hard-coded non-HTTPS urls in our application.&lt;/p&gt;

      &lt;h3 id="add-a-manifest-and-service-worker" class="title"&gt;
        &lt;a name="add-a-manifest-and-service-worker" class="anchor" href="#add-a-manifest-and-service-worker"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Add a manifest and Service Worker
      &lt;/h3&gt;
    
&lt;p&gt;For this next step, we&amp;#39;ll assume we&amp;#39;re using the Rails asset pipeline. This is
both helpful and presents a problem:&lt;/p&gt;

&lt;p&gt;The Rails asset pipeline makes a number of assumptions about what&amp;#39;s best for deploying JavaScript, including asset digest fingerprints and long-lived cache headers - mostly to increase &amp;quot;cacheability&amp;quot;. Rails also assumes a single parent directory, /public/assets, to make it easier to look up the file path for a given asset.&lt;/p&gt;

&lt;p&gt;Service worker and manifest assets must play by different rules. Service workers may only be active from within the scope from which they are served. So if you try to register a service worker from a Rails asset pipeline path, like &lt;code&gt;/assets/serviceworker-abcd1234.js&lt;/code&gt;, it will only be able to interact with requests and responses within &lt;code&gt;/assets/**&lt;/code&gt;. This is not what we want.&lt;/p&gt;

&lt;p&gt;To address this issue, I created the &lt;code&gt;serviceworker-rails&lt;/code&gt; gem (&lt;a href="https://github.com/rossta/serviceworker-rails"&gt;source&lt;/a&gt;). This Rails
plugin makes it easier to set up your app to serve service worker
scripts and web app manifests at canonical urls while taking advantage of the transpilation and
interpolation features the asset pipeline provides.&lt;/p&gt;

&lt;p&gt;To get started with &lt;code&gt;serviceworker-rails&lt;/code&gt;, we&amp;#39;ll bundle it with our Rails app.&lt;/p&gt;

&lt;p&gt;Add the gem to the &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# Gemfile

gem &amp;quot;serviceworker-rails&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bundle the app:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ll use the built-in generator from service worker rails to add some starter
JavaScript files to our project and the proper configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ rails g serviceworker:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generator will create the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config/initializers/serviceworker.rb&lt;/code&gt; - for configuring your Rails app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/assets/javascripts/serviceworker.js.erb&lt;/code&gt; - a blank Service Worker
script with some example strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/assets/javascripts/serviceworker-companion.js&lt;/code&gt; - a snippet of JavaScript
necessary to register your Service Worker in the browser&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/assets/javascripts/manifest.json.erb&lt;/code&gt; - a starter web app manifest
pointing to some default app icons provided by the gem&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/offline.html&lt;/code&gt; - a starter offline page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will also make the following modifications to existing files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adds a sprockets directive to &lt;code&gt;application.js&lt;/code&gt; to require
&lt;code&gt;serviceworker-companion.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds &lt;code&gt;serviceworker.js&lt;/code&gt; and &lt;code&gt;manifest.json&lt;/code&gt; to the list of compiled assets in
&lt;code&gt;config/initializers/assets.rb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Injects tags into the &lt;code&gt;head&lt;/code&gt; of &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; for
linking to the web app manifest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, we could do this set up manually, but it may be helpful to run the
automated install for our first attempt. If going manual, consult the &lt;code&gt;serviceworker-rails&lt;/code&gt;
&lt;a href="https://github.com/rossta/serviceworker-rails"&gt;README&lt;/a&gt; and my previous &lt;a href="https://rossta.net/blog/service-worker-on-rails.html"&gt;blog
post on configuring the gem&lt;/a&gt; for more help during setup.&lt;/p&gt;

&lt;p&gt;At this point, we&amp;#39;ve got all the boilerplate in place in our Rails app to begin
adding Progessive Web App functionality. The great part is, we can pick and
choose which features we want to add.&lt;/p&gt;

&lt;p&gt;Here are few things you can try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rossta.net/blog/offline-page-for-your-rails-application.html"&gt;Adding an offline page for your Rails app&lt;/a&gt; - by @rossta&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rossta.net/blog/web-push-notifications-from-rails.html"&gt;Sending Web Push notifications from Rails&lt;/a&gt; - by @rossta&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addyosmani.com/blog/application-shell/"&gt;Instant loading Web Apps with a Service Worker application shell architecture&lt;/a&gt; - by Addy Osmani
*&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="going-further" class="title"&gt;
        &lt;a name="going-further" class="anchor" href="#going-further"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Going further
      &lt;/h2&gt;
    
&lt;p&gt;For more on grasping Service Worker fundamentals and developing offline solutions for the web, I highly recommend this free Udacity course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/offline-web-applications--ud899"&gt;Offline Web Applications&lt;/a&gt; by Google&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;#39;ll want to understand the Service Worker life cycle, which Jake Archibald
treats in great detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/lifecycle"&gt;The Service Worker Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For some open-source abstractions for implementing Service Worker fetching and
caching strategies, checkout out &lt;a href="https://github.com/GoogleChrome/sw-toolbox"&gt;SW-Toolbox&lt;/a&gt; and &lt;a href="https://github.com/GoogleChrome/sw-precache"&gt;SW-Precache&lt;/a&gt; from the Google Chrome team.&lt;/p&gt;

&lt;p&gt;Of course, we&amp;#39;ve only covered the getting started part of our journey with
Progressive Web Apps. I&amp;#39;ve left out a lot of fun parts like decided how to implement
caching strategies or send push notifications. Here are some resources to check
out to take your PWA skills to the next level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serviceworke.rs/"&gt;ServiceWorke.rs&lt;/a&gt; - a set of Service Worker recipes
and demos from Mozilla&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakearchibald.com/2014/offline-cookbook/"&gt;Offline Cookbook&lt;/a&gt; - a great rundown of Service Worker snippets, including a number of caching strategies, by Jake Archibald&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/serviceworker-rails-sandbox"&gt;Service Worker on Rails Sandbox&lt;/a&gt; - a demo Progressive Web App on Rails using the &lt;code&gt;serviceworker-rails&lt;/code&gt; gem by &lt;a href="https://github.com/rossta"&gt;@rossta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TalAter/awesome-progressive-web-apps"&gt;Awesome Progressive Web Apps&lt;/a&gt; - kitchen sink of PWA resources&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TalAter/awesome-service-workers"&gt;Awesome Service Workers&lt;/a&gt; - kitchen sink of Service Worker resources&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="rails-pwa" class="title"&gt;
        &lt;a name="rails-pwa" class="anchor" href="#rails-pwa"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Rails 💜 PWA
      &lt;/h2&gt;
    
&lt;p&gt;Nothing about Rails is incongruent with Progressive Web App technology so there&amp;#39;s no technical reason why we can&amp;#39;t start introducing these features today. It&amp;#39;s worth noting the choice to transition to PWA is completely orthogonal to whatever JavaScript MVC framework/module bundler/turbolinks decision you might be otherwise already tackling.&lt;/p&gt;

&lt;p&gt;In the coming years, I believe it will become increasingly important to adopt PWA features to keep up with demand as more and more site visits will shift to mobile web.&lt;/p&gt;
</content>
  </entry>
</feed>
