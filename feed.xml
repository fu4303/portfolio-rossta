<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2020-07-20T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Why doesn't Webpacker use my test config when I run Rails tests?</title>
    <link rel="alternate" href="/blog/why-doesnt-webpacker-use-my-test-config-when-i-run-rails-tests.html"/>
    <id>/blog/why-doesnt-webpacker-use-my-test-config-when-i-run-rails-tests.html</id>
    <published>2020-07-20T00:00:00+00:00</published>
    <updated>2020-07-20T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Here's something you might not expect: when running Rails tests, Webpacker will load the &lt;em&gt;development&lt;/em&gt; webpack config instead of the test config by default.&lt;/p&gt;

&lt;p&gt;To demonstrate, I'll use some "puts" debugging. Here's a &lt;code&gt;console.log&lt;/code&gt; statement in the development...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Here&amp;#39;s something you might not expect: when running Rails tests, Webpacker will load the &lt;em&gt;development&lt;/em&gt; webpack config instead of the test config by default.&lt;/p&gt;

&lt;p&gt;To demonstrate, I&amp;#39;ll use some &amp;quot;puts&amp;quot; debugging. Here&amp;#39;s a &lt;code&gt;console.log&lt;/code&gt; statement in the development config.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/development.js
// ...
console.log(&amp;#39;Loading config/webpack/development.js...&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I run my RSpec tests while logging to STDOUT and RAILS_ENV set to test, the log line is displayed.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_LOG_TO_STDOUT=true RAILS_ENV=test bin/rspec

# ...
[Webpacker] Compiling...
# ...
[Webpacker] Loading config/webpack/development.js...
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#39;ve noticed this before, you&amp;#39;re not the only one; this is a &lt;a href="https://github.com/rails/webpacker/issues/2654" target="_blank" rel="noopener noreferrer"&gt;recently reported issue&lt;/a&gt; on the Webpacker GitHub repository.&lt;/p&gt;

&lt;p&gt;It turns out, even though RAILS_ENV is set to &amp;quot;test&amp;quot;, NODE_ENV is set to &amp;#39;development&amp;#39; (&lt;a href="https://github.com/rails/webpacker/blob/bf278f9787704ed0f78038ad7d36c008abc2edfd/lib/install/bin/webpack#L4" target="_blank" rel="noopener noreferrer"&gt;source&lt;/a&gt;). The webpack config use is determined by the NODE_ENV, which means, and this is especially pertinent to your Rails system and integration test, the development webpack config is loaded. (You can confirm this by setting NODE_ENV, i.e., &lt;code&gt;NODE_ENV=nonsense bin/webpack&lt;/code&gt;).&lt;/p&gt;

      &lt;h3 id="what-gives-" class="title title-h3"&gt;
        &lt;a name="what-gives-" class="anchor" href="#what-gives-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        What gives?
      &lt;/h3&gt;
    
&lt;p&gt;If the &amp;quot;test&amp;quot; NODE_ENV isn&amp;#39;t used when I run my Rails tests, what is it good for?&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s make it clear that NODE_ENV has no explicit relationship to RAILS_ENV. Setting one of the ENV variables will have no effect on the other.&lt;/p&gt;

&lt;p&gt;This is useful for debugging; for example, you can compile your production webpack build locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;NODE_ENV=production RAILS_ENV=development bin/rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Speaking of production, when running &lt;code&gt;rails assets:precompile&lt;/code&gt; to compile your build, you don&amp;#39;t have to set NODE_ENV to production explicitly because &lt;a href="https://github.com/rails/webpacker/blob/bf278f9787704ed0f78038ad7d36c008abc2edfd/lib/tasks/webpacker/compile.rake#L21" target="_blank" rel="noopener noreferrer"&gt;Webpacker does this for you&lt;/a&gt;. Otherwise, development is the default.&lt;/p&gt;

&lt;p&gt;Another key point the production and development configurations are designed for compiling your JS for a real browser. Though they have different optimization characteristics, &lt;a href="https://github.com/rails/webpacker/blob/bf278f9787704ed0f78038ad7d36c008abc2edfd/lib/install/config/babel.config.js#L28-L38" target="_blank" rel="noopener noreferrer"&gt;they share the same browser-focused Babel config&lt;/a&gt; which will transform your nice ES6+ syntax into JavaScript your supported browsers will understand.&lt;/p&gt;

      &lt;h3 id="test-1-2-3" class="title title-h3"&gt;
        &lt;a name="test-1-2-3" class="anchor" href="#test-1-2-3"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Test 1-2-3
      &lt;/h3&gt;
    
&lt;p&gt;This finally brings us to the use case for &lt;code&gt;NODE_ENV=test&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript unit testing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By this I mean executing tests, written in JavaScript, against your application JavaScript code &lt;em&gt;within a Node.js process&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re talking &lt;a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener noreferrer"&gt;Mocha&lt;/a&gt;, &lt;a href="https://github.com/facebook/jest" target="_blank" rel="noopener noreferrer"&gt;Jest&lt;/a&gt;, &lt;a href="https://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener noreferrer"&gt;Karma&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;For some applications, JavaScript unit tests may not add much value, say if you&amp;#39;re just doing a little DOM-manipulation with jQuery here and there. However, there may be some benefit to structuring your JavaScript utilities and components into discrete units which can be tested in isolation. And where there are discrete, testable units, there is room for unit testing. That&amp;#39;s where JavaScript test runners come in.&lt;/p&gt;

&lt;p&gt;The Rails unit testing for asset-pipeline compiled JavaScript is a bit cumbersome; it typically requires a gem, like &lt;a href="https://github.com/jejacks0n/teaspoon" target="_blank" rel="noopener noreferrer"&gt;teaspoon&lt;/a&gt; or &lt;a href="https://github.com/searls/jasmine-rails" target="_blank" rel="noopener noreferrer"&gt;jasmine-rails&lt;/a&gt;, that integrates tightly with the Rails asset pipeline by booting up both Rails and a browser to compile JavaScript and execute tests.&lt;/p&gt;

&lt;p&gt;Webpacker opens the door to JavaScript unit test runners that can run in a Node.js process instead of a real browser (typically for speed). Jest, for example, &lt;a href="https://jestjs.io/docs/en/configuration#testenvironment-string" target="_blank" rel="noopener noreferrer"&gt;executes tests against a &amp;quot;browser-like&amp;quot; environment called jsdom by default&lt;/a&gt;. To support these node.js test runners, Webpacker&amp;#39;s &lt;a href="https://github.com/rails/webpacker/blob/bf278f9787704ed0f78038ad7d36c008abc2edfd/lib/install/config/babel.config.js#L20-L27" target="_blank" rel="noopener noreferrer"&gt;default Babel config targets the node.js runtime instead of a browser when &lt;code&gt;NODE_ENV=test&lt;/code&gt;&lt;/a&gt;; this means Babel will transform your nice ES6+ syntax into JavaScript your current node version will understand assuming you set &lt;code&gt;NODE_ENV=test&lt;/code&gt; for running your JavaScript unit tests.&lt;/p&gt;

&lt;p&gt;You can see the potential problem then if you explicitly set &lt;code&gt;NODE_ENV=test&lt;/code&gt; for your Rails system and integration tests without considering your Babel config; compiling your JavaScript for the Node.js runtime and loading in the browser may lead to some surprising issues. You can, of course, override this behavior if you really want; at least with this introduction provides some awareness of what you&amp;#39;d be getting yourself into.&lt;/p&gt;

      &lt;h3 id="the-more-you-know" class="title title-h3"&gt;
        &lt;a name="the-more-you-know" class="anchor" href="#the-more-you-know"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The more you know
      &lt;/h3&gt;
    
&lt;p&gt;You can &lt;a href="https://jestjs.io/docs/en/webpack" target="_blank" rel="noopener noreferrer"&gt;setup Jest to compile your JavaScript through your webpack configuration&lt;/a&gt;. If you follow the &lt;a href="https://jestjs.io/docs/en/getting-started" target="_blank" rel="noopener noreferrer"&gt;general setup instructions for Jest&lt;/a&gt;, it&amp;#39;s possible to integrate to run your unit tests without webpack at all... meaning your test webpack config, specified by &lt;code&gt;config/webpack/test.js&lt;/code&gt;, is useless. Other test runners like &lt;a href="https://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener noreferrer"&gt;karma&lt;/a&gt; offer similar options for running with or without webpack.&lt;/p&gt;

&lt;p&gt;Also, as I&amp;#39;ve described previously in &lt;a href="/blog/how-to-use-webpacker-yml.html"&gt;Understanding webpacker.yml&lt;/a&gt;, Webpacker provides a webpack configuration while merging settings declared in &lt;code&gt;config/webpacker.yml&lt;/code&gt; from YAML to JavaScript. This file contains settings for production, development, and test environments as do most Rails-y YAML files. Unlike the webpack config, webpacker.yml settings are determined by the current RAILS_ENV.&lt;/p&gt;

&lt;p&gt;This means, webpacker.yml test settings are merged into the development webpack config when running your Rails tests.&lt;/p&gt;

      &lt;h3 id="wrapping-up" class="title title-h3"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h3&gt;
    
&lt;p&gt;Does all of this seem a little confusing? I agree. Here&amp;#39;s a breakdown of how webpack configuration maps to RAILS_ENV and NODE_ENV in various contexts.&lt;/p&gt;

&lt;table style="font-size:85%; margin-bottom: 2em;"&gt;
  &lt;thead&gt;
    &lt;tr style="border-bottom: 1px solid #CCC"&gt;
      &lt;th&gt;Mode&lt;/th&gt;
      &lt;th&gt;RAILS_ENV&lt;/th&gt;
      &lt;th&gt;webpacker.yml&lt;/th&gt;
      &lt;th&gt;NODE_ENV&lt;/th&gt;
      &lt;th&gt;webpack config&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr style="border-bottom: 1px solid #CCC"&gt;
      &lt;td&gt;Deployed app&lt;/td&gt;
      &lt;td&gt;production&lt;/td&gt;
      &lt;td&gt;production&lt;/td&gt;
      &lt;td&gt;production&lt;/td&gt;
      &lt;td&gt;config/webpack/production.js&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style="border-bottom: 1px solid #CCC"&gt;
      &lt;td&gt;Local server&lt;/td&gt;
      &lt;td&gt;development&lt;/td&gt;
      &lt;td&gt;development&lt;/td&gt;
      &lt;td&gt;development&lt;/td&gt;
      &lt;td&gt;config/webpack/development.js&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style="border-bottom: 1px solid #CCC"&gt;
      &lt;td&gt;Rails tests&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
      &lt;td&gt;development&lt;/td&gt;
      &lt;td&gt;config/webpack/development.js&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style="border-bottom: 1px solid #CCC"&gt;
      &lt;td&gt;JS unit tests&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;test&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;config/webpack/test.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stated more simply:&lt;/p&gt;

&lt;p&gt;RAILS_ENV determines which Webpacker YAML settings are used and NODE_ENV determines which webpack configuration is used.&lt;/p&gt;

&lt;p&gt;Whether or not you find the use case for JavaScript unit tests compelling, it helps to know that Webpacker does not make any distinction between your development and test environments beyond the settings in your webpacker.yml; both are local concerns that target the same runtime, i.e., the browser.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;If you found this helpful, please consider subscribing to my newsletter to stay tuned for more on upping your &amp;quot;JavaScript on Rails&amp;quot; game.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The webpack plugin I can't live without</title>
    <link rel="alternate" href="/blog/webpacker-output-analysis-with-webpack-bundle-analyzer.html"/>
    <id>/blog/webpacker-output-analysis-with-webpack-bundle-analyzer.html</id>
    <published>2020-05-17T00:00:00+00:00</published>
    <updated>2020-05-17T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;tl;dr Install the &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;webpack-bundle-analyzer&lt;/code&gt;&lt;/a&gt; to visualize what's included in your webpack bundles and debug common problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does webpack feel still a bit scary? Maybe a bit too magical? Too much of &lt;em&gt;WTF is going on here?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It felt that way for me once...&lt;/p&gt;</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;tl;dr Install the &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;webpack-bundle-analyzer&lt;/code&gt;&lt;/a&gt; to visualize what&amp;#39;s included in your webpack bundles and debug common problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does webpack feel still a bit scary? Maybe a bit too magical? Too much of &lt;em&gt;WTF is going on here?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It felt that way for me once. I was struggling to &lt;a href="https://rossta.net/blog/from-sprockets-to-webpack.html" target="_blank" rel="noopener noreferrer"&gt;switch from Sprockets to Webpacker in a large Rails app&lt;/a&gt;. With Sprockets, I could require a jQuery plugin through a magic comment (the require directive), and it would &amp;quot;Just Work.&amp;quot;&lt;/p&gt;

&lt;p&gt;Such was not the case when I first started using webpack; ever seen an error like on the console?&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;&amp;#39;Uncaught TypeError: $(...).fancybox is not a function&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, you and me both.&lt;/p&gt;

&lt;p&gt;Then one day, it all clicked for me.&lt;/p&gt;

&lt;p&gt;My main problem was &lt;em&gt;I didn&amp;#39;t have a good mental model how webpack worked.&lt;/em&gt; To form that mental model, I researched dozens of articles, watched numerous screencasts, and read a lot of source code. One thing helped &amp;quot;flip the switch&amp;quot; more than anything else: understanding the product of a webpack build, the output.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It was right there in front of me the whole time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now you might call me crazy to say, &amp;quot;you should read the source of your bundled output,&amp;quot; even assuming we&amp;#39;re talking about the unminified/unobfuscated development build, so I&amp;#39;m not going to tell you to go do that. (Not without some guidance; let&amp;#39;s save that for a future project).&lt;/p&gt;

&lt;p&gt;But you can use a tool &lt;em&gt;right now&lt;/em&gt; to &lt;strong&gt;visualize&lt;/strong&gt; what&amp;#39;s in your bundle. And that could be enough to make all the difference in helping you understand, at least at a high level, how webpack does its thing.&lt;/p&gt;

      &lt;h3 id="introducing-the-webpack-bundle-analyzer" class="title title-h3"&gt;
        &lt;a name="introducing-the-webpack-bundle-analyzer" class="anchor" href="#introducing-the-webpack-bundle-analyzer"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Introducing the webpack-bundle-analyzer
      &lt;/h3&gt;
    
&lt;p&gt;But, there is something else you can do that requires a lot less work: you can use the &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt;. You can probably get it up-and-running in less time than it takes to read this article.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Curious about or need help with webpack? I may be able to help! I&amp;#39;m developing a course for webpack on Rails and I frequently write about it on this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;&lt;strong&gt;Subscribe to my newsletter to get updates&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The webpack-bundle-analyzer is a tool that you can use to visualize the contents of a webpack build. It parses the &amp;quot;stats&amp;quot; output of a webpack build and constructs an interactive &lt;a href="https://www.jasondavies.com/voronoi-treemap/" target="_blank" rel="noopener noreferrer"&gt;Voronoi treemap&lt;/a&gt; using the &lt;a href="https://carrotsearch.com/foamtree/" target="_blank" rel="noopener noreferrer"&gt;FoamTree&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;It might look a little something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/analyzer-single-bundle-1.png" alt="An example of a Voronoi treemap output by the webpack-bundle-analyzer" loading="lazy" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Funny story, this wasn&amp;#39;t the first time I&amp;#39;ve come across Voronoi diagrams. The hands-down best Computer Science class I took at NYU was &lt;a href="https://cs.nyu.edu/courses/fall16/CSCI-GA.2965-001/" target="_blank" rel="noopener noreferrer"&gt;Heuristics&lt;/a&gt; with Dennis Shasha in which we learned algorithms for approximating solutions to NP-hard problems and applied them to compete in automated 2-player competitive battles including a &lt;a href="https://cs.nyu.edu/courses/fall16/CSCI-GA.2965-001/voronoi_gravitational.html" target="_blank" rel="noopener noreferrer"&gt;gravitation Voronoi game&lt;/a&gt;. My source code is up on GitHub somewhere useful to no one else, serving mostly as a reminder I can accomplish big things under challenging constraints.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The analyzer will represent multiple bundles as distinct colors with relative sizes:
&lt;img src="/assets/images/blog/webpack/analyzer-multiple-bundles.png" alt="webpack-bundle-analyzer multiple bundles" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;Individual modules are displayed in their relative sizes. Hover over bundles and modules to view statistics. Click or scroll to zoom in:
&lt;img src="/assets/images/blog/webpack/analyzer-module-closeup.png" alt="webpack-bundle-analyzer module closeup" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;Use the slide-out menu on the left to toggle the gzipped and parsed (&amp;quot;un&amp;quot;-gzipped) bundles:
&lt;img src="/assets/images/blog/webpack/analyzer-menu-closeup.png" alt="webpack-bundle-analyzer close up of menu" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;Highlight modules that match a search phrase, like &amp;quot;react&amp;quot;:
&lt;img src="/assets/images/blog/webpack/analyzer-module-highlight.png" alt="webpack-bundle-analyzer module highlight" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;Are you using Moment.js? It might be including translations for all its locales by default at enormous cost. &lt;a href="https://github.com/jmblog/how-to-optimize-momentjs-with-webpack" target="_blank" rel="noopener noreferrer"&gt;Consider using only the locales you need&lt;/a&gt;.
&lt;img src="/assets/images/blog/webpack/analyzer-moment-locales.png" alt="webpack-bundle-analyzer moment locales" loading="lazy" /&gt;&lt;/p&gt;

      &lt;h4 id="key-questions" class="title title-h4"&gt;
        &lt;a name="key-questions" class="anchor" href="#key-questions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Key questions
      &lt;/h4&gt;
    
&lt;p&gt;Here are just some examples of questions the webpack-bundle-analyzer can help answer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Why is this bundle so large?&lt;/li&gt;
&lt;li&gt;What are the relative sizes of each &lt;em&gt;bundle&lt;/em&gt; in the webpack build?&lt;/li&gt;
&lt;li&gt;What are the relative sizes of each &lt;em&gt;module&lt;/em&gt; in the webpack build?&lt;/li&gt;
&lt;li&gt;Where is my business logic bundled?&lt;/li&gt;
&lt;li&gt;Are the modules I expect included?&lt;/li&gt;
&lt;li&gt;Are any modules included more than once?&lt;/li&gt;
&lt;li&gt;Are there modules I expect to be excluded?&lt;/li&gt;
&lt;li&gt;Which third-party libraries are bundled?&lt;/li&gt;
&lt;li&gt;Which bundle contains $MODULE_NAME?&lt;/li&gt;
&lt;li&gt;Is &lt;a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener noreferrer"&gt;tree-shaking&lt;/a&gt;* working?&lt;/li&gt;
&lt;li&gt;WTF is in this bundle?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Glossary alert&lt;/strong&gt; &amp;quot;Tree shaking&amp;quot; is jargon for dead code elimination: the process of removing unreferenced code from your build. Webpack will perform tree shaking when running in &amp;quot;production&amp;quot; mode which is enabled when building assets using &lt;code&gt;rake assets:precompile&lt;/code&gt; or via &lt;code&gt;./bin/webpack&lt;/code&gt; with &lt;code&gt;RAILS_ENV=production&lt;/code&gt; and &lt;code&gt;NODE_ENV=production&lt;/code&gt;. I&amp;#39;ll share more about how to take full advantage of tree shaking in future posts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, webpack-bundle-analyzer graphs what is happening in your build. It can help you debug unexpected behavior or optimize your build output to reduce bundle size. All that, in service of better user experience!&lt;/p&gt;

      &lt;h3 id="installation" class="title title-h3"&gt;
        &lt;a name="installation" class="anchor" href="#installation"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Installation
      &lt;/h3&gt;
    
&lt;p&gt;The &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; is distributed as an NPM package. To install via yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn add --dev webpack-bundle-analyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this tool is typically only useful for local development, we add it to &lt;code&gt;devDependencies&lt;/code&gt; using the &lt;code&gt;--dev&lt;/code&gt; flag.&lt;/p&gt;

      &lt;h3 id="usage" class="title title-h3"&gt;
        &lt;a name="usage" class="anchor" href="#usage"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Usage
      &lt;/h3&gt;
    
&lt;p&gt;To use the webpack-bundler-analyzer, you can either integrate it as a plugin to your Webpacker configuration or you use a two-step command line process.&lt;/p&gt;

&lt;p&gt;Typically, it makes the most sense to analyze the output of production builds since they will be what&amp;#39;s delivered to the client and may contain several optimizations that will make the output differ significantly from the development build. Analyzing the development build can still be useful for additional context when debugging.&lt;/p&gt;

&lt;p&gt;Though the instructions are tailored to a Rails project using &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;Webpacker&lt;/a&gt;, you could adapt them to any webpack project.&lt;/p&gt;

&lt;p&gt;When the analyzer is run, it will launch a local webserver; visit &lt;a href="http://locahost:8888" target="_blank" rel="noopener noreferrer"&gt;http://locahost:8888&lt;/a&gt; to view the treemap. The &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer#options-for-plugin" target="_blank" rel="noopener noreferrer"&gt;port is configurable&lt;/a&gt;, and you&amp;#39;ll need to hit Ctrl+C to stop the server.&lt;/p&gt;

      &lt;h4 id="option-1-analyze-json-from-command-line" class="title title-h4"&gt;
        &lt;a name="option-1-analyze-json-from-command-line" class="anchor" href="#option-1-analyze-json-from-command-line"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Option 1: Analyze JSON from command line
      &lt;/h4&gt;
    
&lt;p&gt;The &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; package ships with a command-line interface (CLI) that can ingest a webpack JSON stats file. In other words, it&amp;#39;s a two-step process in which we generate a webpack build that&amp;#39;s outputs build stats to a JSON file and then run the &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; CLI to analyze the build stats and the output bundles generated in the build:&lt;/p&gt;

&lt;p&gt;In a Rails project, we might typically first run the webpack build:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;bin/webpack --profile --json &amp;gt; tmp/webpack-stats.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we would analyze the output with the command &lt;code&gt;webpack-bundle-analyzer [stats file] [output directory]&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;npx webpack-bundle-analyzer tmp/webpack-stats.json public/packs
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npx&lt;/code&gt; is a separate command-line interface that is installed along with &lt;code&gt;node&lt;/code&gt;. It will look for the command you specify in your locally installed &lt;code&gt;node_modules&lt;/code&gt;. In other words, this replaces &lt;code&gt;./bin/node_modules/webpack-bundle-analyzer ...&lt;/code&gt;.
Get this: with &lt;code&gt;npx&lt;/code&gt;, the package script you&amp;#39;re trying to run &lt;em&gt;doesn&amp;#39;t even need to be installed&lt;/em&gt;! Yes, that&amp;#39;s right: if you want, you can skip &lt;code&gt;yarn add webpack-bundle-analyzer&lt;/code&gt;. Use &lt;code&gt;npx webpack-bundler-analyzer&lt;/code&gt; as if it&amp;#39;s installed globally. &lt;code&gt;npx&lt;/code&gt; will search your locally installed packages and will look up the package on the remote npm registry when not found locally. Pretty cool!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I don&amp;#39;t want to type all that out every time, I put those commands in the &lt;code&gt;scripts&lt;/code&gt; section of my &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;// package.json
{
  // ...
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;webpack:analyze&amp;quot;: &amp;quot;yarn webpack:build_json &amp;amp;&amp;amp; yarn webpack:analyze_json&amp;quot;,
    &amp;quot;webpack:build_json&amp;quot;: &amp;quot;RAILS_ENV=${RAILS_ENV:-production} NODE_ENV=${NODE_ENV:-production} bin/webpack --profile --json &amp;gt; tmp/webpack-stats.json&amp;quot;,
    &amp;quot;webpack:analyze_json&amp;quot;: &amp;quot;webpack-bundle-analyzer tmp/webpack-stats.json public/packs&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To analyze the build using these npm scripts, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn webpack:analyze
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could instead write this as a rake tasks as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;namespace :webpack do
  desc &amp;quot;Analyze the webpack build&amp;quot;
  task :analyze =&amp;gt; [:build_json, :analyze_json]

  task :build_json do
    system &amp;quot;RAILS_ENV=#{ENV.fetch(&amp;#39;RAILS_ENV&amp;#39;, &amp;#39;production&amp;#39;)} \
     NODE_ENV=#{ENV.fetch(&amp;#39;NODE_ENV&amp;#39;, &amp;#39;production&amp;#39;)} \
     bin/webpack --profile --json &amp;gt; tmp/webpack-stats.json&amp;quot;
  end

  task :analyze_json do
    system &amp;quot;npx webpack-bundle-analyzer tmp/webpack-stats.json public/packs&amp;quot;
  rescue Interrupt
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To analyze the build using these rake tasks, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;rake webpack:analyze
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="option-2-integrated-setup" class="title title-h4"&gt;
        &lt;a name="option-2-integrated-setup" class="anchor" href="#option-2-integrated-setup"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Option 2: Integrated setup
      &lt;/h4&gt;
    
&lt;p&gt;Instead of using separate scripts to trigger the bundle analyzer, you can instead incorporate the webpack-bundle-analyzer into your webpack configuration. Doing so runs the webpack-bundle-analyzer localhost server as a side effect of running the build command.&lt;/p&gt;

&lt;p&gt;Below, we&amp;#39;ll look at how you can integrate the analyzer into a Rails using &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;Webpacker&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

if (process.env.WEBPACK_ANALYZE === &amp;#39;true&amp;#39;) {
  const BundleAnalyzerPlugin = require(&amp;#39;webpack-bundle-analyzer&amp;#39;).BundleAnalyzerPlugin
  environment.plugins.append(&amp;#39;BundleAnalyzerPlugin&amp;#39;, new BundleAnalyzerPlugin())
}

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the plugin is incorporated into the webpack config only with the environment variable &lt;code&gt;WEBPACK_ANALYZE=true&lt;/code&gt;, so it is only added to the configuration as an opt-in feature.&lt;/p&gt;

&lt;p&gt;To visualize the production build, run this command instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;WEBPACK_ANALYZE=true RAILS_ENV=production NODE_ENV=production ./bin/webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could even run the analyzer server alongside your webpack-dev server with &lt;code&gt;WEBPACK_ANALYZE=true ./bin/webpack-dev-server&lt;/code&gt; to get instant feedback. Keep in mind that the bundle analysis while in development mode will yield different results from the production build.&lt;/p&gt;

      &lt;h4 id="rails-template" class="title title-h4"&gt;
        &lt;a name="rails-template" class="anchor" href="#rails-template"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Rails template
      &lt;/h4&gt;
    
&lt;p&gt;For your convenience, I packaged &lt;a href="https://railsbytes.com/public/templates/Xo5sYr" target="_blank" rel="noopener noreferrer"&gt;this changeset as a Rails template&lt;/a&gt; on &lt;a href="https://railsbytes.com" target="_blank" rel="noopener noreferrer"&gt;railsbytes.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can preview this template at &lt;a href="https://railsbytes.com/public/templates/Xo5sYr" target="_blank" rel="noopener noreferrer"&gt;https://railsbytes.com/public/templates/Xo5sYr&lt;/a&gt;. To use the template, skip the steps above and run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;rails app:template LOCATION=&amp;quot;https://railsbytes.com/script/Xo5sYr&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="what-39-s-next-" class="title title-h3"&gt;
        &lt;a name="what-39-s-next-" class="anchor" href="#what-39-s-next-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        What&amp;#39;s next?
      &lt;/h3&gt;
    
&lt;p&gt;So you&amp;#39;ve set up the webpack-bundle-analyzer and started understanding what&amp;#39;s happening in your webpack bundles, what now? You may have noticed some things you don&amp;#39;t like. In future posts, I&amp;#39;ll be examining how you can deal with the excesses, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replacing libraries with built-in browser functionality or smaller packages&lt;/li&gt;
&lt;li&gt;Taking full advantage of tree-shaking with imports&lt;/li&gt;
&lt;li&gt;Using webpack to filter out unnecessary imports&lt;/li&gt;
&lt;li&gt;The &amp;quot;right way&amp;quot; to split bundles for multi-page applications&lt;/li&gt;
&lt;li&gt;Code-splitting with dynamic imports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until then, here are some more resources you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/webpack/monitor-and-analyze" target="_blank" rel="noopener noreferrer"&gt;Google: Monitor and analyze the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ltlxjq4YEKU" target="_blank" rel="noopener noreferrer"&gt;Video: How to use the webpack bundle analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jmblog/how-to-optimize-momentjs-with-webpack" target="_blank" rel="noopener noreferrer"&gt;How to optimize momentjs with webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark" target="_blank" rel="noopener noreferrer"&gt;The correct wat to import lodash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Da6VxdGU2Ig" target="_blank" rel="noopener noreferrer"&gt;Managing your bundle size (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Why does Rails 6 include both Webpacker and Sprockets?</title>
    <link rel="alternate" href="/blog/why-does-rails-install-both-webpacker-and-sprockets.html"/>
    <id>/blog/why-does-rails-install-both-webpacker-and-sprockets.html</id>
    <published>2020-05-09T00:00:00+00:00</published>
    <updated>2020-05-09T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Since you're reading this post, chances are you've heard Rails 6 installs both Webpacker and Sprockets and you're wondering WTF is going on. By the way, it's &lt;a href="https://weblog.rubyonrails.org/2020/5/7/A-May-of-WTFs/" target="_blank" rel="noopener noreferrer"&gt;a whole May of WTFs for Rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait, don't Sprockets and Webpacker basically do the same...&lt;/strong&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Since you&amp;#39;re reading this post, chances are you&amp;#39;ve heard Rails 6 installs both Webpacker and Sprockets and you&amp;#39;re wondering WTF is going on. By the way, it&amp;#39;s &lt;a href="https://weblog.rubyonrails.org/2020/5/7/A-May-of-WTFs/" target="_blank" rel="noopener noreferrer"&gt;a whole May of WTFs for Rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait, don&amp;#39;t Sprockets and Webpacker basically do the same thing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If this is what you&amp;#39;re thinking, you&amp;#39;re not alone.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Curious about or need help with webpack? I may be able to help! I&amp;#39;m developing a course for Webpack on Rails and I frequently write about it on this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;&lt;strong&gt;Subscribe to my newsletter to get updates&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question keeps coming up, like in this &lt;a href="https://www.reddit.com/r/rails/comments/9zg7fe/confused_about_the_difference_between_sprockets/" target="_blank" rel="noopener noreferrer"&gt;Reddit post&lt;/a&gt;, or this &lt;a href="https://stackoverflow.com/questions/55232591/rails-5-2-why-still-use-assets-pipeline-with-webpacker" target="_blank" rel="noopener noreferrer"&gt;StackOverflow question&lt;/a&gt;, or this &lt;a href="https://www.reddit.com/r/rails/comments/dfww82/best_practice_for_webpacker_in_rails_6_do_i_need/" target="_blank" rel="noopener noreferrer"&gt;other Reddit post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my colleague &lt;a href="https://twitter.com/danmayer" target="_blank" rel="noopener noreferrer"&gt;@danmayer&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;How and where to handle assets is in a confusing state, 1 foot in asset pipeline and one foot in webpacker... If that is going to be a long last direction vs a transition we should make the best practices more clear in guides and how to ensure they play nicely together&lt;/p&gt;&amp;mdash; Dan Mayer (@danmayer) &lt;a href="https://twitter.com/danmayer/status/1258577270760804353?ref_src=twsrc%5Etfw"&gt;May 8, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Even &lt;a href="https://twitter.com/avdi" target="_blank" rel="noopener noreferrer"&gt;@avdi&lt;/a&gt; just last week:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Will someone please explain to me why after all the foofaraw about Rails 6 going to webpack, I&amp;#39;m still having to unfuck Sprockets in my application.rb&lt;/p&gt;&amp;mdash; Avdi Grimm (@avdi) &lt;a href="https://twitter.com/avdi/status/1256742291890413570?ref_src=twsrc%5Etfw"&gt;May 3, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s clear the Webpacker-Sprockets co-existence is catching many by surprise. There&amp;#39;s good reason for that too.&lt;/p&gt;

&lt;p&gt;You wouldn&amp;#39;t be wrong to think Sprockets and webpack solve the same general problem:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Packaging assets (JavaScript, CSS, images, fonts) for the browser&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The similarities exist. Both Sprockets and webpack will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;combine many source files into one or a few destination bundles for production&lt;/li&gt;
&lt;li&gt;transpile source files from one syntax to another&lt;/li&gt;
&lt;li&gt;minify and fingerprint assets when building for production&lt;/li&gt;
&lt;li&gt;rebuild modified source files in development incrementally&lt;/li&gt;
&lt;li&gt;do all of the above for both JavaScript and CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, Sprockets and webpack solve asset bundling in very different ways.&lt;/p&gt;

&lt;p&gt;Sprockets was introduced way back in 2007 (!), before Node.js, before the Cambrian explosion of JavaScript, before module specifications like CommonJS, AMD, and EcmaScript modules, before webpack, browserify and $ANY_MODULE_AWARE_ASSET_BUNDLER. Sprockets has not attempted to keep up with improvements in tooling, language features, and browser capabilities (save for source maps) as other projects in JavaScript community have.&lt;/p&gt;

&lt;p&gt;Webpack, on the other hand, fully embraces the concept of JavaScript modules. It integrates with Babel, PostCSS, and just about any recent web framework. It supports a number of module syntaxes, including &lt;a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener noreferrer"&gt;dynamic imports&lt;/a&gt; for &lt;a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noopener noreferrer"&gt;code splitting&lt;/a&gt;. There are a wide variety of &lt;a href="https://webpack.js.org/configuration/devtool/" target="_blank" rel="noopener noreferrer"&gt;configurable source map options&lt;/a&gt;. Top to bottom, the webpack compilation process is extremely modular and customizable.&lt;/p&gt;

      &lt;h3 id="so-why-would-rails-include-both-" class="title title-h3"&gt;
        &lt;a name="so-why-would-rails-include-both-" class="anchor" href="#so-why-would-rails-include-both-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        So why would Rails include both?
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the answer plain and simple straight from DHH back in 2016 when Webpack was first introduced as the recommended JavaScript compiler with Rails 5.1.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We will continue to use the asset pipeline for JavaScript sprinkles, CSS, images, and other static stuff. The two approaches coexist great.&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href="https://twitter.com/dhh/status/808349072734027776?ref_src=twsrc%5Etfw"&gt;December 12, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We will continue to use the asset pipeline for JavaScript sprinkles, CSS, images, and other static stuff. The two approaches coexist great.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To elaborate on this decision, there was a telling response from DHH on his GitHub pull request to &lt;a href="https://github.com/rails/rails/pull/33079#issuecomment-400140840" target="_blank" rel="noopener noreferrer"&gt;make Webpacker the default JavaScript compiler in Rails 6&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/rails/pull/33079#issuecomment-400140840" target="_blank" rel="noopener noreferrer"&gt;&lt;img src="/assets/images/blog/webpack/dhh-awkward.png" alt="DHH: Webpack’s support is awkward in my opinion and does not offer any benefits over Sprockets. Unlike in the realm of JavaScript compilation." loading="lazy" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@dwightwatson&lt;/strong&gt; Out of curiousity, what is the argument to continue using Sprockets for CSS/static assets when Webpacker supports them by default out of the box?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@dhh&lt;/strong&gt; Webpack’s support is awkward in my opinion and does not offer any benefits over Sprockets. Unlike in the realm of JavaScript compilation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;#39;s a lot to unpack there.&lt;/p&gt;

&lt;p&gt;When it comes to asset bundling, the &amp;quot;Rails way&amp;quot; is webpack for JavaScript and Sprockets for everything else. The default setup in a fresh Rail 6 install, similar to what Basecamp uses, still compiles CSS, images, and fonts with Sprockets.&lt;/p&gt;

&lt;p&gt;This means, if you&amp;#39;re a member of the Basecamp camp, all your webpack JavaScript source files would live in &lt;code&gt;app/javascript&lt;/code&gt; and all your Sprockets CSS and images would remain in &lt;code&gt;app/assets&lt;/code&gt;. Running &lt;code&gt;rails assets:precompile&lt;/code&gt; will first build all the Sprockets assets into the &lt;code&gt;public/assets&lt;/code&gt; directory, then will build all the webpack assets into the &lt;code&gt;public/packs&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;To be very clear, this does not mean you need to run both Sprockets and Webpacker to serve assets for the browser. The two processes for bundling assets are completely separate and they do not share dependencies. Different helpers, different implementations, different directories, different, different, different. They are built in such a way that they can cohabitate a Rails application.&lt;/p&gt;

&lt;p&gt;On the other hand, you could use &lt;em&gt;only&lt;/em&gt; Sprockets or &lt;em&gt;only&lt;/em&gt; Webpacker to bundle all your assets.&lt;/p&gt;

      &lt;h3 id="feeling-awkward-" class="title title-h3"&gt;
        &lt;a name="feeling-awkward-" class="anchor" href="#feeling-awkward-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Feeling, awkward?
      &lt;/h3&gt;
    
&lt;p&gt;DHH calls webpack&amp;#39;s approach to handling non-JavaScript assets &lt;em&gt;awkward&lt;/em&gt;. Now, I happen to like webpack a lot. But he&amp;#39;s not wrong.&lt;/p&gt;

&lt;p&gt;He says this because, to bundle CSS and images in webpack, you need to &lt;em&gt;import CSS and images from your JavaScript files&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import &amp;#39;../application.css&amp;#39;

import myImageUrl from &amp;#39;../images/my-image.jpg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason for this is that webpack wants to treat &lt;strong&gt;everything&lt;/strong&gt; as a JavaScript module. I mean &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All JavaScript imports are treated as JavaScript modules. To use CSS with webpack, you import it as you would a JavaScript module. To use an image with webpack, you import it as you would a JavaScript module. Depending on your perspective, this may be unusual—perhaps especially for Rails developers coming from Sprockets.&lt;/p&gt;

&lt;p&gt;This isn&amp;#39;t just a &amp;quot;Rails opinion&amp;quot;. Consider this recent tweet from a prominent voice in the React community, &lt;a href="https://twitter.com/ryanflorence" target="_blank" rel="noopener noreferrer"&gt;Ryan Florence&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;import url from &amp;quot;./whatever.jpg&amp;quot;&lt;br&gt;import html from &amp;quot;./some.md&amp;quot;&lt;br&gt;import str from &amp;quot;raw!./some.js&amp;quot;&lt;br&gt;&lt;br&gt;So ... I gotta admit I love this stuff, but did we jump the shark here with JavaScript build tools? Should this stuff happen outside the JavaScript module bundler?&lt;/p&gt;&amp;mdash; Ryan Florence (@ryanflorence) &lt;a href="https://twitter.com/ryanflorence/status/1258966331572928514?ref_src=twsrc%5Etfw"&gt;May 9, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Sounds a lot like discovering Sprockets in reverse? (I&amp;#39;m not surprised at that 50/50 split either).&lt;/p&gt;

&lt;p&gt;While awkward to some, webpack&amp;#39;s &amp;quot;Everything is a Module&amp;quot; mindset is also extremely powerful. There are some interesting possibilities when a tool goes &lt;strong&gt;all in&lt;/strong&gt; with such a mental model. Think of what &amp;quot;Everything is an Object&amp;quot; has done for Ruby.&lt;/p&gt;

      &lt;h3 id="choosing-webpacker-or-sprockets-or-both-" class="title title-h3"&gt;
        &lt;a name="choosing-webpacker-or-sprockets-or-both-" class="anchor" href="#choosing-webpacker-or-sprockets-or-both-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Choosing Webpacker or Sprockets (or both)
      &lt;/h3&gt;
    
&lt;p&gt;The good news is there&amp;#39;s no need to stress about it. Rails defaults mirror the preferred approach of the Basecamp team, but that doesn&amp;#39;t mean you have to agree or that it&amp;#39;s the right way to do things for your application. You can use both, as Basecamp does, or choose one over the other.&lt;/p&gt;

&lt;p&gt;To help you decide, I adapted &lt;a href="https://github.com/reactjs/react-rails/wiki/Choosing-Sprockets-or-Webpacker" target="_blank" rel="noopener noreferrer"&gt;this excellent guide from the react-rails project&lt;/a&gt;:&lt;/p&gt;

      &lt;h4 id="why-sprockets-" class="title title-h4"&gt;
        &lt;a name="why-sprockets-" class="anchor" href="#why-sprockets-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why Sprockets?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;My Rails app does not need much JavaScript&lt;/li&gt;
&lt;li&gt;I prefer global scripts and jQuery plugin enhancement, i.e. I don&amp;#39;t need a proper JavaScript module system&lt;/li&gt;
&lt;li&gt;Upgrading my legacy Rails app to Webpacker would be too costly&lt;/li&gt;
&lt;li&gt;I don&amp;#39;t need advanced tooling for local development&lt;/li&gt;
&lt;li&gt;It just works and I don&amp;#39;t have time to ramp up on alternatives&lt;/li&gt;
&lt;li&gt;My Rails app relies on specific asset gems and I don&amp;#39;t have NPM alternatives&lt;/li&gt;
&lt;/ul&gt;

      &lt;h4 id="why-not-sprockets-" class="title title-h4"&gt;
        &lt;a name="why-not-sprockets-" class="anchor" href="#why-not-sprockets-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why not Sprockets?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;Sprockets is slowing down my local development experience&lt;/li&gt;
&lt;li&gt;I need more control over aspects of our asset compilation&lt;/li&gt;
&lt;li&gt;My app has a lot of JavaScript and needs code-splitting features to avoid massive payloads&lt;/li&gt;
&lt;li&gt;I&amp;#39;m concerned about long-term support&lt;/li&gt;
&lt;/ul&gt;

      &lt;h4 id="why-webpacker-" class="title title-h4"&gt;
        &lt;a name="why-webpacker-" class="anchor" href="#why-webpacker-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why Webpacker?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;I want to use a proper JavaScript module system to manage dependencies, i.e., limit global scope pollution and have an explicit dependency graph with import/export and require&lt;/li&gt;
&lt;li&gt;I want to take advantage of the cutting edge features from ES6+, Babel, PostCSS&lt;/li&gt;
&lt;li&gt;I want intelligent code-splitting features such as dynamic imports and webpack&amp;#39;s splitChunks optimization&lt;/li&gt;
&lt;li&gt;I want more flexibility with how my build system generates source maps&lt;/li&gt;
&lt;li&gt;I want advanced tooling for local development including hot module replacement&lt;/li&gt;
&lt;li&gt;I want to build Single Page Apps*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*You don&amp;#39;t need to have a Single Page App to use webpack; it works quite well for &amp;quot;Multi Page Apps&amp;quot;.&lt;/p&gt;

      &lt;h4 id="why-not-webpacker-" class="title title-h4"&gt;
        &lt;a name="why-not-webpacker-" class="anchor" href="#why-not-webpacker-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why not Webpacker?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;My Rails app does not need much JavaScript&lt;/li&gt;
&lt;li&gt;I am a backend developer with limited knowledge of JavaScript ecosystem&lt;/li&gt;
&lt;li&gt;I am not ready to invest time to understand webpack and Webpacker&lt;/li&gt;
&lt;li&gt;It seems too complicated&lt;/li&gt;
&lt;/ul&gt;

      &lt;h4 id="why-use-both-" class="title title-h4"&gt;
        &lt;a name="why-use-both-" class="anchor" href="#why-use-both-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why use both?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;I prefer the &amp;quot;Rails way&amp;quot;: Webpacker to compile JavaScript, Sprockets for CSS, images, and fonts&lt;/li&gt;
&lt;li&gt;I&amp;#39;m upgrading from Sprockets to Webpacker incrementally&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="on-a-personal-note" class="title title-h3"&gt;
        &lt;a name="on-a-personal-note" class="anchor" href="#on-a-personal-note"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        On a personal note
      &lt;/h3&gt;
    
&lt;p&gt;I want to leave Sprockets behind. Sprockets was a huge leap forward for asset management when it was first introduced but it hasn&amp;#39;t taken advantage of newer possibilities. It languishes while webpack&amp;#39;s key features, such as performance optimizations through code-splitting, are first class.&lt;/p&gt;

&lt;p&gt;Webpack is more complex and does require some investment. For me, it&amp;#39;s been worth it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rossta.net/blog/reasons-to-switch-to-webpacker.html" target="_blank" rel="noopener noreferrer"&gt;I think webpack is a great choice for any application with a significant amount of JavaScript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which is right for you?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to debug webpack on Rails</title>
    <link rel="alternate" href="/blog/how-to-debug-webpack-on-rails.html"/>
    <id>/blog/how-to-debug-webpack-on-rails.html</id>
    <published>2020-05-04T00:00:00+00:00</published>
    <updated>2020-05-04T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;It's nice that the Rails Webpacker gem and NPM package abstracts your webpack config... that is until you need to make changes.&lt;/p&gt;

&lt;p&gt;In &lt;a href="/blog/how-to-customize-webpack-for-rails-apps.html"&gt;my previous post&lt;/a&gt;, I talked about how to customize the webpack config... but how can you be sure you're making the right...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s nice that the Rails Webpacker gem and NPM package abstracts your webpack config... that is until you need to make changes.&lt;/p&gt;

&lt;p&gt;In &lt;a href="/blog/how-to-customize-webpack-for-rails-apps.html"&gt;my previous post&lt;/a&gt;, I talked about how to customize the webpack config... but how can you be sure you&amp;#39;re making the right change? The webpack config is JavaScript, so you can&amp;#39;t simply jump into the Rails console to poke around. But you do have some other tools at your disposal though.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;#39;ll share some tips for debugging the webpack config in your Rails app.&lt;/p&gt;

      &lt;h3 id="the-one-liner" class="title title-h3"&gt;
        &lt;a name="the-one-liner" class="anchor" href="#the-one-liner"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The one-liner
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;For the following examples, I&amp;#39;m using Node v12.13.1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here&amp;#39;s a quick one-liner for printing the entire Rails webpack config in development:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/development&amp;quot;), { depth: null })&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like &lt;a href="https://nodejs.org/api/console.html#console_console_dir_obj_options" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;console.dir&lt;/code&gt;&lt;/a&gt; as a nice alternative to &lt;code&gt;console.log&lt;/code&gt; for inspecting JavaScript objects.&lt;/p&gt;

&lt;p&gt;For inspecting the test or production configs, just update the RAILS_ENV and the target file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/development&amp;quot;), { depth: null })&amp;#39;
# OR
$ RAILS_ENV=test node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/test&amp;quot;), { depth: null })&amp;#39;
# OR
$ RAILS_ENV=production node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/production&amp;quot;), { depth: null })&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We ensure the RAILS_ENV is set so Webpacker&amp;#39;s NPM package will load the correct settings from your &lt;code&gt;config/webpacker.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To make it even easier, I&amp;#39;ll put this into a script file in &lt;code&gt;bin/inspect_webpack&lt;/code&gt; with my Rails projects.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;#!/usr/bin/env sh

env=${RAILS_ENV:-development}
RAILS_ENV=${env} node -e &amp;quot;console.dir(require(\&amp;quot;./config/webpack/${env}\&amp;quot;), { depth: null })&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to run:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ chmod a+x ./bin/inspect_webpack
$ ./bin/inspect_webpack
# OR
$ RAILS_ENV=test ./bin/inspect_webpack
# OR
$ RAILS_ENV=production ./bin/inspect_webpack
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="on-the-console" class="title title-h3"&gt;
        &lt;a name="on-the-console" class="anchor" href="#on-the-console"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        On the console
      &lt;/h3&gt;
    
&lt;p&gt;For an interactive experience, you can run &lt;code&gt;node&lt;/code&gt; to pull up the Node.js REPL. This is especially helpful for isolating pieces of the webpack config &amp;quot;tree&amp;quot;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;$ RAILS_ENV=development node
&amp;gt; const config = require(&amp;#39;./config/webpack/development&amp;#39;)
undefined
&amp;gt; console.dir(config, { depth: null })
{
  mode: &amp;#39;development&amp;#39;,
  output: {
// displays the entire webpack config
// ...
&amp;gt; console.dir(config.plugins, { depth: null })
// displays the plugins ...
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the script I showed earlier, change the RAILS_ENV to inspect the configs for the other environments.&lt;/p&gt;

&lt;p&gt;From the node console, you can also access and play around with the Webpack &lt;code&gt;environment&lt;/code&gt; object directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&amp;gt; const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)
undefined
&amp;gt; environment.plugins.get(&amp;#39;Manifest&amp;#39;)
// displays configured WebpackAssetsManifest plugin
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="debugging-with-devtools" class="title title-h3"&gt;
        &lt;a name="debugging-with-devtools" class="anchor" href="#debugging-with-devtools"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Debugging with DevTools
      &lt;/h3&gt;
    
&lt;p&gt;While the above examples help inspect the webpack config in a REPL, it may help to debug the config within the build process itself. It&amp;#39;s possible to &lt;a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="noopener noreferrer"&gt;use the &lt;code&gt;debugger&lt;/code&gt; provided by Chrome DevTools on a Node.js process&lt;/a&gt; (as opposed to a browser&amp;#39;s JavaScript process).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the following examples, I&amp;#39;m using Chrome Version 80.0.3987.163&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could, for example, drop a &lt;code&gt;debugger;&lt;/code&gt; statement into our Webpacker webpack config:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

debugger

// changes I want to debug ...

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then run the webpack build with the &lt;code&gt;--debug&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ ./bin/webpack --debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is in the local development environment is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node --inspect-brk yarn webpack --config ./config/webpack/development.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the webpack process in debug mode will open up a websocket to communicate with Chrome DevTools:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ ./bin/webpack --debug
Debugger listening on ws://127.0.0.1:9229/861b81ed-6f2f....
For help, see: https://nodejs.org/en/docs/inspector
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit &lt;code&gt;chrome://inspect&lt;/code&gt; in your Chrome browser and we can find a link for our running Node process in the menu:
&lt;img src="/assets/images/blog/webpack/chrome-inspect-main.png" alt="Screenshot of the chrome://inspect page" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;This will start a instance of the DevTools for your Node process where we can click &amp;quot;Play&amp;quot; to resume execution:
&lt;img src="/assets/images/blog/webpack/chrome-inspect-webpack-debug-1.png" alt="Screenshot of Chrome DevTools debugger start" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;The process halts when it hits our &lt;code&gt;debugger&lt;/code&gt; statement and we can modify values on the console:
&lt;img src="/assets/images/blog/webpack/chrome-inspect-webpack-debug-2.png" alt="Screenshot of Chrome DevTools console" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;For larger (or misconfigured) projects, you may experience memory usage issues with the webpack build. The DevTools debugger also provides a Memory tab for taking heap snapshots and tracking down the memory hogs in your build process.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/chrome-inpsect-memory-tab.png" alt="Screenshot of DevTools Memory tab" loading="lazy" /&gt;
&lt;img src="/assets/images/blog/webpack/chrome-inspect-heap-snapshot.png" alt="Screenshot of DevTools heap snapshot" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;#39;s more on &lt;a href="https://medium.com/webpack/webpack-bits-learn-and-debug-webpack-with-chrome-dev-tools-da1c5b19554" target="_blank" rel="noopener noreferrer"&gt;using DevTools with webpack on the webpack blog&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="speed-measure-plugin" class="title title-h3"&gt;
        &lt;a name="speed-measure-plugin" class="anchor" href="#speed-measure-plugin"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Speed measure plugin
      &lt;/h3&gt;
    
&lt;p&gt;To help isolate slow parts of your build, I highly recommend the &lt;a href="https://github.com/stephencookdev/speed-measure-webpack-plugin#readme" target="_blank" rel="noopener noreferrer"&gt;Speed Measure Plugin&lt;/a&gt; for webpack. This is a plugin you would install and configure in your project temporarily to get feedback about individual parts of the build process.&lt;/p&gt;

&lt;p&gt;First, install the plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn add speed-measure-webpack-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then temporarily configure your production build (you could also do something similar for development or test):&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;process.env.NODE_ENV = process.env.NODE_ENV || &amp;#39;production&amp;#39;

const environment = require(&amp;#39;./environment&amp;#39;)

const SpeedMeasurePlugin = require(&amp;#39;speed-measure-webpack-plugin&amp;#39;)
const smp = new SpeedMeasurePlugin()

module.exports = smp.wrap(environment.toWebpackConfig())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run the production build:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=production NODE_ENV=production ./bin/webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Speed Measure plugin will print information to $stdout which may help identify the slow parts:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt; SMP  ⏱
General output time took 3.094 secs

 SMP  ⏱  Plugins
CaseSensitivePathsPlugin took 0.391 secs
TerserPlugin took 0.306 secs
WebpackAssetsManifest took 0.066 secs
CompressionPlugin took 0.019 secs
MiniCssExtractPlugin took 0.001 secs
OptimizeCssAssetsWebpackPlugin took 0.001 secs
EnvironmentPlugin took 0 secs

 SMP  ⏱  Loaders
modules with no loaders took 1.27 secs
  module count = 365
babel-loader took 0.824 secs
  module count = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href="https://dev.to/slashgear_/how-to-boost-the-speed-of-your-webpack-build-16h0" target="_blank" rel="noopener noreferrer"&gt;How to boost the speed of your webpack build&lt;/a&gt; and the &lt;a href="https://webpack.js.org/guides/build-performance/" target="_blank" rel="noopener noreferrer"&gt;official webpack build performance docs&lt;/a&gt; for a number of useful tips for improving build/compilation performance.&lt;/p&gt;

      &lt;h3 id="wrapping-up" class="title title-h3"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h3&gt;
    
&lt;p&gt;Even though Webpacker hides away much of the complexity of webpack configuration, sometimes it&amp;#39;s necessary to peel back the abstraction layer. Like anything else that&amp;#39;s new, wrapping your head around webpack build can be intimidating, especially if you don&amp;#39;t know where to start. If things go wrong, all is not lost. Hopefully this post helped illustrate some ways you can get insight into what&amp;#39;s happening in your Rails webpack config.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to customize webpack in Rails apps</title>
    <link rel="alternate" href="/blog/how-to-customize-webpack-for-rails-apps.html"/>
    <id>/blog/how-to-customize-webpack-for-rails-apps.html</id>
    <published>2020-04-18T00:00:00+00:00</published>
    <updated>2020-04-18T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;When &lt;a href="/blog/how-to-use-webpacker-yml.html"&gt;adjusting webpacker.yml&lt;/a&gt; is not enough, it might be necessary to modify Webpacker's default webpack configuration. Configuring webpack is precisely the main job of Webpacker's NPM package, &lt;code&gt;@rails/webpacker&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn...&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;When &lt;a href="/blog/how-to-use-webpacker-yml.html"&gt;adjusting webpacker.yml&lt;/a&gt; is not enough, it might be necessary to modify Webpacker&amp;#39;s default webpack configuration. Configuring webpack is precisely the main job of Webpacker&amp;#39;s NPM package, &lt;code&gt;@rails/webpacker&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post provides an overview of how to customize its default settings for your Rails application. It&amp;#39;s a followup to my last post on &lt;a href="/blog/how-to-use-webpacker-yml.html"&gt;understanding webpacker.yml&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;webpacker.yml&lt;/code&gt;&lt;/strong&gt; to modify a &lt;strong&gt;limited&lt;/strong&gt; number of settings, some of which are shared between Rails and webpack.&lt;/p&gt;

&lt;p&gt;Modify the base &lt;strong&gt;&lt;code&gt;@rails/webpacker&lt;/code&gt;&lt;/strong&gt; configuration for &lt;strong&gt;any&lt;/strong&gt; webpack-specific config options in JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h2 id="at-a-glance" class="title title-h2"&gt;
        &lt;a name="at-a-glance" class="anchor" href="#at-a-glance"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        At a glance
      &lt;/h2&gt;
    
&lt;p&gt;In an ideal world, webpack configuration would be transparent to Rails developers. Let&amp;#39;s face it, most developers would rather spend their time building features than configuring their asset compilation process. Still, the base webpack configuration provided by &lt;code&gt;@rails/webpacker&lt;/code&gt; may not satisfy your application&amp;#39;s needs, so modifications may be inevitable.&lt;/p&gt;

&lt;p&gt;Some things you might want to modify or change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope"&gt;Handling legacy jQuery plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loading-dotenv-env-vars-in-webpack"&gt;Loading dotenv ENV vars in webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enabling-webpack-optimization"&gt;Enabling webpack optimization (i.e., sharing code across bundles)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-module-aliases"&gt;Using modules aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overriding-the-default-options-for-compiling-css-modules"&gt;Changing the identifiers for CSS modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, where to start?&lt;/p&gt;

&lt;p&gt;First, we&amp;#39;ll take a look at the environment-specific JavaScript files Webpacker installs in the &lt;code&gt;config/webpack/&lt;/code&gt; directory within your Rails application:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ tree config/webpack
config/webpack
├── development.js
├── environment.js
├── production.js
└── test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For experienced frontend developers wondering &lt;em&gt;where is &lt;code&gt;webpack.config.js&lt;/code&gt;?&lt;/em&gt;, it&amp;#39;s here, as &lt;code&gt;config/webpack/{development,test,production}.js&lt;/code&gt;; there is a separate config file for each Rails environment.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;./bin/webpack&lt;/code&gt; is similar to typing out one the following commands to run &lt;code&gt;webpack&lt;/code&gt; directly, depending on your current &lt;code&gt;RAILS_ENV&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;RAILS_ENV=development yarn webpack --config ./config/webpack/development.js
RAILS_ENV=test yarn webpack --config ./config/webpack/test.js
RAILS_ENV=production yarn webpack --config ./config/webpack/production.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These files are to webpack configuration what Ruby config files &lt;code&gt;config/environments/{development,test,production}.rb&lt;/code&gt; are Rails configuration: the place to customize environment-specific needs. Just as &lt;code&gt;config/application.rb&lt;/code&gt; is the shared configuration for all Rails environments, so is &lt;code&gt;config/webpack/environment.js&lt;/code&gt; for each of the environment-specific webpack config files.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;config/webpack/environment.js&lt;/code&gt; file is where the default webpack configuration is imported via &lt;code&gt;@rails/webpacker&lt;/code&gt;. The named import &lt;code&gt;environment&lt;/code&gt; is an abstraction around the webpack config. It provides &lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#configuration" target="_blank" rel="noopener noreferrer"&gt;its own API to support modification and extension&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the environment-specific files are more or less the same; they import the base &lt;code&gt;environment&lt;/code&gt; object and must convert it to a JavaScript object that matches the webpack configuration schema:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/development.js
process.env.NODE_ENV = process.env.NODE_ENV || &amp;#39;development&amp;#39;

const environment = require(&amp;#39;./environment&amp;#39;)

module.exports = environment.toWebpackConfig()
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="under-the-hood" class="title title-h3"&gt;
        &lt;a name="under-the-hood" class="anchor" href="#under-the-hood"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Under the hood
      &lt;/h3&gt;
    
&lt;p&gt;There&amp;#39;s a problem though with making changes through an abstraction layer; it&amp;#39;s hard to see what you want to change. Since the API is not fully documented yet, you may need to do some digging.&lt;/p&gt;

&lt;p&gt;To print it out on the command line, here&amp;#39;s a handy one-line script:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/development&amp;quot;), { depth: null })&amp;#39;
# displays entire webpack config object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/api/console.html#console_console_dir_obj_options" target="_blank" rel="noopener noreferrer"&gt;console.dir&lt;/a&gt; is a nice alternative to &lt;code&gt;console.log&lt;/code&gt; for inspecting JavaScript objects.&lt;/p&gt;

&lt;p&gt;To go deeper, you may want to checkout &lt;a href="https://github.com/rails/webpacker/blob/40a171021f6a89117aed1317957199cf2ca72b98/package/environments/base.js#L123" target="_blank" rel="noopener noreferrer"&gt;the source for the &lt;code&gt;Environment&lt;/code&gt; class in the &lt;code&gt;@rails/webpacker&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;environment&lt;/code&gt; instance has &lt;code&gt;loaders&lt;/code&gt; and &lt;code&gt;plugins&lt;/code&gt; properties that are each implemented as bespoke &lt;a href="https://github.com/rails/webpacker/blob/40a171021f6a89117aed1317957199cf2ca72b98/package/config_types/config_list.js#L5" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;ConfigList&lt;/code&gt;&lt;/a&gt; objects that subclass JavaScript&amp;#39;s &lt;code&gt;Array&lt;/code&gt; class (&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/package/config_types/config_list.js" target="_blank" rel="noopener noreferrer"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://webpack.js.org/concepts/#loaders" target="_blank" rel="noopener noreferrer"&gt;Loaders in webpack&lt;/a&gt; define transforms based on file type or name; they are analogous to preprocessors in the Sprockets. &lt;a href="https://webpack.js.org/concepts/#plugins" target="_blank" rel="noopener noreferrer"&gt;Plugins in webpack&lt;/a&gt; support a wider range of tasks, like optimization or moving/copying assets, by leveraging webpack&amp;#39;s exhaustive list of hooks to tap into the compilation process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;environment.config&lt;/code&gt; property is also useful is you want to simply override defaults with a raw object matching a portion of the webpack config schema.&lt;/p&gt;

      &lt;h3 id="examples" class="title title-h3"&gt;
        &lt;a name="examples" class="anchor" href="#examples"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Examples
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the rub: Webpacker, in true Rails fashion, aims to provide convention over configuration, however, the design of webpack skews heavily in the other direction: it is extremely flexible and malleable through its support for plugins and a large number of configurable options. Webpack is built to support a broad range of use cases to meet the needs of a diverse frontend landscape. Webpacker&amp;#39;s opinionated approach may leave out something you need.&lt;/p&gt;

&lt;p&gt;This means there may come a time when you need to roll up your sleeves and peel back the abstraction layer and modify the base Webpacker &lt;code&gt;environment&lt;/code&gt; object. At this point, it may help to read up on &lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#configuration" target="_blank" rel="noopener noreferrer"&gt;the Webpacker docs for modifying the webpack configuration&lt;/a&gt;. Below are just a few examples.&lt;/p&gt;

      &lt;h4 id="providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope" class="title title-h4"&gt;
        &lt;a name="providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope" class="anchor" href="#providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Providing jQuery as an import to legacy plugins and exposing to global scope
      &lt;/h4&gt;
    
&lt;p&gt;Here&amp;#39;s an example of how to &amp;quot;provide&amp;quot; a jQuery import to a legacy package that doesn&amp;#39;t understand modules and to &amp;quot;expose&amp;quot; the &lt;code&gt;$&lt;/code&gt; variable for the global scope (so you can use &lt;code&gt;$(...)&lt;/code&gt; expressions in raw &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags).&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ yarn add expose-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)
const webpack = require(&amp;#39;webpack&amp;#39;)

// Adds `var jQuery = require(&amp;#39;jquery&amp;#39;) to legacy jQuery plugins
environment.plugins.append(
  &amp;#39;Provide&amp;#39;,
  new webpack.ProvidePlugin({
    $: &amp;#39;jquery&amp;#39;,
    jQuery: &amp;#39;jquery&amp;#39;,
    jquery: &amp;#39;jquery&amp;#39;,
  }),
)

// Adds window.$ = require(&amp;#39;jquery&amp;#39;)
environment.loaders.append(&amp;#39;jquery&amp;#39;, {
  test: require.resolve(&amp;#39;jquery&amp;#39;),
  use: [
    {
      loader: &amp;#39;expose-loader&amp;#39;,
      options: &amp;#39;$&amp;#39;,
    },
  ],
})

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack" target="_blank" rel="noopener noreferrer"&gt;This StackOverflow post&lt;/a&gt; provides more general context on making legacy jQuery play nice with webpack.&lt;/p&gt;

      &lt;h4 id="loading-dotenv-env-vars-in-webpack" class="title title-h4"&gt;
        &lt;a name="loading-dotenv-env-vars-in-webpack" class="anchor" href="#loading-dotenv-env-vars-in-webpack"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Loading dotenv ENV vars in webpack
      &lt;/h4&gt;
    
&lt;p&gt;A nice feature of webpack and the default webpack configuration is that it will make ENV vars available to the build process. For example, using &lt;code&gt;process.ENV.MY_API_KEY&lt;/code&gt; will be compiled to &lt;code&gt;&amp;quot;my-api-key-value&amp;quot;&lt;/code&gt; in your webpack build. To emulate the behavior of the popular &lt;code&gt;dotenv-rails&lt;/code&gt; project, which can load ENV vars defined in &lt;code&gt;.env*&lt;/code&gt; files, you could add configuration as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn add dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)
const webpack = require(&amp;#39;webpack&amp;#39;)
const dotenv = require(&amp;#39;dotenv&amp;#39;)

const dotenvFiles = [
  `.env.${process.env.NODE_ENV}.local`,
  &amp;#39;.env.local&amp;#39;,
  `.env.${process.env.NODE_ENV}`,
  &amp;#39;.env&amp;#39;,
]
dotenvFiles.forEach((dotenvFile) =&amp;gt; {
  dotenv.config({ path: dotenvFile, silent: true })
})

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/env.md#environment-variables" target="_blank" rel="noopener noreferrer"&gt;Original source in the Webpacker docs&lt;/a&gt;.&lt;/p&gt;

      &lt;h4 id="enabling-webpack-optimization" class="title title-h4"&gt;
        &lt;a name="enabling-webpack-optimization" class="anchor" href="#enabling-webpack-optimization"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Enabling webpack optimization
      &lt;/h4&gt;
    
&lt;p&gt;The &lt;code&gt;splitChunks&lt;/code&gt; API instructs webpack to share dependencies across bundles. Using this optimization step must be combined with different view helpers; see the&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#add-splitchunks-webpack-v4" target="_blank" rel="noopener noreferrer"&gt;Webpacker docs&lt;/a&gt; for more info.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

// Enable the default config
environment.splitChunks()
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: Use the &lt;code&gt;splitChunks&lt;/code&gt; API for solving the &amp;quot;page-specific JavaScript&amp;quot; problem with Webpacker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See the &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer"&gt;webpack splitChunks docs&lt;/a&gt; for more info.&lt;/p&gt;

      &lt;h4 id="using-module-aliases" class="title title-h4"&gt;
        &lt;a name="using-module-aliases" class="anchor" href="#using-module-aliases"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Using module aliases
      &lt;/h4&gt;
    
&lt;p&gt;The Webpacker environment API also supports a &lt;code&gt;config.merge&lt;/code&gt; function to override raw webpack config options. This example would allow you to import images from the &lt;code&gt;app/assets&lt;/code&gt; directory using &lt;code&gt;import &amp;#39;images/path/to/image.jpg&amp;#39;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { resolve } = require(&amp;#39;path&amp;#39;);

// Enable the default config
environment.config.merge({
  resolve: {
    alias: {
      images: resolve(&amp;#39;app/assets/images&amp;#39;),
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Learn more in the &lt;a href="https://webpack.js.org/configuration/resolve/" target="_blank" rel="noopener noreferrer"&gt;webpack resolve docs&lt;/a&gt;.&lt;/p&gt;

      &lt;h4 id="overriding-the-default-options-for-compiling-css-modules" class="title title-h4"&gt;
        &lt;a name="overriding-the-default-options-for-compiling-css-modules" class="anchor" href="#overriding-the-default-options-for-compiling-css-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Overriding the default options for compiling CSS modules
      &lt;/h4&gt;
    
&lt;p&gt;This change involves modifying an existing loader, which can be accessed using &lt;code&gt;environment.loaders.get(key)&lt;/code&gt; and replacing its options property.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

const myCssLoaderOptions = {
  modules: {
    localIdentName: &amp;#39;[name]__[local]___[hash:base64:10]&amp;#39;,
  },
  sourceMap: true,
}

const CSSLoader = environment.loaders
  .get(&amp;#39;moduleSass&amp;#39;)
  .use
  .find((el) =&amp;gt; el.loader === &amp;#39;css-loader&amp;#39;)

CSSLoader.options = { ...CSSLoader.options, ...myCssLoaderOptions }

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#overriding-loader-options-in-webpack-3-for-css-modules-etc" target="_blank" rel="noopener noreferrer"&gt;Original source in the Webpacker docs&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="wrapping-up" class="title title-h3"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h3&gt;
    
&lt;p&gt;In this post, I&amp;#39;ve attempted to shed some light on the role of the &lt;code&gt;@rails/webpacker&lt;/code&gt; project in your Rails app. We demonstrated how the Webpacker wraps the default webpack configuration along with some examples to illustrate how one might modify and extend the config for selected use cases.&lt;/p&gt;

&lt;p&gt;For readers who need to go even further, there&amp;#39;s no better place to go next than webpack&amp;#39;s &lt;a href="https://webpack.js.org/guides/getting-started/" target="_blank" rel="noopener noreferrer"&gt;Getting Started guide&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Understanding webpacker.yml</title>
    <link rel="alternate" href="/blog/how-to-use-webpacker-yml.html"/>
    <id>/blog/how-to-use-webpacker-yml.html</id>
    <published>2020-04-11T00:00:00+00:00</published>
    <updated>2020-04-11T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Though Webpacker adds a layer of "convention over configuration" in regards to webpack integration with Rails, the need for configuration remains. In this post, I'll describe the role of the &lt;code&gt;webpacker.yml&lt;/code&gt; file for Webpacker configuration.&lt;/p&gt;

&lt;p&gt;One of Webpacker...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Though Webpacker adds a layer of &amp;quot;convention over configuration&amp;quot; in regards to webpack integration with Rails, the need for configuration remains. In this post, I&amp;#39;ll describe the role of the &lt;code&gt;webpacker.yml&lt;/code&gt; file for Webpacker configuration.&lt;/p&gt;

&lt;p&gt;One of Webpacker&amp;#39;s primary roles is helping Rails communicate with webpack.&lt;/p&gt;

&lt;p&gt;Here are some things both Rails and webpack need to know:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;​&lt;em&gt;Where are the source files located?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What file types should be bundled?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What&amp;#39;s the destination for the bundle files?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should CSS be inserted dynamically via JavaScript or output as a separate file?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What port should the webpack-dev-server listen on in development?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;#39;s where &lt;code&gt;webpacker.yml&lt;/code&gt; comes in.&lt;/p&gt;

&lt;p&gt;This file is read both Ruby code supplied by the Webpacker gem in the Rails server process and the JavaScript process that generates the webpack configuration via the &lt;code&gt;@rails/webpacker&lt;/code&gt; NPM package. It supports a number of YAML entries which I&amp;#39;ll describe in more detail in the &lt;a href="#reference-guide"&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="creating-and-updating" class="title title-h3"&gt;
        &lt;a name="creating-and-updating" class="anchor" href="#creating-and-updating"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Creating and updating
      &lt;/h3&gt;
    
&lt;p&gt;Webpacker expects to find this file at &lt;code&gt;config/webpacker.yml&lt;/code&gt; within your Rails project. It is installed via the following command, provided by the Webpacker gem.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;rails webpacker:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The installer also generates environment-specific JavaScript files in &lt;code&gt;config/webpack/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;config
│   ...
├── webpack
│   ├── development.js
│   ├── environment.js
│   ├── production.js
│   └── test.js
└── webpacker.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When upgrading the Webpacker gem, it&amp;#39;s prudent to re-run the installer command to bring in new changes from the default &lt;code&gt;webpacker.yml&lt;/code&gt; template. Differences will have to be merged intentionally to avoid losing project-specific customizations.&lt;/p&gt;

      &lt;h3 id="limitations" class="title title-h3"&gt;
        &lt;a name="limitations" class="anchor" href="#limitations"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Limitations
      &lt;/h3&gt;
    
&lt;p&gt;The &lt;code&gt;webpacker.yml&lt;/code&gt; config file does not work with ERB as is typical with other Rails YAML config files, since the file must also be read in JavaScript. This may come as a surprise as indicated by recent issues, e.g. &lt;a href="https://github.com/rails/webpacker/issues/1615" target="_blank" rel="noopener noreferrer"&gt;#1615&lt;/a&gt;, &lt;a href="https://github.com/rails/webpacker/issues/956" target="_blank" rel="noopener noreferrer"&gt;#956&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One possible workaround is to use one of the supported &lt;a href="#env-var-overrides"&gt;ENV var overrides&lt;/a&gt;. It may also be an option to manipulate the JavaScript config in one of the &lt;code&gt;config/webpack&lt;/code&gt; JavaScript files—look for a future post on the subject.&lt;/p&gt;

      &lt;h3 id="reference-guide" class="title title-h3"&gt;
        &lt;a name="reference-guide" class="anchor" href="#reference-guide"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Reference guide
      &lt;/h3&gt;
    
&lt;p&gt;Following is reference guide for supported Webpacker configuration options as of Webpacker version &lt;code&gt;&amp;gt;= 4&lt;/code&gt;.&lt;/p&gt;

      &lt;h4 id="source_path" class="title title-h4"&gt;
        &lt;a name="source_path" class="anchor" href="#source_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        source_path
      &lt;/h4&gt;
    
&lt;p&gt;The primary subdirectory within your Rails application where your webpack source code is located. Your &lt;a href="#source_entry_path"&gt;&lt;code&gt;source_entry_path&lt;/code&gt;&lt;/a&gt; directory should be located here. You can add to the list of source paths using &lt;a href="#additional_paths"&gt;&lt;code&gt;additional_paths&lt;/code&gt;&lt;/a&gt;. Change this directory to something like &lt;code&gt;app/frontend&lt;/code&gt; if you use webpack for non-JavaScript assets like CSS, images, fonts, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;source_path: app/javascript
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="source_entry_path" class="title title-h4"&gt;
        &lt;a name="source_entry_path" class="anchor" href="#source_entry_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        source_entry_path
      &lt;/h4&gt;
    
&lt;p&gt;The subdirectory within &lt;a href="#source_path"&gt;&lt;code&gt;source_path&lt;/code&gt;&lt;/a&gt; where your webpack entry point files are located. For example, given a &lt;code&gt;source_path&lt;/code&gt; of &lt;code&gt;app/javascript&lt;/code&gt;, a &lt;code&gt;source_entry_path&lt;/code&gt; of &lt;code&gt;packs&lt;/code&gt;, and an entry point named &lt;code&gt;application.js&lt;/code&gt;, the path to this file from Rails root should be &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;source_entry_path: packs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;!!!Warning!!!&lt;/strong&gt; Only use this directory for webpack entry points! &lt;a href="https://rossta.net/blog/overpacking-a-common-webpacker-mistake.html" target="_blank" rel="noopener noreferrer"&gt;A common webpacker mistake&lt;/a&gt; is placing too many files in this directory.&lt;/p&gt;

      &lt;h4 id="additional_paths" class="title title-h4"&gt;
        &lt;a name="additional_paths" class="anchor" href="#additional_paths"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        additional_paths
      &lt;/h4&gt;
    
&lt;p&gt;This option expects an array of subdirectories where webpack should resolve modules. Given &lt;code&gt;additional_paths&lt;/code&gt; of &lt;code&gt;[&amp;quot;app/assets/images&amp;quot;]&lt;/code&gt;, webpack will lookup modules in your &lt;a href="#source_path"&gt;&lt;code&gt;source_path&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;node_modules&lt;/code&gt;, and &lt;code&gt;app/assets/images&lt;/code&gt;. When watching for file changes in development, webpack watched paths would include the &lt;code&gt;source_path&lt;/code&gt; and &lt;code&gt;additional_paths&lt;/code&gt;. The &lt;code&gt;additional_paths&lt;/code&gt; key replaces the &lt;code&gt;resolved_paths&lt;/code&gt; key in earlier versions of Webpacker, so this is a key you&amp;#39;ll want to rename when upgrading to Webpacker 5+.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;additional_paths:
  - app/assets/images
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="public_root_path" class="title title-h4"&gt;
        &lt;a name="public_root_path" class="anchor" href="#public_root_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        public_root_path
      &lt;/h4&gt;
    
&lt;p&gt;The primary destination within your Rail application where your compiled webpack assets are output. For most applications this should be &lt;code&gt;public&lt;/code&gt;, i.e., corresponding to &lt;code&gt;Rails.public_path&lt;/code&gt;. When &lt;a href="https://github.com/rails/webpacker/blob/master/docs/engines.md" target="_blank" rel="noopener noreferrer"&gt;configuring webpacker for a Rails engine&lt;/a&gt;, this value could be relative to the engine root, such as &lt;code&gt;../public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;public_root_path: public
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="public_output_path" class="title title-h4"&gt;
        &lt;a name="public_output_path" class="anchor" href="#public_output_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        public_output_path
      &lt;/h4&gt;
    
&lt;p&gt;The subdirectory destination within the &lt;a href="#public_output_path"&gt;&lt;code&gt;public_output_path&lt;/code&gt;&lt;/a&gt; where your compiled webpack assets are output. For example, given a &lt;code&gt;public_root_path&lt;/code&gt; of &lt;code&gt;public&lt;/code&gt; and a &lt;code&gt;public_output_path&lt;/code&gt; of &lt;code&gt;packs&lt;/code&gt;, the webpack manifest file, which maps canonical asset names to their fingerprinted output filenames, would be located at &lt;code&gt;public/packs/manifest.json&lt;/code&gt; within your Rails application.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;public_output_path: packs
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="cache_path" class="title title-h4"&gt;
        &lt;a name="cache_path" class="anchor" href="#cache_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        cache_path
      &lt;/h4&gt;
    
&lt;p&gt;The subdirectory where webpack, webpacker, babel, etc. will write cache files to enhance recompilation times. For example, given a &lt;code&gt;cache_path&lt;/code&gt; of &lt;code&gt;tmp/cache/webpacker&lt;/code&gt;, webpacker will write a SHA1 digest on each compilation of your source files in development to a file &lt;code&gt;tmp/cache/webpacker/last-compilation-digest-development&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;cache_path: tmp/cache/webpacker
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="webpack_compile_output" class="title title-h4"&gt;
        &lt;a name="webpack_compile_output" class="anchor" href="#webpack_compile_output"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        webpack_compile_output
      &lt;/h4&gt;
    
&lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to print webpack output do STDOUT or &lt;code&gt;false&lt;/code&gt; to silence. Unless you&amp;#39;re extremely confident in what you&amp;#39;re doing, the only correct value for this setting is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;webpack_compile_output: true
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="cache_manifest" class="title title-h4"&gt;
        &lt;a name="cache_manifest" class="anchor" href="#cache_manifest"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        cache_manifest
      &lt;/h4&gt;
    
&lt;p&gt;The webpack &lt;code&gt;manifest.json&lt;/code&gt; is one of the crucial files in output webpacker asset compilation. It provides a mapping of canonical asset names to their fingerprinted filenames, e.g. &lt;code&gt;&amp;quot;application.js&amp;quot;: &amp;quot;/packs/js/application-abcdefg12345.js&amp;quot;&lt;/code&gt;. Rails uses the manifest to lookup the location of assets on disk. The &lt;code&gt;cache_manifest&lt;/code&gt; setting simply tells Rails whether we want to maintain the parsed manifest in Ruby memory. Set this to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt; where you&amp;#39;ll be making frequent changes to your source code; &lt;code&gt;true&lt;/code&gt; in all other environments.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;cache_manifest: true
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="extract_css" class="title title-h4"&gt;
        &lt;a name="extract_css" class="anchor" href="#extract_css"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        extract_css
      &lt;/h4&gt;
    
&lt;p&gt;Given a webpack bundle &lt;code&gt;application.js&lt;/code&gt; that imports CSS, webpacker can be configured to emit the compiled CSS in one of two ways: 1) extracted as a separate file called &lt;code&gt;application.css&lt;/code&gt; as you might expect from the Rails asset pipeline, or 2) as a JavaScript module that webpack will insert as CSS into the page dynamically when loaded in the browser. &lt;code&gt;extract_css: false&lt;/code&gt; is helpful for development; most applications will want to set &lt;code&gt;extract_css: true&lt;/code&gt; in production.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;extract_css: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; With &lt;code&gt;extract_css: true&lt;/code&gt;, you must use &lt;code&gt;stylesheet_pack_tag&lt;/code&gt;, i.e, &lt;code&gt;&amp;lt;%= stylesheet_pack_tag &amp;quot;application&amp;quot; %&amp;gt;&lt;/code&gt;, in your Rails view. This can be easy to miss in deployed environments after using &lt;code&gt;extract_css: false&lt;/code&gt; for local development.&lt;/p&gt;

      &lt;h4 id="static_assets_extensions" class="title title-h4"&gt;
        &lt;a name="static_assets_extensions" class="anchor" href="#static_assets_extensions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        static_assets_extensions
      &lt;/h4&gt;
    
&lt;p&gt;Provide a list of file extensions, such as &lt;code&gt;.jpeg&lt;/code&gt;, &lt;code&gt;.png&lt;/code&gt;, &lt;code&gt;.woff&lt;/code&gt;, that webpack should emit as separate files, i.e, &lt;code&gt;import &amp;quot;../my-image.jpg&amp;quot;&lt;/code&gt; will result in webpack emitting a file of that name instead of loading it in memory as a JavaScript module.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;static_file_extensions:
    - .jpg
    - .jpeg
    # ...
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="extensions" class="title title-h4"&gt;
        &lt;a name="extensions" class="anchor" href="#extensions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        extensions
      &lt;/h4&gt;
    
&lt;p&gt;Provide a list of file extensions that webpack will recognize when searching for imported files to add to the dependency graph.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;extensions:
  - .js
  - .sass
  - .scss
  - .jsx
  - .vue
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="compile" class="title title-h4"&gt;
        &lt;a name="compile" class="anchor" href="#compile"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        compile
      &lt;/h4&gt;
    
&lt;p&gt;Set this to &lt;code&gt;true&lt;/code&gt; only when you want Rails to execute a shell command to compile webpack dynamically when attempting to serve a webpack asset or bundle. Set to &lt;code&gt;false&lt;/code&gt; when webpack assets should be precompiled, as in &lt;code&gt;production&lt;/code&gt; or when instead using the &lt;code&gt;webpack-dev-server&lt;/code&gt; to handle webpack asset requests, as in &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;compile: false
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="dev_server" class="title title-h4"&gt;
        &lt;a name="dev_server" class="anchor" href="#dev_server"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        dev_server
      &lt;/h4&gt;
    
&lt;p&gt;This config contains a set of key-value pairs that correspond to a subset of the &lt;code&gt;webpack-dev-server&lt;/code&gt; configuration &lt;a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener noreferrer"&gt;outlined in the webpack docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rails only needs to know the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt; values to proxy requests to the &lt;code&gt;webpack-dev-server&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt;. Other &lt;code&gt;dev_server&lt;/code&gt; config values may be set in either &lt;code&gt;webpacker.yml&lt;/code&gt; or in the webpack config exported from &lt;code&gt;config/webpack/development.js&lt;/code&gt;. Make sure at least the following values are set in &lt;code&gt;webpacker.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  dev_server:
    https: false
    host: localhost
    port: 3035
    public: localhost:3035
    # ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable auto-recompile when source files are changed:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  dev_server:
    # ...
    inline: true
    # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable &lt;a href="https://webpack.js.org/concepts/hot-module-replacement/" target="_blank" rel="noopener noreferrer"&gt;hot-module replacement&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  extract_css: false # to allow HMR for CSS

  dev_server:
    # ...
    inline: true
    hmr: true
    # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the &lt;a href="https://github.com/rails/webpacker/blob/master/docs/webpack-dev-server.md" target="_blank" rel="noopener noreferrer"&gt;Webpacker docs&lt;/a&gt; and &lt;a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener noreferrer"&gt;webpack docs&lt;/a&gt; for more info.&lt;/p&gt;

      &lt;h3 id="env-var-overrides" class="title title-h3"&gt;
        &lt;a name="env-var-overrides" class="anchor" href="#env-var-overrides"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        ENV var overrides
      &lt;/h3&gt;
    
&lt;p&gt;Some Rails configuration can be overriden via ENV vars. This is especially helpful to workaround certain &lt;a href="#limitations"&gt;limitations&lt;/a&gt;. Many of the &lt;code&gt;dev_server&lt;/code&gt; options can be specified in upcase with the prefix &lt;code&gt;WEBPACKER_DEV_SERVER_&lt;/code&gt;, as illustrated below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;WEBPACKER_DEV_SERVER_HOST=localhost \
WEBPACKER_DEV_SERVER_PORT=8765 \
WEBPACKER_DEV_SERVER_PUBLIC=localhost:8765 \
./bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other supported Webpacker ENV vars include:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;WEBPACKER_NODE_MODULES_BIN_PATH
WEBPACKER_RELATIVE_URL_ROOT
WEBPACKER_ASSET_HOST
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="feedback" class="title title-h3"&gt;
        &lt;a name="feedback" class="anchor" href="#feedback"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Feedback
      &lt;/h3&gt;
    
&lt;p&gt;Did you find this guide useful? Please &lt;a href="https://twitter.com/intent/tweet?text=How+to+use+webpacker.yml%3A+An+unofficial+guide+to+Rails+Webpacker+YAML+configuration&amp;amp;url=https%3A%2F%2Frossta.net%2Fblog%2Fhow-to-use-webpacker-yml.html" target="_blank" rel="noopener noreferrer"&gt;share it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just like with the official Rails guides, you&amp;#39;re encouraged to help improve the quality of this one. &lt;a href="https://github.com/rossta/rossta.github.com/blob/develop/source/blog/2020-04-01-configuring-webpacker.html.md" target="_blank" rel="noopener noreferrer"&gt;Please contribute&lt;/a&gt; if you see any typos or factual errors.&lt;/p&gt;
</content>
  </entry>
</feed>
