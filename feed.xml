<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2020-03-26T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>jQuery plugins in Webpack without jQuery</title>
    <link rel="alternate" href="/blog/you-might-not-need-jquery-with-webpack.html"/>
    <id>/blog/you-might-not-need-jquery-with-webpack.html</id>
    <published>2020-03-26T00:00:00+00:00</published>
    <updated>2020-03-26T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Have you seen this console error while trying to adopt Webpack?&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;Uncaught TypeError: $(...).myJqueryPlugin is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you installed it correctly, there could be a few explanations. In this post, we'll look one possible reason: with...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Have you seen this console error while trying to adopt Webpack?&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;Uncaught TypeError: $(...).myJqueryPlugin is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you installed it correctly, there could be a few explanations. In this post, we&amp;#39;ll look one possible reason: with Webpack, your jQuery plugin &lt;em&gt;might&lt;/em&gt; not need jQuery.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using Webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="example-the-flickity-plugin" class="title title-h3"&gt;
        &lt;a name="example-the-flickity-plugin" class="anchor" href="#example-the-flickity-plugin"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Example: the Flickity plugin
      &lt;/h3&gt;
    
&lt;p&gt;To take advantage of this distinction, more plugins are being written without the assumption of jQuery as a dependency, but with the ability to use a plugin to support (what&amp;#39;s becoming) the legacy pattern.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example. The popular jQuery plugin &lt;a href="https://flickity.metafizzy.co/" target="_blank" rel="noopener noreferrer"&gt;Flickity&lt;/a&gt; makes it easy to construct &amp;quot;responsive, flickable carousels&amp;quot; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;$(&amp;#39;.main-carousel&amp;#39;).flickity({
  // options
  cellAlign: &amp;#39;left&amp;#39;,
  contain: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that works fine. Except, &lt;code&gt;Flickity&lt;/code&gt; is not really a just a jQuery plugin. More on that later.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have a Rails application that we&amp;#39;ve already set up to run Webpack(er) (or just plain Webpack) for compiling JavaScript source files for the browser. To add Flickity, we installed it via yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ yarn add flickity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our module-based Webpack build, the usage is instead ideally:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/src/carousel.js

import Flickity from &amp;#39;flickity&amp;#39;;

const flickity = new Flickity(&amp;#39;.main-carousel&amp;#39;, {
  // options
  cellAlign: &amp;#39;left&amp;#39;,
  contain: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this plugin, jQuery is not required. How do we know that though?&lt;/p&gt;

      &lt;h3 id="package-perusal" class="title title-h3"&gt;
        &lt;a name="package-perusal" class="anchor" href="#package-perusal"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Package perusal
      &lt;/h3&gt;
    
&lt;p&gt;The first place to check is the documentation. As is the case for Flickty, there is a great documentation site with examples for both jQuery and vanilla JS initialization.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a screenshot from the &lt;a href="https://flickity.metafizzy.co/" target="_blank" rel="noopener noreferrer"&gt;Flickity homepage&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/flickity-documentation-example.png" alt="Flickity documentation example" /&gt;&lt;/p&gt;

&lt;p&gt;This is a great hint that we can import the &lt;code&gt;Flickity&lt;/code&gt; constructor without requiring jQuery on the page or in our build.&lt;/p&gt;

&lt;p&gt;If that&amp;#39;s still not enough, the next place to look is the library&amp;#39;s &lt;a href="https://nodesource.com/blog/the-basics-of-package-json-in-node-js-and-npm/#themainproperty" target="_blank" rel="noopener noreferrer"&gt;package.json &lt;code&gt;main&lt;/code&gt; property&lt;/a&gt;. This property describes the &lt;em&gt;entry point&lt;/em&gt; to the package, meaning this is the file that&amp;#39;s loaded when &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; statement is used to access the module.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an excerpt from Flickity&amp;#39;s &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;flickity&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;js/index.js&amp;quot;,
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is saying thath the file &lt;code&gt;path/to/flickity/js/index.js&lt;/code&gt; is the entry point. On my machine from the root of my project, I can open that file at &lt;code&gt;./node_modules/flickity/js/index.js&lt;/code&gt; or on GitHub (&lt;a href="https://github.com/metafizzy/flickity/blob/c67b28accbe0642352c706cb470a8f607fa5861b/js/index.js" target="_blank" rel="noopener noreferrer"&gt;source&lt;/a&gt;) (slightly modified for this article).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( function( window, factory ) {
  if ( typeof define == &amp;#39;function&amp;#39; &amp;amp;&amp;amp; define.amd ) {
    // AMD
    define( [ &amp;#39;./flickity&amp;#39;, &amp;#39;./drag&amp;#39;, &amp;#39;./prev-next-button&amp;#39;, &amp;#39;./page-dots&amp;#39;, &amp;#39;./player&amp;#39;, &amp;#39;./add-remove-cell&amp;#39;, &amp;#39;./lazyload&amp;#39; ], factory );
  } else if ( typeof module == &amp;#39;object&amp;#39; &amp;amp;&amp;amp; module.exports ) {
    // CommonJS
    module.exports = factory( require(&amp;#39;./flickity&amp;#39;), require(&amp;#39;./drag&amp;#39;), require(&amp;#39;./prev-next-button&amp;#39;), require(&amp;#39;./page-dots&amp;#39;), require(&amp;#39;./player&amp;#39;), require(&amp;#39;./add-remove-cell&amp;#39;), require(&amp;#39;./lazyload&amp;#39;));
  }
})( window, function factory( Flickity ) {
  return Flickity;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see this exports a module, either through the &lt;code&gt;define&lt;/code&gt; function, for runtimes that support &lt;a href="https://requirejs.org/docs/whyamd.html" target="_blank" rel="noopener noreferrer"&gt;Asynchronous Module Definition (AMD)&lt;/a&gt; format, or the &lt;code&gt;require&lt;/code&gt; function, for runtimes that support &lt;a href="https://nodejs.org/docs/latest/api/modules.html" target="_blank" rel="noopener noreferrer"&gt;CommonJS&lt;/a&gt; format. Webpack supports both.&lt;/p&gt;

      &lt;h3 id="jquery-not-required" class="title title-h3"&gt;
        &lt;a name="jquery-not-required" class="anchor" href="#jquery-not-required"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        jQuery not required
      &lt;/h3&gt;
    
&lt;p&gt;Note also that this file does not require the &lt;code&gt;&amp;#39;jquery&amp;#39;&lt;/code&gt; package. An interesting consequence of this is that it&amp;#39;s not even possible to use Flickity with jQuery (at least via the NPM package alone). This recently came up in a &lt;a href="https://github.com/rails/webpacker/issues/2456" target="_blank" rel="noopener noreferrer"&gt;GitHub issue for the Webpacker project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, the following code with Webpack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/src/carousel.js
import &amp;#39;jquery&amp;#39;
import &amp;#39;flickity&amp;#39;

$(&amp;#39;.main-carousel&amp;#39;).flickity({
  // options
  cellAlign: &amp;#39;left&amp;#39;,
  contain: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would result in this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;Uncaught TypeError: $(...).flickity is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This project can produce a separate distribution from the package available via NPM. It takes the form of a file, here called &lt;a href="https://github.com/metafizzy/flickity/blob/c67b28accbe0642352c706cb470a8f607fa5861b/dist/flickity.pkgd.js" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;flickity.pkgd.js&lt;/code&gt;&lt;/a&gt; that is intended for the browser via a script tag. This file contains a &amp;quot;jQuery-fied&amp;quot; version of the underlying vanilla JS constructor which makes it possible to use with jQuery in the browser. For more details, see the &lt;a href="https://github.com/desandro/jquery-bridget" target="_blank" rel="noopener noreferrer"&gt;jquery-bridget&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;A similar approach exists in other plugins including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/desandro/masonry" target="_blank" rel="noopener noreferrer"&gt;masonry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metafizzy/infinite-scroll" target="_blank" rel="noopener noreferrer"&gt;infinite-scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metafizzy/isotope" target="_blank" rel="noopener noreferrer"&gt;isotope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/desandro/draggabilly" target="_blank" rel="noopener noreferrer"&gt;draggabilly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main takeaway here: if the library can be initialized without jQuery, there&amp;#39;s not much reason to use jQuery for that plugin in the first place.&lt;/p&gt;

      &lt;h3 id="conclusion" class="title title-h3"&gt;
        &lt;a name="conclusion" class="anchor" href="#conclusion"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Conclusion
      &lt;/h3&gt;
    
&lt;p&gt;Unfortunately, jQuery plugins come in so many different flavors so not all of them can be used &lt;em&gt;without&lt;/em&gt; jQuery. In future posts, I&amp;#39;ll discuss other techniques you can use to make jQuery work with Webpack.&lt;/p&gt;

&lt;p&gt;If you find yourself in this position, make sure to understand the capability of the plugins you&amp;#39;re using. Ask &amp;quot;do I have to use this plugin with jQuery?&amp;quot;, consult the documentation and/or browse the source code as described in the article. If you&amp;#39;re lucky, you may find they can work in either context such that you might not need jQuery at all.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>25 reasons to switch to Webpack(er)</title>
    <link rel="alternate" href="/blog/reasons-to-switch-to-webpacker.html"/>
    <id>/blog/reasons-to-switch-to-webpacker.html</id>
    <published>2020-03-02T00:00:00+00:00</published>
    <updated>2020-03-02T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;​I've been getting this question lately in some form or another:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is Webpack and Webpacker worth the hassle?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's a good question, but my short answer is &lt;em&gt;yes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Given the sharp rise of mindshare in the JavaScript community in recent years, there has...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;​I&amp;#39;ve been getting this question lately in some form or another:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is Webpack and Webpacker worth the hassle?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a good question, but my short answer is &lt;em&gt;yes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Given the sharp rise of mindshare in the JavaScript community in recent years, there has been a great deal of innovation in tooling, development experience, and optimization for frontend development.&lt;/p&gt;

&lt;p&gt;Rails was once at the forefront—the Rails asset pipeline was a huge leap forward when it was released—but it hasn&amp;#39;t kept up in this department. Outsourcing JavaScript and CSS dependency management and asset bundling is smart economics at this point.&lt;/p&gt;

&lt;p&gt;In this post, I will elaborate on why I think think it&amp;#39;s a good idea to make the switch. But this will assume some prerequisites; in other words, we&amp;#39;ll first consider why you might NOT want to switch and instead stick with the Rails asset pipeline.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using Webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="why-not-switch-" class="title title-h3"&gt;
        &lt;a name="why-not-switch-" class="anchor" href="#why-not-switch-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why not switch?
      &lt;/h3&gt;
    
&lt;p&gt;If you&amp;#39;re a Rails dev and your app is currently using the Rails asset pipeline, here are a few reasons why Webpack and Webpacker might not be a good fit for you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don&amp;#39;t have the right application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your application doesn&amp;#39;t use much JavaScript, it&amp;#39;s probably not worth the switch. Do you spend less than 5-10% of your development time working on JavaScript? Your app might not warrant a more substantial tool like Webpack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don&amp;#39;t have the time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll be the first to admit that adopting Webpack for the first time requires patience. Things work differently than with Sprockets. You may need to invest time learning a new paradigm. Webpack and NPM dependencies are upgraded at a rapid pace, so you need to keep up with upgrades. You might also have to understand how JavaScript modules work—good news; those skills are transferrable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don&amp;#39;t have the right mindset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, Webpack is complex. Plenty of developers love to complain about this fact. If you think you&amp;#39;re one of those developers, you probably won&amp;#39;t enjoy the process of adopting Webpack. A lot of frustration can be eased through education. Make sure you&amp;#39;ve got a positive attitude going in.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;All that said, given a little time, the need, and the right mindset, you&amp;#39;ll be successful upgrading to Webpacker. Here&amp;#39;s a list of ways you&amp;#39;ll benefit.&lt;/p&gt;

      &lt;h3 id="1-webpacker-is-the-future-of-rails" class="title title-h3"&gt;
        &lt;a name="1-webpacker-is-the-future-of-rails" class="anchor" href="#1-webpacker-is-the-future-of-rails"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        1. Webpacker is the future of Rails
      &lt;/h3&gt;
    
&lt;p&gt;Webpacker is now the default JavaScript compiler for new Rails apps. Rails 6 apps will still include both Sprockets for managing CSS and images, but JavaScript dependencies are meant to be bundled by Webpacker. The Rails defaults fall in line with how Basecamp builds web applications, and it may benefit your team to &amp;quot;go with the herd&amp;quot; to stay closer to Rails edge and attract candidates who are looking to work with more advanced tools.&lt;/p&gt;

      &lt;h3 id="2-sprockets-is-dead-long-live-sprockets" class="title title-h3"&gt;
        &lt;a name="2-sprockets-is-dead-long-live-sprockets" class="anchor" href="#2-sprockets-is-dead-long-live-sprockets"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        2. Sprockets is dead; Long live Sprockets
      &lt;/h3&gt;
    
&lt;p&gt;Sprockets development may have slowed in recent years, but it&amp;#39;s not going away anytime soon. Sprockets version 4 was recently released, thanks to hard work led by Richard Schneeman. The default Rails setup encourages developers to use both Webpacker (for JavaScript compilation) and Sprockets (for CSS and images) side-by-side.&lt;/p&gt;

&lt;p&gt;The ability to use both compilers in the same application is a real advantage for teams making the switch; this opens the door to an iterative migration, which may be desirable to de-risk the transition.&lt;/p&gt;

      &lt;h3 id="3-it-will-change-the-way-you-write-javascript-for-the-better" class="title title-h3"&gt;
        &lt;a name="3-it-will-change-the-way-you-write-javascript-for-the-better" class="anchor" href="#3-it-will-change-the-way-you-write-javascript-for-the-better"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        3. It will change the way you write JavaScript for the better
      &lt;/h3&gt;
    
&lt;p&gt;Prior to Rails support for Webpack through Webpacker, most of the Rails apps I&amp;#39;ve worked on or seen either directly on GitHub or implicitly through tutorials or presentations, have fallen into one of the following categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;jQuery spaghetti&lt;/li&gt;
&lt;li&gt;Bespoke module implementation&lt;/li&gt;
&lt;li&gt;Combination of 1. and 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What&amp;#39;s wrong with this approach?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accidentally leaking JavaScript into the global scope&lt;/li&gt;
&lt;li&gt;Difficult to share code&lt;/li&gt;
&lt;li&gt;Order-dependence when requiring code&lt;/li&gt;
&lt;li&gt;Very difficult to understand the implicit dependency graph&lt;/li&gt;
&lt;li&gt;Very difficult to load code asynchronously&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Writing your JavaScript source code within a module system allows you to take advantage of module scope within each file, i.e., no accidental leaking of code into the global scope. No more bespoke module implementations.&lt;/p&gt;

      &lt;h3 id="4-enjoy-the-power-of-es-modules" class="title title-h3"&gt;
        &lt;a name="4-enjoy-the-power-of-es-modules" class="anchor" href="#4-enjoy-the-power-of-es-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        4. Enjoy the power of ES modules
      &lt;/h3&gt;
    
&lt;p&gt;There seems to be little doubt now that ES modules are the future of JavaScript. As the new EcmaScript standard, eventually, we&amp;#39;ll be able to use ES modules in browser and server-side runtimes, like Node.js. With support for both synchronous and asynchronous imports, they may eventually phase out early module specifications, like CommonJS and AMD altogether.&lt;/p&gt;

&lt;p&gt;Of note, ES modules employ live bindings, meaning when an exported module changes a value, it can be read in the importing module. In addition to being useful potentially for application logic, this feature allows ES modules to support cyclic dependencies.&lt;/p&gt;

&lt;p&gt;For more on how ES modules work, check out &lt;a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/" target="_blank" rel="noopener noreferrer"&gt;this cartoon deep dive&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="5-javascript_framework-not-required" class="title title-h3"&gt;
        &lt;a name="5-javascript_framework-not-required" class="anchor" href="#5-javascript_framework-not-required"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        5. $JAVASCRIPT_FRAMEWORK not required
      &lt;/h3&gt;
    
&lt;p&gt;Contrary to popular belief, you don&amp;#39;t need to use a popular frontend framework, React, Vue, Angular, or Svelte, to take advantage of what Webpack has to offer. It works just great with &amp;quot;vanilla JS&amp;quot; or even jQuery-based apps.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/no-framework-required.png" alt="Webpack and JS" /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t believe single-page applications are worth the extra effort and complexity for the majority of CRUD-based apps—the Rails sweet-spot. Employing &amp;quot;JavaScript sprinkles&amp;quot; still makes a lot of sense in 2020, and Webpack should be considered an advantage.&lt;/p&gt;

      &lt;h3 id="6-take-advantage-of-alternative-file-structures" class="title title-h3"&gt;
        &lt;a name="6-take-advantage-of-alternative-file-structures" class="anchor" href="#6-take-advantage-of-alternative-file-structures"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        6. Take advantage of alternative file structures
      &lt;/h3&gt;
    
&lt;p&gt;Webpack opens the door to a great deal of customization of how JavaScript source files are structured. Perhaps the most popular JavaScript framework, React.js, introduced us to JSX, which allows developers to challenge the old notion of separation of concerns to write HTML-like JavaScript code to co-locate HTML and JavaScript source for components.&lt;/p&gt;

&lt;p&gt;Vue.js is famous, in part, for its support for Single File Components, which allows developers to co-locate HTML, CSS, and JavaScript as separate portions of a single file.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="vue"&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;Hello, {{ name }}!&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      name: &amp;quot;World&amp;quot;
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
div {
  background-color: aliceblue;
  padding: 1em;
  font-size: 2em;
  text-align: center;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not (to my knowledge) an approach that would be easily handled in the Rails asset pipeline.&lt;/p&gt;

      &lt;h3 id="7-you-39-ll-have-a-better-way-to-manage-dependencies" class="title title-h3"&gt;
        &lt;a name="7-you-39-ll-have-a-better-way-to-manage-dependencies" class="anchor" href="#7-you-39-ll-have-a-better-way-to-manage-dependencies"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        7. You&amp;#39;ll have a better way to manage dependencies
      &lt;/h3&gt;
    
&lt;p&gt;I&amp;#39;ve always found Rails &amp;quot;asset gems&amp;quot; to be a significant pain. In most cases, you can replace your asset gems with Node Package Manager, or NPM, dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/npm-logo.png" alt="NPM logo" /&gt;&lt;/p&gt;

&lt;p&gt;NPM has become the primary repository for distributing open-source JavaScript packages. Although initially designed for packages intended to be used with the Node.js runtime, over time, it has also become the default for browser-based packages. This means that both libraries that run on Node.js, like Webpack, and libraries in the browser, like React, Vue, and jQuery, can all be distributed over NPM. Using NPM is a vast improvement over the typical for sharing JavaScript and other assets for the Rails asset pipeline. One significant point of friction with the latter approach is having to maintain both a Ruby version along with the version of the packaged assets. This technique has always felt cumbersome and bolted on.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s worth mentioning that you can still try managing assets via NPM and make them available to the Rails asset pipeline by adding node_modules to the Sprockets load path. Again, this approach is cumbersome and can potentially adversely affect build times depending on scope.&lt;/p&gt;

      &lt;h3 id="8-stop-using-jquery-plugins-if-you-want-" class="title title-h3"&gt;
        &lt;a name="8-stop-using-jquery-plugins-if-you-want-" class="anchor" href="#8-stop-using-jquery-plugins-if-you-want-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        8. Stop using jQuery plugins (if you want)
      &lt;/h3&gt;
    
&lt;p&gt;One benefit of jQuery plugins before the adoption of modules is that it provided a means to add functionality without polluting the global scope. With a proper module system, as you&amp;#39;d get with Webpack, you need not attach functionality to the jQuery instance to reference it across the application.&lt;/p&gt;

&lt;p&gt;Consider the touch-responsive carousel plugin &lt;a href="https://flickity.metafizzy.co/" target="_blank" rel="noopener noreferrer"&gt;Flickity&lt;/a&gt;. In the Rails asset pipeline, you might use it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;//= require flickity

$(function () {
  $(&amp;#39;.main-carousel&amp;#39;).flickity({
    contain: true
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flickity is also intended to work without jQuery, meaning you can implement the Flickity module in a Webpack environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import Flickity from &amp;#39;flickity&amp;#39;

document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, () =&amp;gt; {
  const elem = document.querySelector(&amp;#39;.main-carousel&amp;#39;);
  const flkty = new Flickity(elem, {
    contain: true
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can leave the jQuery out of this interaction altogether.&lt;/p&gt;

      &lt;h3 id="9-compile-es2015-syntax-to-es5-with-babel" class="title title-h3"&gt;
        &lt;a name="9-compile-es2015-syntax-to-es5-with-babel" class="anchor" href="#9-compile-es2015-syntax-to-es5-with-babel"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        9. Compile ES2015+ syntax to ES5 with Babel
      &lt;/h3&gt;
    
&lt;p&gt;CoffeeScript was popular when it was first introduced because it offered a cleaner, Ruby-ish syntax. Many of these ideas and more have made there was into recent versions of EcmaScript. I love writing JavaScript in ES syntax even more than I loved CoffeeScript.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a shortlist of just some of the great ways the language is evolving:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ES2015+ is a superset of ES5, so all your current ES5 code is also ES2015+ code&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;var&lt;/code&gt; with scope-constrained &lt;code&gt;let/const&lt;/code&gt; &lt;a href="https://exploringjs.com/es6/ch_variables.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_variables.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Destructuring, Replace &lt;code&gt;arguments&lt;/code&gt; with ...rest parameters, &lt;a href="https://exploringjs.com/es6/ch_destructuring.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_destructuring.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;concat()&lt;/code&gt; with (...) spread operator&lt;/li&gt;
&lt;li&gt;Replace constructors with classes &lt;a href="https://exploringjs.com/es6/ch_classes.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Arrow functions &lt;a href="https://exploringjs.com/es6/ch_arrow-functions.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_arrow-functions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New OOP features &lt;a href="https://exploringjs.com/es6/ch_oop-besides-classes.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_oop-besides-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replace function expressions in object literals to method definitions &lt;a href="https://exploringjs.com/es6/ch_oop-besides-classes.html#sec_new-features-obj-literals" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_oop-besides-classes.html#sec_new-features-obj-literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New array and string methods, new number and Math features

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/es6/ch_arrays.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_arrays.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/es6/ch_strings.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_strings.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/es6/ch_numbers.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_numbers.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New primitive type Symbol &lt;a href="https://exploringjs.com/es6/ch_symbols.html#sec_overview-symbols" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_symbols.html#sec_overview-symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Template literals &lt;a href="https://exploringjs.com/es6/ch_template-literals.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_template-literals.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generators &lt;a href="https://exploringjs.com/es6/ch_generators.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_generators.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Proper Maps and Sets &lt;a href="https://exploringjs.com/es6/ch_maps-sets.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_maps-sets.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;for-of loop &lt;a href="https://exploringjs.com/es6/ch_for-of.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_for-of.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Promises &lt;a href="https://exploringjs.com/es6/ch_promises.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_promises.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Proxies, for metaprogramming &lt;a href="https://exploringjs.com/es6/ch_proxies.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_proxies.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="10-opt-in-out-of-experimental-es-features" class="title title-h3"&gt;
        &lt;a name="10-opt-in-out-of-experimental-es-features" class="anchor" href="#10-opt-in-out-of-experimental-es-features"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        10. Opt-in/out of experimental ES features
      &lt;/h3&gt;
    
&lt;p&gt;The Babel integration allows developers to take advantage of next-level and experimental EcmaScript syntax.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;async/await &lt;a href="https://exploringjs.com/es2016-es2017/ch_async-functions.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es2016-es2017/ch_async-functions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;decorators &lt;a href="https://www.simplethread.com/understanding-js-decorators/" target="_blank" rel="noopener noreferrer"&gt;https://www.simplethread.com/understanding-js-decorators/&lt;/a&gt;, &lt;a href="https://www.sitepoint.com/javascript-decorators-what-they-are/" target="_blank" rel="noopener noreferrer"&gt;https://www.sitepoint.com/javascript-decorators-what-they-are/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;spread operator for object literals &lt;a href="https://exploringjs.com/es2018-es2019/ch_rest-spread-properties.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es2018-es2019/ch_rest-spread-properties.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="11-target-specific-browser-versions" class="title title-h3"&gt;
        &lt;a name="11-target-specific-browser-versions" class="anchor" href="#11-target-specific-browser-versions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        11. Target specific browser versions
      &lt;/h3&gt;
    
&lt;p&gt;Imagine how great it would be if you could code-ify your application&amp;#39;s supported browsers? Well, with Webpacker, you can.&lt;/p&gt;

&lt;p&gt;Babel integrates with a package called browserlist, which allows projects to codify the browsers they wish to target with their transpiled code. Developers set their version lists using queries, which can target specific browser versions or use semantics like &lt;code&gt;last 2 versions&lt;/code&gt; to avoid updating versions manually. Browserslist uses data provided by &lt;a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer"&gt;Can I Use&lt;/a&gt; to determine browser support for newer frontend APIs.&lt;/p&gt;

&lt;p&gt;Now we can write future JS syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const array = [1, 2, 3];
const [first, second] = array;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Babel will compile it for Edge 16:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const array = [1, 2, 3];
const first = array[0],
      second = array[1];
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Browserlist: &lt;a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener noreferrer"&gt;https://github.com/browserslist/browserslist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="12-polyfill-newer-browser-apis" class="title title-h3"&gt;
        &lt;a name="12-polyfill-newer-browser-apis" class="anchor" href="#12-polyfill-newer-browser-apis"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        12. Polyfill newer browser APIs
      &lt;/h3&gt;
    
&lt;p&gt;Building on number 11, Webpacker&amp;#39;s use of &lt;code&gt;@babel/preset-env&lt;/code&gt; to makes it possible to specify more easily what new JavaScript APIs to polyfill automatically.&lt;/p&gt;

&lt;p&gt;It works by inserting this code at the top of your dependency graph:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import &amp;#39;core-js/stable&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;chrome 71&lt;/code&gt; is targeted, then this will get replaced with:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import &amp;quot;core-js/modules/es.array.unscopables.flat&amp;quot;
import &amp;quot;core-js/modules/es.array.unscopables.flat-map&amp;quot;
import &amp;quot;core-js/modules/es.object.from-entries&amp;quot;
import &amp;quot;core-js/modules/web.immediate&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can start removing those conditionals you&amp;#39;ve been adding to test for browser support.&lt;/p&gt;

      &lt;h3 id="13-use-typescript" class="title title-h3"&gt;
        &lt;a name="13-use-typescript" class="anchor" href="#13-use-typescript"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        13. Use TypeScript
      &lt;/h3&gt;
    
&lt;p&gt;&lt;a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer"&gt;TypeScript&lt;/a&gt; has gained in popularity in recent years.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/typescript-superset.png" alt="TypeScript is a superset of JavaScript" /&gt;&lt;/p&gt;

&lt;p&gt;It brings static-typing to frontend development, allowing developers to catch errors more efficiently and productivity gains via integrations with supporting JavaScript IDEs, like VS Code. It&amp;#39;s even possible to adopt TypeScript iteratively; as a superset of plain JavaScript, any valid JavaScript program is a valid TypeScript program. Webpacker provides an installer to make it easier to add to your Rails project.&lt;/p&gt;

      &lt;h3 id="14-unlock-powerful-new-tools" class="title title-h3"&gt;
        &lt;a name="14-unlock-powerful-new-tools" class="anchor" href="#14-unlock-powerful-new-tools"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        14. Unlock powerful new tools
      &lt;/h3&gt;
    
&lt;p&gt;The Webpack compilation and build process provide a large number of hooks to allow behavior modification at nearly any stage. Here is a shortlist of ways you can extend Webpack to meet the needs of your system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unit testing through the Rails asset pipeline has always felt like jumping through hoops; now, take your pick of JavaScript unit testing tools like &lt;a href="https://mochajs.org/" target="_blank" rel="noopener noreferrer"&gt;Mocha&lt;/a&gt; or &lt;a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer"&gt;Jest&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Integrate with &lt;a href="https://eslint.org/" target="_blank" rel="noopener noreferrer"&gt;eslint&lt;/a&gt; to standardize code style and syntax and automate fixes&lt;/li&gt;
&lt;li&gt;Add a plugin to analyze the size and contents of your bundles, e.g. &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer"&gt;WebpackBundlerAnalyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a loader to parse your Rails i18n yaml files and provide them as JSON to your Webpack JavaScript modules&lt;/li&gt;
&lt;li&gt;Add a plugin to produce &amp;quot;unfingerprinted&amp;quot; clones of your bundles, as with &lt;a href="https://github.com/alexspeller/non-stupid-digest-assets" target="_blank" rel="noopener noreferrer"&gt;https://github.com/alexspeller/non-stupid-digest-assets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of my favorite Webpack-friendly addons is &lt;a href="https://storybook.js.org" target="_blank" rel="noopener noreferrer"&gt;Storybook&lt;/a&gt;. It&amp;#39;s a newer tool that allows developers to build components in isolation from the Rails server. This is a great way to represent your UI in various states all in one place without having to mess with real data in your development environment.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/storybook-logo.png" alt="Storybook logo" /&gt;&lt;/p&gt;

      &lt;h3 id="15-modify-source-code-programmatically" class="title title-h3"&gt;
        &lt;a name="15-modify-source-code-programmatically" class="anchor" href="#15-modify-source-code-programmatically"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        15. Modify source code programmatically
      &lt;/h3&gt;
    
&lt;p&gt;Webpack provides some configuration options that make it easy to modify the output of a module. For example, to &amp;quot;provide&amp;quot; the jQuery import to all modules in your source files, you can add the &lt;code&gt;ProvidePlugin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This becomes important if you&amp;#39;re attempting to upgrade a legacy Rails app to Webpack. Many older jQuery plugins, for example, assume jQuery is available in the global scope. The &lt;code&gt;ProvidePlugin&lt;/code&gt; configured as follows will instruct Webpack to &amp;quot;shim&amp;quot; legacy modules with a &lt;code&gt;require(&amp;#39;jquery&amp;#39;)&lt;/code&gt; statement if necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

const webpack = require(&amp;#39;webpack&amp;#39;);

const {environment} = require(&amp;#39;@rails/webpacker&amp;#39;);

environment.plugins.append(
  &amp;#39;jquery&amp;#39;, // arbitrary name
   new webpack.ProvidePlugin({
    $: &amp;#39;jquery&amp;#39;,
    jQuery: &amp;#39;jquery&amp;#39;,
    &amp;#39;window.jQuery&amp;#39;: &amp;#39;jquery&amp;#39;
   }),
);

module.exports = environment;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/guides/shimming/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/guides/shimming/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="16-you-can-still-quot-require_tree-quot-and-then-some" class="title title-h3"&gt;
        &lt;a name="16-you-can-still-quot-require_tree-quot-and-then-some" class="anchor" href="#16-you-can-still-quot-require_tree-quot-and-then-some"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        16. You can still &amp;quot;require_tree&amp;quot; and then some
      &lt;/h3&gt;
    
&lt;p&gt;Sprockets comes with a few conveniences for including files in your asset bundles, including &lt;code&gt;require_tree&lt;/code&gt;. Similarly, Webpack also has a function for including multiple files in a single statement: &lt;code&gt;require.context&lt;/code&gt;. Though more tedious, it&amp;#39;s even more powerful. It provides a file filter option, say if you only want to import &lt;code&gt;.svg&lt;/code&gt; files. You can also operate on the return value.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;require.context(directory, useSubdirectories = true, regExp = /^\.\/.*$/, mode = &amp;#39;sync&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example: require all the test files in the current and nested directories.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;require.context(&amp;#39;.&amp;#39;, true, /\.test\.js$/);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example: import all the default exports in the current directory and re-export as named modules&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const requireModule = require.context(&amp;#39;.&amp;#39;, false, /.js$/)

context.keys().forEach(filename =&amp;gt; {
  const moduleConfig = requireModule(filename)

  // Get PascalCase name of module from filename
  const moduleName = upperFirst(
    camelCase(
      filename.replace(/\.\//, &amp;#39;&amp;#39;).replace(/\.\w+$/, &amp;#39;&amp;#39;)
    )
  )

  export {[moduleName]: moduleConfig.default}
})
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/guides/dependency-management/#requirecontext" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/guides/dependency-management/#requirecontext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="17-automatic-static-code-splitting" class="title title-h3"&gt;
        &lt;a name="17-automatic-static-code-splitting" class="anchor" href="#17-automatic-static-code-splitting"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        17. Automatic static code splitting
      &lt;/h3&gt;
    
&lt;p&gt;In Sprockets, a common technique to reduce bundle size and improve cacheability is to move all the vendor code into a separate bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- app/views/layouts.application.html.erb --&amp;gt;
&amp;lt;%= javascript_include_tag &amp;quot;vendor&amp;quot; %&amp;gt;
&amp;lt;%= javascript_include_tag &amp;quot;application&amp;quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One headache with this approach is having to manually account divvy up the bundles and take great care to avoid load order issues or omitting key dependencies.&lt;/p&gt;

&lt;p&gt;Since Webpack statically analyzes your source code to build its dependency graph(s), it can also be configured to create separate bundles for vendored and application code automatically. This means, from a single &amp;quot;pack&amp;quot;, Webpack will produce the vendor and application bundles for you, along with the Webpack runtime. Webpacker helpers and config can be used as follows to enable this behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

environment.splitChunks()

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;

&amp;lt;%= javascript_packs_with_chunks_tag &amp;quot;application&amp;quot; %&amp;gt;
&amp;lt;!--
&amp;lt;script src=&amp;quot;/packs/vendor-16838bab065ae1e314.chunk.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/packs/application~runtime-16838bab065ae1e314.chunk.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/packs/application-1016838bab065ae1e314.chunk.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
!&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No more manual code splitting.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/plugins/split-chunks-plugin/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="18-automatic-dynamic-code-splitting" class="title title-h3"&gt;
        &lt;a name="18-automatic-dynamic-code-splitting" class="anchor" href="#18-automatic-dynamic-code-splitting"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        18. Automatic dynamic code splitting
      &lt;/h3&gt;
    
&lt;p&gt;An even better option to split your JavaScript code over multiple files is to use &amp;quot;dynamic imports&amp;quot;. This approach requires absolutely zero config changes. It is the very reason that Webpack&amp;#39;s creator made Webpack in the first place.&lt;/p&gt;

&lt;p&gt;When Webpack detects a dynamic import function, like the following, in your application code, it will create a separate bundle for that import and load it asynchronously when that code is executed in the browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import(&amp;#39;pdfjs/webpack&amp;#39;).then(({default: pdfjs}) =&amp;gt; { // async import!
  pdfjs.getDocument(&amp;#39;https://example.com/some.pdf&amp;#39;)  // ...
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This technique can help reduce initial download size, help avoid loading JavaScript code unnecessarily, and potentially improve time-to-interactive metric.&lt;/p&gt;

      &lt;h3 id="19-use-state-of-the-art-css-processing" class="title title-h3"&gt;
        &lt;a name="19-use-state-of-the-art-css-processing" class="anchor" href="#19-use-state-of-the-art-css-processing"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        19. Use state-of-the-art CSS processing
      &lt;/h3&gt;
    
&lt;p&gt;If you&amp;#39;ve used Rails long enough, there&amp;#39;s a good chance you&amp;#39;ve adopted SASS or SCSS and you may love it. That&amp;#39;s fine! Webpacker supports SASS/SCSS by default. That said, Webpacker also integrates with a newer tool called &lt;a href="https://postcss.org/" target="_blank" rel="noopener noreferrer"&gt;PostCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/postcss-logo.png" alt="PostCSS logo" /&gt;&lt;/p&gt;

&lt;p&gt;PostCSS, relatively new on the scene, allows developers to transform CSS with JavaScript. It&amp;#39;s a pluggable tool that can be configured to enable various capabilities; Webpack configures PostCSS to apply some fixes for flexbox bugs and to use a preset-env plugin to polyfill newer CSS capabilities for older browsers, similarly to @babel/preset-env does for JavaScript.&lt;/p&gt;

&lt;p&gt;One of my favorite PostCSS plugins is PurgeCSS, which lets you delete unused CSS by comparing your CSS with your HTML markup and/or templates. Such a tool is invaluable when adopting a framework like TailwindCSS, which provides a ton of utility classes, many of which you&amp;#39;re unlikely to use in production code.&lt;/p&gt;

      &lt;h3 id="20-get-asset-compilation-out-of-the-rails-developer-server" class="title title-h3"&gt;
        &lt;a name="20-get-asset-compilation-out-of-the-rails-developer-server" class="anchor" href="#20-get-asset-compilation-out-of-the-rails-developer-server"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        20. Get asset compilation out of the Rails developer server
      &lt;/h3&gt;
    
&lt;p&gt;With Sprockets in development, automatic compilation and recompilation of static assets is handled through the Rails server. This can become a bottleneck with the ruby process doing double-duty. With the webpack-dev-server, however, asset compilation moves into a separate process so asset compilation can occur independently of the Rails server responding to requests.&lt;/p&gt;

&lt;p&gt;The webpack-dev-server is a simple Node.js web server that watches for file changes in your source code directory, triggers Webpack to recompile when changes are detected, and serves the compiles assets from memory. It can also, via websocket listener automatically inserted in the browser, autoreload the development browser window when autocompilation completes, if desired.&lt;/p&gt;

      &lt;h3 id="21-update-code-in-development-without-reloading-the-page" class="title title-h3"&gt;
        &lt;a name="21-update-code-in-development-without-reloading-the-page" class="anchor" href="#21-update-code-in-development-without-reloading-the-page"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        21. Update code in development without reloading the page
      &lt;/h3&gt;
    
&lt;p&gt;Imagine being able to replace the implementation of a JavaScript module in the browser without having to reload the page. That&amp;#39;s &lt;a href="https://webpack.js.org/guides/hot-module-replacement/" target="_blank" rel="noopener noreferrer"&gt;Hot Module Replacement&lt;/a&gt; (HMR). Not only does this allow for near-instant updates of only code that&amp;#39;s changed, but the application and DOM state is retained, meaning there&amp;#39;s no need for extra clicks and typing to achieve the desired UI state. There are some &lt;a href="https://webpack.js.org/guides/hot-module-replacement/#gotchas" target="_blank" rel="noopener noreferrer"&gt;gotchas&lt;/a&gt; to be aware of when using this tool, but generally speaking, it&amp;#39;s a powerful way to speed up development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/concepts/hot-module-replacement/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/concepts/hot-module-replacement/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="22-take-advantage-of-source-map-options" class="title title-h3"&gt;
        &lt;a name="22-take-advantage-of-source-map-options" class="anchor" href="#22-take-advantage-of-source-map-options"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        22. Take advantage of source map options
      &lt;/h3&gt;
    
&lt;p&gt;Given your JavaScript and CSS source code may be written in one form but compiled to another in development and production, source maps can help fill the gap. Most evergreen browsers support the loading and rendering of source maps in the browser dev tools to allow developers to link the code that&amp;#39;s loaded in the browser to the code that lives in your source. It&amp;#39;s a really good tool to have in your toolbelt.&lt;/p&gt;

&lt;p&gt;Sprockets recently brought source maps to the Rails asset pipeline. In Webpack, they&amp;#39;ve been there since its early days and they&amp;#39;re highly customizable; there are over twenty types of source maps supported in Webpack meaning there&amp;#39;s a strategy for almost every use case. One reason for this much variety is that source maps must be generated as a separate file from your ass bundles so there&amp;#39;s a build performance cost. You can save time with the tradeoff of fidelity.&lt;/p&gt;

&lt;p&gt;The main point is with Webpack you&amp;#39;ve got a ton of choice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WTF is a source map? &lt;a href="https://schneems.com/2017/11/14/wtf-is-a-source-map/" target="_blank" rel="noopener noreferrer"&gt;https://schneems.com/2017/11/14/wtf-is-a-source-map/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to source maps in sprockets: &lt;a href="https://github.com/rails/sprockets/blob/master/guides/source_maps.md" target="_blank" rel="noopener noreferrer"&gt;https://github.com/rails/sprockets/blob/master/guides/source_maps.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Webpack source map documentation: &lt;a href="https://webpack.js.org/configuration/devtool/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/configuration/devtool/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="23-implement-performance-budgets" class="title title-h3"&gt;
        &lt;a name="23-implement-performance-budgets" class="anchor" href="#23-implement-performance-budgets"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        23. Implement performance budgets
      &lt;/h3&gt;
    
&lt;p&gt;The first rule of optimization is &amp;quot;Measure first.&amp;quot; When it comes to optimizing frontend performance, the first developer I look to for advice is &lt;a href="https://addyosmani.com/" target="_blank" rel="noopener noreferrer"&gt;Addy Osmani&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/perf-budget-metrics.png" alt="Performance Budget Images" /&gt;&lt;/p&gt;

&lt;p&gt;One of his key strategies for measuring frontend performance is &amp;quot;performance budgeting&amp;quot; and how this relates to  &amp;quot;time-to-interactive&amp;quot; (TTI). The thinking is you may be able to put a value on the TTI experienced by users of your application. That value closely correlates with the amount of JavaScript you force your users&amp;#39; browsers to download and execute. By limiting the payload size of the initial download, you may be able to improve TTI.&lt;/p&gt;

&lt;p&gt;What does this have to do with Webpack? Not only does Webpack make it easier to split up your bundles, as we saw with the code splitting sections above, but it also provides built-in support for &lt;a href="https://medium.com/webpack/webpack-performance-budgets-13d4880fbf6d" target="_blank" rel="noopener noreferrer"&gt;performance budgets&lt;/a&gt;. You can customize Webpack to print a warning or even raise an error if any bundle exceeds the configured &lt;code&gt;maxEntryPointSize&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start performance budgeting &lt;a href="https://addyosmani.com/blog/performance-budgets/" target="_blank" rel="noopener noreferrer"&gt;https://addyosmani.com/blog/performance-budgets/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cost of JavaScript 2019 &lt;a href="https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4" target="_blank" rel="noopener noreferrer"&gt;https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="24-peek-inside-the-bundles" class="title title-h3"&gt;
        &lt;a name="24-peek-inside-the-bundles" class="anchor" href="#24-peek-inside-the-bundles"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        24. Peek inside the bundles
      &lt;/h3&gt;
    
&lt;p&gt;One of my favorite tools for debugging Webpack is the &lt;code&gt;webpack-bundler-analyzer&lt;/code&gt;. Add this to your build and it will generate an interactive treemap that visualizes the relative size and contents of all your bundles. Wondering how much &lt;code&gt;lodash&lt;/code&gt; is adding to your overall bundle size? Use the bundle analyzer tool. Think there&amp;#39;s a bug in with one of your dependencies or in your Webpack output? The bundle analyzer may help you identify it.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/webpack-bundle-analyzer.gif" alt="An example of a Webpack Bundle Analyzer treemap" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer"&gt;https://github.com/webpack-contrib/webpack-bundle-analyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="25-shaking-the-tree" class="title title-h3"&gt;
        &lt;a name="25-shaking-the-tree" class="anchor" href="#25-shaking-the-tree"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        25. Shaking the tree
      &lt;/h3&gt;
    
&lt;p&gt;I&amp;#39;d be remiss if I didn&amp;#39;t mention one of the favorite JavaScript bundle buzzwords, &lt;strong&gt;tree shaking&lt;/strong&gt;. All this means is that Webpack can remove unused code from your build when certain conditions are met. This typically means that the module(s) in question is an ES module, that Babel is configured to handle ES modules, and that there are no side effects from importing the module.&lt;/p&gt;

&lt;p&gt;A good use case for tree shaking is &lt;code&gt;lodash&lt;/code&gt;. When loaded in its entirety, the library adds around 75 kb to the resulting asset bundle.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import _ from &amp;#39;lodash&amp;#39; // OR

import {map, uniq, tail} from &amp;#39;lodash&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following approach allows Webpack to limit the resulting file size:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import map from &amp;#39;lodash/map&amp;#39;
import uniq from &amp;#39;lodash/uniq&amp;#39;
import tail from &amp;#39;lodash/tail&amp;#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Lessons on tree-shaking Lodash with Webpack and Babel &lt;a href="https://www.azavea.com/blog/2019/03/07/lessons-on-tree-shaking-lodash/" target="_blank" rel="noopener noreferrer"&gt;https://www.azavea.com/blog/2019/03/07/lessons-on-tree-shaking-lodash/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="wrapping-up" class="title title-h3"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h3&gt;
    
&lt;p&gt;There it is. I hope this has been a worthy introduction to some exciting possibilities and use cases for adopting Webpack in your Rails app via Webpacker. Like I said earlier, there is a tradeoff that comes with the overhead of managing many smaller JavaScript dependencies along with overcoming the &amp;quot;barrier to entry&amp;quot; in getting up to speed with how Webpack works.&lt;/p&gt;

&lt;p&gt;I, for one, feel the tradeoffs have been worthwhile.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A guide to NPM version constraints for Rubyists</title>
    <link rel="alternate" href="/blog/npm-version-constraints-for-rubyists.html"/>
    <id>/blog/npm-version-constraints-for-rubyists.html</id>
    <published>2020-01-29T00:00:00+00:00</published>
    <updated>2020-01-29T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;In this post, I want to answer the following question for Rubyists:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What do the tilde &lt;code&gt;~&lt;/code&gt; and caret &lt;code&gt;^&lt;/code&gt; designations mean for version constraints in a &lt;code&gt;package.json&lt;/code&gt; file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To answer this question, we'll compare how Rubyists declare Ruby project dependencies...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In this post, I want to answer the following question for Rubyists:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What do the tilde &lt;code&gt;~&lt;/code&gt; and caret &lt;code&gt;^&lt;/code&gt; designations mean for version constraints in a &lt;code&gt;package.json&lt;/code&gt; file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To answer this question, we&amp;#39;ll compare how Rubyists declare Ruby project dependencies in a &lt;code&gt;Gemfile&lt;/code&gt; with conventions used to declare NPM module dependencies in a &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Of note, some projects use both Gemfile and package.json. For example, a newly created Rails 6 application will have generated a package.json file because, by default, it ships with Webpack and related NPM dependencies to compile JavaScript assets.&lt;/p&gt;

&lt;p&gt;It might include a section like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&amp;quot;dependencies&amp;quot;: {
  &amp;quot;@rails/ujs&amp;quot;: &amp;quot;^6.0.0&amp;quot;,
  &amp;quot;@rails/webpacker&amp;quot;: &amp;quot;~4.2.1&amp;quot;,
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#39;re a Rubyist and the version syntax looks odd, then this post is for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using Webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h2 id="version-constraints-in-gemfile" class="title title-h2"&gt;
        &lt;a name="version-constraints-in-gemfile" class="anchor" href="#version-constraints-in-gemfile"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Version constraints in Gemfile
      &lt;/h2&gt;
    
&lt;p&gt;Like the &lt;code&gt;Gemfile&lt;/code&gt;, package.json has a convention to specify version constraints. Both Ruby and NPM dependencies usually follow SemVer, that will format a constraint as &lt;code&gt;major.minor.patch&lt;/code&gt;, i.e. the declaration &lt;code&gt;&amp;quot;webpack&amp;quot;: &amp;quot;4.41.2&amp;quot;&lt;/code&gt; indicates Webpack major version 4, minor version 41, and patch version 2.&lt;/p&gt;

&lt;p&gt;Where they differ is in the use of special characters to declare acceptable ranges. Let&amp;#39;s refresh the conventions used in the Gemfile.&lt;/p&gt;

&lt;p&gt;To lock a gem dependency to an exact version, we would declare the gem&amp;#39;s name and its version as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;4.7.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more optimistic constraint would be to provide an open-ended range that will install or update to a version of the gem that satisfies the range.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;&amp;gt;= 4.7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To limit the upper end of the range, say, to allow minor updates up to the next major version:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;&amp;gt;= 4.7&amp;quot;, &amp;quot;&amp;lt; 5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This format has a shorthand notation, the squiggly arrow &lt;code&gt;~&amp;gt;&lt;/code&gt;, or the pessimistic version constraint.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;~&amp;gt; 4.7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upper end of the range is determined by the smallest level of the declared constraint. For example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~&amp;gt; 4.7.1&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;= 4.7.1&amp;quot;, &amp;quot;&amp;lt; 4.8.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~&amp;gt; 4.7&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;= 4.7.0&amp;quot;, &amp;quot;&amp;lt; 5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~&amp;gt; 4&amp;quot;&lt;/code&gt;     matches &lt;code&gt;&amp;quot;&amp;gt;= 4.0.0&amp;quot;, &amp;quot;&amp;lt; 5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To specify &amp;quot;no constraint&amp;quot;, simply omit the version argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more info, check out &lt;a href="https://guides.rubygems.org/patterns/#declaring-dependencies" target="_blank" rel="noopener noreferrer"&gt;the guide on RubyGems&lt;/a&gt;.&lt;/p&gt;

      &lt;h2 id="version-constraints-in-package-json" class="title title-h2"&gt;
        &lt;a name="version-constraints-in-package-json" class="anchor" href="#version-constraints-in-package-json"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Version constraints in package.json
      &lt;/h2&gt;
    
&lt;p&gt;NPM conventions provide similar flexibility with alternate syntax.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s consider a package.json file that declares &lt;code&gt;@rails/webpacker&lt;/code&gt; as a dependency, the following would enforce an exact version:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&amp;quot;@rails/webpacker&amp;quot;: &amp;quot;4.2.1&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the Gemfile, comparison operators can be used as in the following examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;=4.2.1&amp;quot;&lt;/code&gt; matches greater or equal to 4.2.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;4.2.1&amp;quot;&lt;/code&gt; matches greater than 4.2.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;=4.2.1 &amp;lt;5&amp;quot;&lt;/code&gt; matches greater or equal to 4.2.1 and less than 5&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;lt;5&amp;quot;&lt;/code&gt; matches less than 5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NPM supports alternate syntaxes for specifying ranges, including, but not limited to, caret &lt;code&gt;^&lt;/code&gt; and tilde &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;

      &lt;h3 id="tilde-ranges" class="title title-h3"&gt;
        &lt;a name="tilde-ranges" class="anchor" href="#tilde-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Tilde ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM ~ is like Gemfile ~&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tilde ranges for NPM are equivalent to Ruby&amp;#39;s pessimistic version constraint, the squiggly arrow &lt;code&gt;~&amp;gt;&lt;/code&gt;. In other words, the upper end of the range is determined by the smallest level of the declared constraint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~4.2.1&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;= 4.2.1 &amp;lt;4.3.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~4.2&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;= 4.2.0 &amp;lt;5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~4&amp;quot;&lt;/code&gt;     matches &lt;code&gt;&amp;quot;&amp;gt;= 4.0.0 &amp;lt;5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="caret-ranges" class="title title-h3"&gt;
        &lt;a name="caret-ranges" class="anchor" href="#caret-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Caret ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM ^ is like Gemfile ~&amp;gt; x.0 for versions 1 and up and ~&amp;gt; 0.x.0 for versions less than 1 and greater than 0.0.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Caret ranges are another take on pessimistic version constraints that do not have a shorthand equivalent in Ruby, i.e., to my knowledge, they&amp;#39;re a special breed. They allow patch and minor updates for versions &lt;code&gt;&amp;gt;1.0.0&lt;/code&gt;, patch updates for versions &lt;code&gt;&amp;lt;1.0.0 &amp;gt;=0.1.0&lt;/code&gt;, and no updates for versions &lt;code&gt;&amp;lt;0.1.0&lt;/code&gt; (except preleases, e.g. &lt;code&gt;0.0.3-beta&lt;/code&gt;). My understanding is that the caret is the answer for traditional SemVer, i.e., there will be breaking changes prior to 0.1.0, there may be breaking changes between minor versions prior to 1.0.0, and there may only be breaking changes between major versions above 1.0.0. Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^4.2.1&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.1 &amp;lt;5.0.0&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;~4.2&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^0.2.2&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=0.2.2 &amp;lt;0.3.0&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;~0.2.2&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^0.0.2&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=0.0.2 &amp;lt;0.0.3&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="bonus-syntax-in-package-json" class="title title-h2"&gt;
        &lt;a name="bonus-syntax-in-package-json" class="anchor" href="#bonus-syntax-in-package-json"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Bonus syntax in package.json
      &lt;/h2&gt;
    
&lt;p&gt;NPM also supports hyphen ranges and x-ranges, neither of which have Gemfile equivalents as well.&lt;/p&gt;

      &lt;h3 id="hyphen-ranges" class="title title-h3"&gt;
        &lt;a name="hyphen-ranges" class="anchor" href="#hyphen-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Hyphen ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM hyphen-ranges are like separate comparison operators in a Gemfile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For hyphen ranges, range inclusivity is tied to specificity of the declared versions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2.1 - 5.4.2&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.1 &amp;lt;=5.4.2&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2 - 5.4.2&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.0 &amp;lt;=5.4.2&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2 - 5&amp;quot;&lt;/code&gt;       matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.0 &amp;lt;=6.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="x-ranges" class="title title-h3"&gt;
        &lt;a name="x-ranges" class="anchor" href="#x-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        X-ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM x-ranges behave like Gemfile ~&amp;gt; with exceptions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;X-ranges are mostly self-explanatory as the &lt;code&gt;x&lt;/code&gt; denotes any value:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2.x&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;~4.2.0&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;= 4.2.0 &amp;lt;4.3.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.x&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;~4.0&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;= 4.0.0 &amp;lt;5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.x.x&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;4.x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A partial version range is treated as an x-range:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2&amp;quot;&lt;/code&gt; matches &amp;quot;&lt;code&gt;4.2.x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4&amp;quot;&lt;/code&gt;   matches &amp;quot;&lt;code&gt;4.x.x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;    matches &amp;quot;&lt;code&gt;*&lt;/code&gt;&amp;quot; matches any version&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="conclusion" class="title title-h2"&gt;
        &lt;a name="conclusion" class="anchor" href="#conclusion"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Conclusion
      &lt;/h2&gt;
    
&lt;p&gt;For Rubyists out there who needed an introduction to NPM version constraints, I hope this was a helpful guide, or perhaps a future cheatsheet.&lt;/p&gt;

&lt;p&gt;Mostly I wrote this for myself because I tend to forget 😅.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>3 ways Webpack surprises web developers</title>
    <link rel="alternate" href="/blog/three-ways-webpack-surprises-rails-developers.html"/>
    <id>/blog/three-ways-webpack-surprises-rails-developers.html</id>
    <published>2020-01-14T00:00:00+00:00</published>
    <updated>2020-01-14T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;When I first started working with Webpack, I didn't realize how under-prepared I was. I was tasked with &lt;a href="/blog/from-sprockets-to-webpack.html"&gt;integrating Webpack into a large Rails app&lt;/a&gt; and I made a lot of mistakes along the way. I assumed how things should behave based on my previous experience...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When I first started working with Webpack, I didn&amp;#39;t realize how under-prepared I was. I was tasked with &lt;a href="/blog/from-sprockets-to-webpack.html"&gt;integrating Webpack into a large Rails app&lt;/a&gt; and I made a lot of mistakes along the way. I assumed how things should behave based on my previous experience with the Rails asset pipeline. Many of these assumptions turned out to be wrong. This was frustrating and humbling.&lt;/p&gt;

&lt;p&gt;And after spending the last month answering Webpack questions on StackOverflow, I&amp;#39;ve come across plenty of folks going through some of the same mental hurdles I&amp;#39;ve experienced. I came away with some perspective on what about Webpack most commonly trips up developers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using Webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The intended audience for this post has a general notion of &amp;quot;why use Webpack&amp;quot; or &amp;quot;why use an asset bundler&amp;quot;, but for more on that, I recommend &lt;a href="https://www.swyx.io/writing/jobs-of-js-build-tools/" target="_blank" rel="noopener noreferrer"&gt;The Many Jobs of JS Build Tools&lt;/a&gt; and &lt;a href="https://what-problem-does-it-solve.com/webpack/index.html" target="_blank" rel="noopener noreferrer"&gt;Webpack from Nothing: What problem are we solving?&lt;/a&gt;. For a rigorous technical overview of the project, I suggest &lt;a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer"&gt;the Webpack docs&lt;/a&gt;; they have gotten quite good.&lt;/p&gt;

&lt;p&gt;For this post, we&amp;#39;re going to look at three common surprises web developers face when learning Webpack: why using global variables doesn&amp;#39;t behave the way you might think, how Webpack treats everything as a JavaScript module, and the big learning curve for configuring Webpack effectively.&lt;/p&gt;

      &lt;h3 id="1-global-variables-are-not-your-friend" class="title title-h3"&gt;
        &lt;a name="1-global-variables-are-not-your-friend" class="anchor" href="#1-global-variables-are-not-your-friend"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        1. Global variables are not your friend
      &lt;/h3&gt;
    
&lt;p&gt;I learned to program using script tags and html files loaded directly in the browser. I tied everything together with global variables. It was great.&lt;/p&gt;

&lt;p&gt;And for better or worse, every Rails I&amp;#39;ve worked on, and it&amp;#39;s been dozens over the years, has relied on global variables and script tag snippets to make things work. Here is a basic example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- app/view/posts/index.html.erb --&amp;gt;
&amp;lt;%= @posts.each do |post| %&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;button--show-more&amp;quot;&amp;gt;Show more&amp;lt;/a&amp;gt;

&amp;lt;script&amp;gt;
  $(&amp;#39;.button--show-more&amp;#39;).click(function() {
    MyApp.fetchPosts() // etc...
  })

  // MyApp and $ are global variables
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is typical with old-school bundlers like the Rails asset pipeline because they concatenate JavaScript dependencies in the global scope. This, despite the general notion that &lt;a href="https://stackoverflow.com/questions/2613310/ive-heard-global-variables-are-bad-what-alternative-solution-should-i-use" target="_blank" rel="noopener noreferrer"&gt;global variables are bad&lt;/a&gt;. Notably, the Rails asset pipeline came into existence before the rise of Node.js and, subsequently, formal JavaScript modules, and it never adapted. Many prefer this way of doing things. I still lean on global variables now and then.&lt;/p&gt;

&lt;p&gt;Things work differently in Webpack. It does not expose its bundled modules to the global scope by default. To reference code in another module, it expects explicit imports that reference that module&amp;#39;s explicit exports. The scope in which modules are evaluated is local, not global, i.e., the contents of each file are wrapped in a function.&lt;/p&gt;

&lt;p&gt;Things are trickier if we expect to access bundled JavaScript from HTML, like &lt;code&gt;MyApp.fetchPosts()&lt;/code&gt; above. Options include manually attaching variables to the global scope, e.g. &lt;code&gt;window.$ = require(&amp;#39;jquery&amp;#39;)&lt;/code&gt; or modify the Webpack configuration to &amp;quot;expose&amp;quot; variables globally, as is demonstrated in this &lt;a href="https://stackoverflow.com/questions/58580996/unable-to-access-jquery-from-my-views-on-ror/58751163#58751163" target="_blank" rel="noopener noreferrer"&gt;StackOverflow post&lt;/a&gt; (and many others).&lt;/p&gt;

&lt;p&gt;This serves as an illustration of how a legacy practice would be swimming upstream in a Webpacker-enabled app: it takes effort.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But why?&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h4 id="webpack-is-a-module-bundler" class="title title-h4"&gt;
        &lt;a name="webpack-is-a-module-bundler" class="anchor" href="#webpack-is-a-module-bundler"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Webpack is a module bundler
      &lt;/h4&gt;
    
&lt;p&gt;Webpack describes itself as &lt;a href="https://webpack.js.org/conceptsl" target="_blank" rel="noopener noreferrer"&gt;&amp;quot;a static module bundler for modern JavaScript applications&amp;quot;&lt;/a&gt;. For developers used to unfettered access to JavaScript global scope, the switch to working in a modular system comes as a surprise. I argue that adopting Webpack effectively means understanding JavaScript modules.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what then is a JavaScript module?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a fantastic introduction to JavaScript modules, I suggest Preethi Kasireddy&amp;#39;s &lt;a href="https://www.freecodecamp.org/news/javascript-modules-a-beginner-s-guide-783f7d7a5fcc/" target="_blank" rel="noopener noreferrer"&gt;Javascript Modules: A Beginner&amp;#39;s Guide&lt;/a&gt; on freeCodeCamp. I&amp;#39;ll attempt to summarize.&lt;/p&gt;

&lt;p&gt;Generally speaking, a JavaScript module is a self-contained, reusable piece of code. This definition though is inadequate to capture the behavior of various flavors of JavaScript modules, ranging from simple patterns to formal systems supported by common JavaScript runtimes.&lt;/p&gt;

&lt;p&gt;In recent years, several popular JavaScript module definitions have become widely adopted, each with their own characteristics, including &lt;a href="https://requirejs.org/docs/commonjs.html" target="_blank" rel="noopener noreferrer"&gt;CommonJS&lt;/a&gt;, &lt;a href="https://requirejs.org/docs/whyamd.html#amd" target="_blank" rel="noopener noreferrer"&gt;Asynchronous Module Definition&lt;/a&gt; (AMD), and &lt;a href="https://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener noreferrer"&gt;EcmaScript (ES) Modules&lt;/a&gt; to name a few.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/require-everything.png" alt="How did the big bang happen? require('everything')" /&gt;&lt;/p&gt;

&lt;p&gt;Webpack can be configured to recognize any of these module formats.&lt;/p&gt;

&lt;p&gt;Webpack transpiles your application&amp;#39;s source files into JavaScript modules the browser can understand. It adds code to your bundle to tie these modules together. This has implications for how developers write code which means the old-school patterns that worked with the Rails asset pipeline may not work in the Webpack context.&lt;/p&gt;

      &lt;h4 id="avoid-legacy-code-if-you-can" class="title title-h4"&gt;
        &lt;a name="avoid-legacy-code-if-you-can" class="anchor" href="#avoid-legacy-code-if-you-can"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Avoid legacy code if you can
      &lt;/h4&gt;
    
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack" target="_blank" rel="noopener noreferrer"&gt;Some&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/59042437/gmaps-with-rails-6-webpack" target="_blank" rel="noopener noreferrer"&gt;of the&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/59670743/leaflet-with-webpack-in-rails-6-l-timeline-is-not-a-function" target="_blank" rel="noopener noreferrer"&gt;most&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/40575637/how-to-use-webpack-with-google-maps-api" target="_blank" rel="noopener noreferrer"&gt;frequent&lt;/a&gt; Webpack issues that pop up on StackOverflow highlight this disparity between the context in which Webpack works best and the context for which legacy code was written.&lt;/p&gt;

&lt;p&gt;Consider any jQuery plugin in your app that&amp;#39;s more than a few years old; any one of them may not play nice with Webpack. The plugin system in a way is a relic of the pre-module era; attaching to a global variable was the easy way to reuse and reference functionality across the app.&lt;/p&gt;

&lt;p&gt;Many jQuery plugins (or many legacy plugins in general) have been written without awareness of JavaScript modules and assume execution within the global scope. Be ready to weigh the tradeoff of learning how to configure Webpack to play nicely with legacy code or replace it with something else altogether.&lt;/p&gt;

&lt;p&gt;In Webpack, global variables are not your friend, my friend.&lt;/p&gt;

      &lt;h3 id="2-webpack-treats-em-everything-em-as-a-javascript-module" class="title title-h3"&gt;
        &lt;a name="2-webpack-treats-em-everything-em-as-a-javascript-module" class="anchor" href="#2-webpack-treats-em-everything-em-as-a-javascript-module"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        2. Webpack treats &lt;em&gt;everything&lt;/em&gt; as a JavaScript module
      &lt;/h3&gt;
    
&lt;p&gt;Webpack is so committed to its &amp;quot;module bundler&amp;quot; role it treats other static assets, including CSS, images, fonts, etc., as JavaScript modules too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Say what?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first learned this about Webpack, I was totally confused: How does Webpack produce stylesheets out of JS? How would I reference the an image tag&amp;#39;s &lt;code&gt;src&lt;/code&gt; for bundled images? What does it mean to import an &lt;em&gt;image module&lt;/em&gt; in JavaScript?&lt;/p&gt;

&lt;p&gt;It helps to understand that Webpack must be configured, typically with &lt;a href="https://webpack.js.org/loaders/" target="_blank" rel="noopener noreferrer"&gt;loaders&lt;/a&gt; or &lt;a href="https://webpack.js.org/plugins/" target="_blank" rel="noopener noreferrer"&gt;plugins&lt;/a&gt;, to handle different various files types as modules. How Webpack processes various file types as output depends which loaders are used.&lt;/p&gt;

&lt;p&gt;Many projects integrate with Babel to process JavaScript files written with ES2015+ syntax. CSS files might be bundled as JavaScript Blob objects that are dynamically inserted in the DOM; otherwise it can be extracted into a CSS stylesheet a side-effect of module compilation.&lt;/p&gt;

&lt;p&gt;Webpack only needs one JavaScript file in your source code as an entry point to produce a dependency graph of all the JavaScript, CSS, images, fonts, svg, etc. that you intend to bundle as static assets for the browser.&lt;/p&gt;

&lt;p&gt;An interesting consequence of Webpack putting JavaScript first is there only needs to be one entry point to produce both a JavaScript and a CSS bundle. In the Rails asset pipeline, the JavaScript and CSS source code is kept completely separate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/assets
├── javascripts
│   └── application.js   # produces js bundle
└── stylesheets
    └── application.css  # produces css bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Webpack everything hangs off the javascript entry point, or &amp;quot;packs&amp;quot;. So assuming you have statements like &lt;code&gt;import &amp;#39;styles.css&amp;#39;&lt;/code&gt; somewhere in your JavaScript dependency graph, both &lt;code&gt;application.js&lt;/code&gt; and &lt;code&gt;application.css&lt;/code&gt; bundles will be produced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/javascript
└── packs
    └── application.js   # produces both js and css bundles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The mixing of CSS bundled in JavaScript and treated as JavaScript modules has isn&amp;#39;t strictly necessary, but it most certainly a mental leap for the uninitiated.&lt;/p&gt;

      &lt;h3 id="3-webpack-configuration-is-extremely-pluggable" class="title title-h3"&gt;
        &lt;a name="3-webpack-configuration-is-extremely-pluggable" class="anchor" href="#3-webpack-configuration-is-extremely-pluggable"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        3. Webpack configuration is extremely pluggable
      &lt;/h3&gt;
    
&lt;p&gt;There&amp;#39;s a reason Webpack configuration has such a high barrier to entry: Webpack is the ultimate delegator.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I continue to be amazed at how many learners seem to almost deliberately avoid reading the actual official docs for the tools they&amp;#39;re trying to use. I keep seeing folks asking for Udemy courses and &amp;quot;best tutorials&amp;quot; and stuff.&lt;br&gt;&lt;br&gt;Why do people avoid reading actual docs?&lt;/p&gt;&amp;mdash; Mark Erikson (@acemarke) &lt;a href="https://twitter.com/acemarke/status/1213898963679633411?ref_src=twsrc%5Etfw"&gt;January 5, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Coming from Rails, which famously values &amp;quot;convention over configuration&amp;quot;, the ergonomics of setting up a Webpack configuration cause discomfort. It aims to be extremely flexible and extensible; to that end, it succeeds superbly. To serve this goal, Webpack provides a large array of &lt;a href="https://webpack.js.org/configuration/" target="_blank" rel="noopener noreferrer"&gt;configuration options&lt;/a&gt;. On top of that, most Webpack configurations bring in a number of loader and plugins, each of which have their own configuration requirements.&lt;/p&gt;

&lt;p&gt;Faced having to learn Webpack, Babel, PostCSS, not to mention, Webpacker&amp;#39;s abstractions around Webpack, it&amp;#39;s no wonder we&amp;#39;re intimidated. That&amp;#39;s a lot to wrap your head around.&lt;/p&gt;

&lt;p&gt;One of Webpacker&amp;#39;s goals, in a similar fashion to &lt;a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener noreferrer"&gt;create-react-app&lt;/a&gt; and the &lt;a href="https://cli.vuejs.org/" target="_blank" rel="noopener noreferrer"&gt;vue-cli&lt;/a&gt;, is to provide a Webpack config with sane defaults, i.e. the &amp;quot;convention&amp;quot;. Depending on your project&amp;#39;s needs, these &amp;quot;out-of-the-box&amp;quot; setups may get you quite far. Unfortunately, for any non-trivial modification, like getting a large legacy library to work with global variables or optimizing your build time by splitting out vendor dependencies, developers must be prepared to dive into the documentation and search for answers far and wide on StackOverflow and Medium.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/good-developer-or-good-at-googling.png" alt="I'm not sure if I'm a good developer or good at googling" /&gt;&lt;/p&gt;

      &lt;h3 id="4-bonus-webpack-is-a-powerful-tool" class="title title-h3"&gt;
        &lt;a name="4-bonus-webpack-is-a-powerful-tool" class="anchor" href="#4-bonus-webpack-is-a-powerful-tool"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        4. Bonus: Webpack is a powerful tool
      &lt;/h3&gt;
    
&lt;p&gt;I&amp;#39;ve grown to love Webpack and, I admit, this appreciation was hard-earned. As I&amp;#39;ve gotten over the initial hurdles of making my Webpack config work for my projects, I&amp;#39;ve come to value a number of Webpack&amp;#39;s benefits, including optimizing bundle size through &lt;a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener noreferrer"&gt;tree-shaking&lt;/a&gt;, code splitting via &lt;a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener noreferrer"&gt;asynchronous dynamic imports&lt;/a&gt; and the &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer"&gt;split chunks plugin&lt;/a&gt; and support for &lt;a href="https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules" target="_blank" rel="noopener noreferrer"&gt;preloading and prefetching&lt;/a&gt;. All of these features are virtually non-existent in the Rails asset pipeline.&lt;/p&gt;

&lt;p&gt;These major strengths of Webpack all boil down to improving user experience: using it effectively can help improve metrics like &lt;a href="https://calendar.perfplanet.com/2017/time-to-interactive-measuring-more-of-the-user-experience/" target="_blank" rel="noopener noreferrer"&gt;Time-to-Interactive&lt;/a&gt; and &lt;a href="https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics#first_paint_and_first_contentful_paint" target="_blank" rel="noopener noreferrer"&gt;First Contentful Paint&lt;/a&gt;. These things matter and are ever more crucial as we lean more heavily on client-side code build rich interfaces delivered across a widening array of devices and networks.&lt;/p&gt;

&lt;p&gt;Webpack receives a fair number of criticisms regarding its complexity and some of its surprising traits, like the ones I highlighted here. To be fair, Webpack aims to solve a complex problem and solves it quite well. Other asset bundlers are worth your consideration, but, arguably, no other bundler has been as successful.&lt;/p&gt;

&lt;p&gt;As we saw in the &lt;a href="https://twitter.com/dhh/status/1046634277985611776" target="_blank" rel="noopener noreferrer"&gt;recent announcement from @dhh&lt;/a&gt; and the release of Rails 6 last year, Webpack is now the default JavaScript compiler for Rails. Looks like Rails developers will be looking to adopt Webpack in their applications, though as we&amp;#39;ve seen today, they may be in for a few surprises.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Webpack is now the default JavaScript compiler for the upcoming Rails 6 🎉 &lt;a href="https://t.co/LJzCSoPfCV"&gt;&lt;a href="https://t.co/LJzCSoPfCV" target="_blank" rel="noopener noreferrer"&gt;https://t.co/LJzCSoPfCV&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href="https://twitter.com/dhh/status/1046634277985611776?ref_src=twsrc%5Etfw"&gt;October 1, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Importing images with Webpacker</title>
    <link rel="alternate" href="/blog/importing-images-with-webpacker.html"/>
    <id>/blog/importing-images-with-webpacker.html</id>
    <published>2019-12-18T00:00:00+00:00</published>
    <updated>2019-12-18T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Webpack isn't just for JavaScript. You can bundle images with it too. &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;Webpacker&lt;/a&gt; makes it relatively easy to work with images, but it is admittedly confusing at first: &lt;em&gt;Images in JavaScript?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we'll demonstrate how to reference Webpacker...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Webpack isn&amp;#39;t just for JavaScript. You can bundle images with it too. &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;Webpacker&lt;/a&gt; makes it relatively easy to work with images, but it is admittedly confusing at first: &lt;em&gt;Images in JavaScript?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we&amp;#39;ll demonstrate how to reference Webpacker images from your JavaScript, CSS, and Rails views. The following examples were created using Rails 6 and Webpacker 4, but may work with other versions as well. Pre-requisites for working with Webpacker in a Rails project also include &lt;a href="https://yarnpkg.com/" target="_blank" rel="noopener noreferrer"&gt;yarn&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using Webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="folder-structure" class="title title-h3"&gt;
        &lt;a name="folder-structure" class="anchor" href="#folder-structure"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Folder structure
      &lt;/h3&gt;
    
&lt;p&gt;First, where should you put your images? It doesn&amp;#39;t matter. The easiest place to start is under your &lt;code&gt;app/javascript&lt;/code&gt; folder, the default source path for Webpacker, such as &lt;code&gt;app/javascript/images&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the rest of this guide, we&amp;#39;ll assume the following directory structure and files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/javascript
├── components
│   └── Taco.js
├── css
│   ├── main.css
├── images
│   ├── burritos.jpg
│   ├── guacamole.jpg
│   └── tacos.jpg
└── packs
    └── application.js
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Isn&amp;#39;t weird to put images and css in a folder called &amp;quot;javascript&amp;quot;? Depends. If you consider, from Webpack&amp;#39;s perspective, everything is a JavaScript module, it may not be so strange. Otherwise, it&amp;#39;s possible to rename &lt;code&gt;app/javascript&lt;/code&gt; or place your images elsewhere. More on that below.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="images-in-js" class="title title-h3"&gt;
        &lt;a name="images-in-js" class="anchor" href="#images-in-js"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in JS
      &lt;/h3&gt;
    
&lt;p&gt;To reference an image from JavaScript in your Webpacker build, simply import it like any other module. React is not required for this to work ;)&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascripts/components/Taco.js
import TacoImage from &amp;#39;../images/tacos.jpg&amp;#39;

export default function({ title }) {
  return `
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;${title}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;img src=${TacoImage} alt=&amp;quot;Tacos, yum&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  `
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, Webpack will import &lt;code&gt;TacoImage&lt;/code&gt; as a url to the file. In other words, an &amp;quot;image module&amp;quot; in Webpack exports a single default value, a string, representing the location of the file. Based on the default Webpacker configuration, the filename will look something like &lt;code&gt;&amp;quot;/packs/media/images/tacos-abcd1234.jpg&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importing a image also works if you&amp;#39;re using &amp;quot;CSS in JS&amp;quot; to style a React component.&lt;/p&gt;

&lt;pre&gt;&lt;code class="jsx"&gt;import React from &amp;#39;react&amp;#39;

import TacoImage from &amp;#39;../images/tacos.jpg&amp;#39;

const styles = {
  backgroundImage: `url(${TacoImage})`,
}

export default function ({ title }) {
  return (
    &amp;lt;div style={styles}&amp;gt;
      {title}!
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="images-in-css" class="title title-h3"&gt;
        &lt;a name="images-in-css" class="anchor" href="#images-in-css"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in CSS
      &lt;/h3&gt;
    
&lt;p&gt;In Sprockets, when referencing images in CSS, you would use a special &lt;code&gt;image-url()&lt;/code&gt; helper. In Webpack, simply use the standard &lt;code&gt;url()&lt;/code&gt; expression in CSS with a relative path.&lt;/p&gt;

&lt;pre&gt;&lt;code class="css"&gt;/* app/javascript/css/main.css */
.burritos {
  background-image: url(&amp;quot;../images/burritos.jpg&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output for the style rule will, again, look something like &lt;code&gt;background-image: url(/packs/media/images/burritos-efgh5678.jpg);&lt;/code&gt;. This technique will also work for image paths in CSS Modules.&lt;/p&gt;

      &lt;h3 id="images-in-css-within-npm-modules" class="title title-h3"&gt;
        &lt;a name="images-in-css-within-npm-modules" class="anchor" href="#images-in-css-within-npm-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in CSS within NPM modules
      &lt;/h3&gt;
    
&lt;p&gt;One tricky bit worth mentioning is bundling images referenced in SCSS within an imported NPM module. For example, many jQuery plugins bundle their own SCSS and image assets. When Webpack processes this vendored CSS, you may see an error like the following, like in &lt;a href="https://stackoverflow.com/questions/58727976/import-images-of-an-npm-package-with-webpacker-and-rails" target="_blank" rel="noopener noreferrer"&gt;this question on StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Module not found: Error: Can&amp;#39;t resolve &amp;#39;../img/controls.png&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is the path does not resolve properly relative to the output for this vendored SCSS. From the &lt;a href="https://github.com/rails/webpacker/blob/76b491750993fada8b0b0cc2546dfcfbc4aaae13/docs/css.md#resolve-url-loader" target="_blank" rel="noopener noreferrer"&gt;Webpacker docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since Sass/libsass does not provide url rewriting, all linked assets must be relative to the output. Add the missing url rewriting using the resolve-url-loader. Place it directly after the sass-loader in the loader chain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To fix this, you may need to get your hands dirty with some Webpacker configuration. Add the &lt;code&gt;resolve-url-loader&lt;/code&gt; and configure in &lt;code&gt;config/webpack/environment.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;yarn add resolve-url-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

// resolve-url-loader must be used before sass-loader
environment.loaders.get(&amp;#39;sass&amp;#39;).use.splice(-1, 0, {
  loader: &amp;#39;resolve-url-loader&amp;#39;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loader rule, inserted in the loader pipeline for SASS/SCSS files, will ensure the proper url is written to the CSS output by Webpack.&lt;/p&gt;

      &lt;h3 id="images-in-rails-views" class="title title-h3"&gt;
        &lt;a name="images-in-rails-views" class="anchor" href="#images-in-rails-views"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in Rails views
      &lt;/h3&gt;
    
&lt;p&gt;You may be accustomed to &lt;code&gt;&amp;lt;%= image_tag &amp;#39;tacos.jpg&amp;#39; %&amp;gt;&lt;/code&gt; to reference a image bundled in the Rails asset pipeline. Webpack has a similar tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- app/views/lunches/index.html.erb --&amp;gt;

&amp;lt;%= image_pack_tag &amp;#39;media/images/guacamole.jpg&amp;#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, since Webpacker 4, the prefix &lt;code&gt;media/&lt;/code&gt; is necessary and the remaining path represents the location from your Webpack source path.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a catch. This change may result in the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Webpacker::Manifest::MissingEntryError in Lunches#index
Showing /path/to/project/app/views/lunches/index.html.erb where line #4 raised:

Webpacker can&amp;#39;t find media/images/guacamole.jpg in /path/to/project/public/packs/manifest.json.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you use &lt;code&gt;&amp;lt;%= image_pack_tag &amp;#39;media/images/tacos.jpg %&amp;gt;&lt;/code&gt;, the taco image will happily renders. What gives?&lt;/p&gt;

&lt;p&gt;Your Rails app is not being selective about cuisine. The difference is, we earlier imported the &lt;code&gt;tacos.jpg&lt;/code&gt; image in Webpack, but not &lt;code&gt;guacamole.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One way to fix this issue is to import the &lt;code&gt;guacamole.jpg&lt;/code&gt; image somewhere in your Webpack dependency graph. It&amp;#39;s not necessary to grab a reference to the imported variable because we only care about the side effect of emitting the file for Rails to reference in the view.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;import &amp;#39;../images/guacamole.jpg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to fix this issue is to import &lt;em&gt;all&lt;/em&gt; images in the &lt;code&gt;app/javascript/images&lt;/code&gt; directory. Webpack provides a special function to import many files in a directory in one expression: &lt;code&gt;require.context&lt;/code&gt;. You might add this to your &lt;code&gt;application.js&lt;/code&gt; pack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

require.context(&amp;#39;../images&amp;#39;, true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This expression will recursively require all the files in the &lt;code&gt;images&lt;/code&gt; directory. As a result, we can now render &lt;code&gt;guacamole.jpg&lt;/code&gt; in a Rails view.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I only recommend using &lt;code&gt;require.context&lt;/code&gt; for your images if you need to render them in your Rails views; &lt;code&gt;require.context&lt;/code&gt; is NOT necessary to import images into JS files like your React components, as illustrated earlier.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="reconfiguring" class="title title-h3"&gt;
        &lt;a name="reconfiguring" class="anchor" href="#reconfiguring"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Reconfiguring
      &lt;/h3&gt;
    
&lt;p&gt;If you don&amp;#39;t feel comfortable with &lt;code&gt;app/javascript&lt;/code&gt; as the source directory for &lt;code&gt;images&lt;/code&gt;, you can either rename the source path or add to the set of resolved paths.&lt;/p&gt;

&lt;p&gt;To rename &lt;code&gt;app/javascript&lt;/code&gt;, rename the directory and tell Rails about it in &lt;code&gt;config/webpacker.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;default: &amp;amp;default
  source_path: app/frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add to the set of resolved paths where Webpack should look for assets besides in &lt;code&gt;app/javascript&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;default: &amp;amp;default
  resolved_paths:
    - app/assets
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="diving-deeper" class="title title-h3"&gt;
        &lt;a name="diving-deeper" class="anchor" href="#diving-deeper"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Diving Deeper
      &lt;/h3&gt;
    
&lt;p&gt;I have to admit, a few years ago, when I first heard about Webpack, I was super-confused. I understood it to be a JavaScript module bundler. &lt;em&gt;How on Earth does it handles images?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The short answer, of course, is &lt;em&gt;it depends&lt;/em&gt;. Generally, Webpack will treat everything it can understand as a JavaScript module. To help Webpack understand images, projects would add a &amp;quot;loader&amp;quot; (or loaders) to the Webpack configuration. A suitable loader would know how to handle an image file and output a representation of something, like an inlined base64 string, that can be manipulated in JavaScript.&lt;/p&gt;

&lt;p&gt;To help Webpack understand images, svg files, and fonts in your Rails project, Webpacker adds the &lt;code&gt;file-loader&lt;/code&gt; package. This package will emit the imported file as a side effect of the build and return a path to the file as the module contents.&lt;/p&gt;

&lt;p&gt;For more on how Webpack works with images, check out the &lt;a href="https://webpack.js.org/guides/asset-management/#loading-images" target="_blank" rel="noopener noreferrer"&gt;asset management docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also put together a sample Rails 6 Webpacker demo project on GitHub for more context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/rails6-webpacker-demo/compare/example/images" target="_blank" rel="noopener noreferrer"&gt;Images in JS, CSS, and Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/rails6-webpacker-demo/compare/example/react-image" target="_blank" rel="noopener noreferrer"&gt;Images with CSS-in-JS in a React app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Overpacking: A common Webpacker mistake</title>
    <link rel="alternate" href="/blog/overpacking-a-common-webpacker-mistake.html"/>
    <id>/blog/overpacking-a-common-webpacker-mistake.html</id>
    <published>2019-12-03T00:00:00+00:00</published>
    <updated>2019-12-03T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I recently encountered a Rails app at work that was spending nearly seven minutes precompiling assets:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-before-fix.png" alt="CI Screenshot: Precompile assets, 6:56"&gt;&lt;/p&gt;

&lt;p&gt;I looked in the &lt;code&gt;Gemfile&lt;/code&gt; and found the project was using Webpacker. My spidey sense started to tingle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've seen this before&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Leaning on prior...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I recently encountered a Rails app at work that was spending nearly seven minutes precompiling assets:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-before-fix.png" alt="CI Screenshot: Precompile assets, 6:56" /&gt;&lt;/p&gt;

&lt;p&gt;I looked in the &lt;code&gt;Gemfile&lt;/code&gt; and found the project was using Webpacker. My spidey sense started to tingle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;#39;ve seen this before&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Leaning on prior experience, I found the problem, moved some files around, and pushed a branch with the fix up to CI.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-after-fix.png" alt="CI Screenshot: Precompile assets, 0:44" /&gt;&lt;/p&gt;

&lt;p&gt;The build step dropped from nearly seven minutes to less than one. Big improvement! When I heard from the team, the fix also greatly improved the local development experience; before, re-compiling Webpack assets on page refreshes would take a painfully long time.&lt;/p&gt;

&lt;p&gt;So what were the changes?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using Webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="a-common-problem" class="title title-h3"&gt;
        &lt;a name="a-common-problem" class="anchor" href="#a-common-problem"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A Common Problem
      &lt;/h3&gt;
    
&lt;p&gt;First, let&amp;#39;s take a step back. If you&amp;#39;re new to Webpack and Webpacker for Rails, chances are you may be making some simple mistakes.&lt;/p&gt;

&lt;p&gt;I know this because I was once in your shoes struggling to learn how Webpack works. I&amp;#39;ve also spent a lot of time helping others on my team, on StackOverflow, and via &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;rails/webpacker&lt;/code&gt;&lt;/a&gt; Github issues.&lt;/p&gt;

&lt;p&gt;One of the most frequently-reported issues I&amp;#39;ve seen is slow build times. This is often coupled with high memory and CPU usage. For Heroku users on small dynos, resource-intensive asset precompilation can lead to failed deploys.&lt;/p&gt;

&lt;p&gt;More often than not, the root cause is a simple oversight in directory structure—a mistake I call &amp;quot;overpacking&amp;quot;.&lt;/p&gt;

      &lt;h3 id="overpacking-explained" class="title title-h3"&gt;
        &lt;a name="overpacking-explained" class="anchor" href="#overpacking-explained"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Overpacking explained
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the layout of the &lt;code&gt;app/javascript&lt;/code&gt; directory in the Rails app &lt;em&gt;before&lt;/em&gt; I introduced the fix:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rake assets:precompile — 6:56&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/
  javascript/
    packs/
      application.js
      components/     # lots of files
      images/         # lots of files
      stylesheets/    # lots of files
      ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#39;s what the project looked like building in under a minute:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rake assets:precompile — 0:44&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/
  javascript/
    components/
    images/
    stylesheets/
    ...
    packs/
      application.js    # just one file in packs/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;The primary change here was moving everything except &lt;code&gt;application.js&lt;/code&gt; outside of the &lt;code&gt;packs&lt;/code&gt; directory under &lt;code&gt;app/javascript&lt;/code&gt;. (To make this work properly, I also had to update some relative paths in &lt;code&gt;import&lt;/code&gt; statements.)&lt;/p&gt;

      &lt;h3 id="webpack-entry-points" class="title title-h3"&gt;
        &lt;a name="webpack-entry-points" class="anchor" href="#webpack-entry-points"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Webpack Entry Points
      &lt;/h3&gt;
    
&lt;p&gt;So why did this matter?&lt;/p&gt;

&lt;p&gt;Webpack needs at least one &lt;strong&gt;entry&lt;/strong&gt; point to build the dependency graph for produce the JavaScript and CSS bundles and static assets (images, fonts, etc).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Webpacker project refers to entries as &lt;strong&gt;packs&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;quot;Entry&amp;quot; is listed as the first key concept on Webpack&amp;#39;s documentation site: &lt;a href="https://webpack.js.org/concepts/#entry" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/concepts/#entry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Webpack will build a separate dependency graph for every entry specified in its configuration. The more entry points you provide, the more dependency graphs Webpack has to build.&lt;/p&gt;

&lt;p&gt;Since Webpack*er*, by default, treats &lt;em&gt;every file&lt;/em&gt; in the &lt;code&gt;packs&lt;/code&gt; directory as a separate entry, it will build a separate dependency graph for &lt;em&gt;every file&lt;/em&gt; located there.&lt;/p&gt;

&lt;p&gt;That also means, for &lt;em&gt;every file&lt;/em&gt; in the &lt;code&gt;packs&lt;/code&gt; directory, there will be at least one, possibly more, files emitted as output in the &lt;code&gt;public&lt;/code&gt; directory during precompilation. If you&amp;#39;re not linking to these files anywhere in your app, then they don&amp;#39;t need to be emitted as output. For a large project, that could be lot of unnecessary work.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a case where Rails tries to make things easier for you—by auto-configuring entry files—while also making it easier to shoot yourself in the foot.&lt;/p&gt;

      &lt;h3 id="a-simple-rule" class="title title-h3"&gt;
        &lt;a name="a-simple-rule" class="anchor" href="#a-simple-rule"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A Simple Rule
      &lt;/h3&gt;
    
&lt;p&gt;Is your Webpacker compilation taking forever? You may be overpacking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If any file in Webpacker&amp;#39;s &amp;quot;packs&amp;quot; directory does not also have a corresponding &lt;code&gt;javascript_pack_tag&lt;/code&gt; in your application, then you&amp;#39;re overpacking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be good to yourself and your development and deployment experience by being very intentional about what files you put in your &amp;quot;packs&amp;quot; directory.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t overpack. At best, this is wasteful; at worst, this is a productivity killer.&lt;/p&gt;
</content>
  </entry>
</feed>
