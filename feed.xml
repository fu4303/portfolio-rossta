<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2017-11-05T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>How we switched from Sprockets to Webpack</title>
    <link rel="alternate" href="/blog/from-sprockets-to-webpack.html"/>
    <id>/blog/from-sprockets-to-webpack.html</id>
    <published>2017-11-05T00:00:00+00:00</published>
    <updated>2017-11-05T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;In case you missed the news, &lt;a href="http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/"&gt;Rails is loving JavaScript&lt;/a&gt; and Rails 5.1 ships with the option to compile JavaScript with &lt;a href="https://webpack.js.org"&gt;Webpack&lt;/a&gt; via the &lt;a href="https://github.com/rails/webpacker"&gt;Webpacker gem&lt;/a&gt;. This is a big change after years of the Rails asset pipeline running on Sprockets. My team at &lt;a href="https://learnzillion.com"&gt;LearnZillion&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In case you missed the news, &lt;a href="http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/"&gt;Rails is loving JavaScript&lt;/a&gt; and Rails 5.1 ships with the option to compile JavaScript with &lt;a href="https://webpack.js.org"&gt;Webpack&lt;/a&gt; via the &lt;a href="https://github.com/rails/webpacker"&gt;Webpacker gem&lt;/a&gt;. This is a big change after years of the Rails asset pipeline running on Sprockets. My team at &lt;a href="https://learnzillion.com"&gt;LearnZillion&lt;/a&gt; recently decided to embrace this change and make the switch to Webpack with Webpacker to compile our clientside JavasScript for our Rails 4.2 application. &lt;em&gt;Gulp!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post describes the challenges we encountered while switching from Sprockets to Webpack, how we solved those issues, and what we learned along the way.&lt;/p&gt;

&lt;p&gt;Though much of what follows may be generally relevant to other teams considering a similar change, this post is not intended to be a step-by-step guide for replacing the Rails asset pipeline with Webpack. This post also won&amp;#39;t help you integrate with of the currently popular frameworks like React, Angular, Vue, or Ember (we use Knockout.js).&lt;/p&gt;

&lt;p&gt;That said, if you&amp;#39;re working in a legacy Rails application and considering Webpack, perhaps you can learn from our mistakes.&lt;/p&gt;

      &lt;h2 id="table-of-contents" class="title"&gt;
        &lt;a name="table-of-contents" class="anchor" href="#table-of-contents"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Table of Contents
      &lt;/h2&gt;
    
&lt;ol&gt;
&lt;li&gt;&lt;a href="#why-switch-"&gt;Why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpack-the-rails-way"&gt;Webpack, the Rails Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-a-plan"&gt;Making a plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-webpack-entries"&gt;Setting up Webpack entries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#maintaining-backwards-compatibility"&gt;Maintaining backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-a-javascript-module"&gt;Migrating a JavaScript module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exporting-from-webpack"&gt;Exporting from Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resolving-application-modules"&gt;Resolving application modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extending-the-webpack-configuration"&gt;Extending the Webpack configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#importing-libraries-and-global-scope"&gt;Importing libraries and global scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#discovering-webpack-chunks"&gt;Discovering Webpack chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extracting-common-chunks"&gt;Extracting common chunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-predictable-long-term-caching"&gt;Adding predictable long-term caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-party-stylesheets-images-and-fonts"&gt;Third party stylesheets, images, and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-with-capistrano-and-nginx"&gt;Deploying with Capistrano and Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unit-testing-with-karma"&gt;Unit testing with Karma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-development-with-ssl"&gt;Local development with SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      &lt;h2 id="why-switch-" class="title"&gt;
        &lt;a name="why-switch-" class="anchor" href="#why-switch-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why switch?
      &lt;/h2&gt;
    
&lt;p&gt;The asset pipeline was revolutionary in the Rails community when it was first introduced in Rails 3.1 and it has served our project well over the years. In the mean time, JavaScript has exploded in popularity and the collective efforts of the community have led to many improvements, including in the domain the Sprockets was originally created to solve.&lt;/p&gt;

&lt;p&gt;Given this context, here are a few reasons we decided to switch (paraphrasing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sprockets is too slow, i.e., in development, we don&amp;#39;t want to run JavaScript compilation through our Rails process&lt;/li&gt;
&lt;li&gt;To adopt ES6 syntax and &lt;a href="https://github.com/TannerRogalsky/sprockets-es6#sprockets-es6"&gt;Sprockets support for ES6 is experimental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For advanced features not available in Sprockets (or without extra effort), i.e., modularity, tree-shaking, live-reload, configurable source-maps, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though there are number of JavaScript tools that we could have chosen instead Webpack, our decision here was pretty simple. As a team policy, we aim to stick with Rails conventions where possible. Given the official support in Rails and the general momentum in the Webpack community, this was the appropriate choice for our team.&lt;/p&gt;

      &lt;h2 id="webpack-the-rails-way" class="title"&gt;
        &lt;a name="webpack-the-rails-way" class="anchor" href="#webpack-the-rails-way"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Webpack, the Rails Way
      &lt;/h2&gt;
    
&lt;p&gt;&lt;a href="https://github.com/rails/webpacker"&gt;Webpacker&lt;/a&gt; is the official Rails gem for integrating Webpack with Rails. &lt;a href="https://medium.com/@gauravtiwari"&gt;Guarav Tiwari&lt;/a&gt; recently wrote a &lt;a href="https://medium.com/statuscode/introducing-webpacker-7136d66cddfb"&gt;detailed introduction to Webpacker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why does Webpacker exist?&lt;/p&gt;

&lt;p&gt;First, Webpacker helps make Webpack &lt;em&gt;Rails-friendly&lt;/em&gt;. Webpack is powerful tool built to be extremely flexible. As a consequence, it is fairly complex to configure from scratch making it somewhat of an odd choice for Rails, which promotes &lt;em&gt;convention over configuration&lt;/em&gt;. Webpacker fills the gap. The gem introduces some conventions and abstracts away a default configuration to make it easier to get up-and-running with, for example, out-of-the-box ES6 syntax support through integration with &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, Webpacker helps form the bridge between the Webpack build and the Rails application. Rails needs to be able to render &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags for Webpack assets in views. Webpacker provides helpers, including &lt;code&gt;javascript_pack_tag&lt;/code&gt;, for this purpose.&lt;/p&gt;

&lt;p&gt;By Webpacker convention, Webpack will build JavaScript from source files located in &lt;code&gt;app/javascript&lt;/code&gt; (a new addition to the traditional Rails directory structure) and from &lt;code&gt;node_modules&lt;/code&gt; installed via &lt;code&gt;yarn&lt;/code&gt;. To determine what dependencies to build, Webpack is configured by Webpacker to treat each file in &lt;code&gt;app/javascript/packs&lt;/code&gt; as a separate &lt;a href="https://webpack.js.org/concepts/#entry"&gt;entry&lt;/a&gt; point. Entries in Webpack are analogous to JavaScript assets configured for Sprockets compilation via &lt;code&gt;Rails.configuration.assets.precompile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For deployment, the precompile task, &lt;code&gt;rake assets:precompile&lt;/code&gt;, runs both Sprockets and Webpack build steps. By default, each Webpack entry will correspond to an output file that will be compiled to the &lt;code&gt;public/packs&lt;/code&gt; directory in production, analogous to the &lt;code&gt;public/assets&lt;/code&gt; directory for Sprockets builds. Webpack generates a &lt;code&gt;manifest.json&lt;/code&gt; in &lt;code&gt;public/packs&lt;/code&gt; that maps asset names to their locations. Rails will read the manifest to determine the urls for Webpack assets.&lt;/p&gt;

&lt;p&gt;In development, there is the option to run the Webpack dev server alongside the Rails server. The benefit is the Webpack dev server will listen for JavaScript source file changes, recompile, and reload the browser automatically. To help make setup easier, Webpacker inserts a Rails middleware in development to proxy Webpack asset requests to the dev server.&lt;/p&gt;

      &lt;h2 id="making-a-plan" class="title"&gt;
        &lt;a name="making-a-plan" class="anchor" href="#making-a-plan"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Making a plan
      &lt;/h2&gt;
    
&lt;p&gt;The key feature of Webpacker critical to our decision to making the switch is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Webpacker allows Webpack and Sprockets to be used side-by-side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ability to compile &lt;code&gt;some_module.js&lt;/code&gt; via Webpack and &lt;code&gt;another_module.js&lt;/code&gt; via Sprockets allowed us to move dependencies over to Webpack gradually, in small changesets. With any upgrade, our primary goal is &lt;em&gt;Don&amp;#39;t break the site.&lt;/em&gt; and the incremental adoption of Webpack allowed us to more easily address issues through our continuous integration and QA process.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a high level overview of how we broke down the move to Webpack from Sprockets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Prep phase&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add Webpacker and setup dependencies in development and remote servers (upgrade &lt;code&gt;node.js&lt;/code&gt;, install &lt;code&gt;yarn&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Deploy a small Webpack bundle (with no critical code) to iron out deployment concerns, including Nginx and capistrano configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Migration phase&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move our third-party dependencies from Rails asset gems to NPM packages via Webpack&lt;/li&gt;
&lt;li&gt;Move our application code to Webpack&lt;/li&gt;
&lt;li&gt;Modify Webpack configuration as needed to support new dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Cleanup phase&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove Rails assets gems and redundant Sprockets configuration&lt;/li&gt;
&lt;li&gt;Optimize our Webpack bundles&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our gradual approach to the migration had its downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We needed to figure out how to reference modules across two scopes&lt;/li&gt;
&lt;li&gt;We had a large suite of JavaScript unit tests to support in two separate testing environments&lt;/li&gt;
&lt;li&gt;We assumed global variables our in Sprockets-based JavaScript, so any module bundled by Webpack would need to be exposed to the global scope somehow&lt;/li&gt;
&lt;li&gt;We had a learning curve with Webpack such that simply moving a dependency from a Sprockets bundle to a Webpack bundle was not always straightforward&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Supporting both Sprockets or Webpack while we rolled out incremental changes required more effort and time. Given the rapid development cycle of Webpacker, Webpack, and its various plugins and utilities, we were continually upgrading and smoothing wrinkles throughout the process. Ultimately, this approach worked for us as it allowed time to wade into the Webpack waters while adopting new conventions along the way.&lt;/p&gt;

      &lt;h2 id="setting-up-webpack-entries" class="title"&gt;
        &lt;a name="setting-up-webpack-entries" class="anchor" href="#setting-up-webpack-entries"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Setting up Webpack entries
      &lt;/h2&gt;
    
&lt;p&gt;Our team traditionally has compiled two Sprockets bundles for the browser: let&amp;#39;s call them &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt;. The &lt;code&gt;vendor&lt;/code&gt; bundle is for our main bundle third party, infrequently changing libraries like &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;knockout.js&lt;/code&gt;, and &lt;code&gt;lodash&lt;/code&gt;. The &lt;code&gt;application&lt;/code&gt; bundle, which changes more often, is for smaller third party plugins and our application code.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an overview of what that looked like in our codebase:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/assets/javascript
|-- vendor.js
|-- application.js
|-- some_module.js
|-- another_module.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We rendered script tags for the vendor and application bundle respectively in the Rails application layout.&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- application.html.erb --&amp;gt;

&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- ... --&amp;gt;

        &amp;lt;%= javascript_include_tag &amp;#39;vendor&amp;#39; %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;#39;application&amp;#39; %&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To move dependencies to Webpack, we first created counterpart &amp;quot;packs&amp;quot; for &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Webpacker convention: each file in the packs directory serves as a separate entry point in Webpack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/assets/javascript
|-- vendor.js
|-- application.js
|-- another_module.js
|-- some_module.js
app/javascript
|-- packs
    |-- vendor.js
    |-- application.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We added script tags to the application layout using the helper provided by Webpacker &lt;code&gt;javascript_pack_tag&lt;/code&gt; to render Webpack bundles.&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- application.html.erb --&amp;gt;

&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- ... --&amp;gt;
        &amp;lt;%= javascript_pack_tag &amp;#39;vendor&amp;#39; %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;#39;vendor&amp;#39; %&amp;gt;

        &amp;lt;%= javascript_pack_tag &amp;#39;application&amp;#39; %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;#39;application&amp;#39; %&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea was that we could port dependencies from &lt;code&gt;app/assets/javascripts&lt;/code&gt; to &lt;code&gt;app/javascript&lt;/code&gt; one-by-one. So, we&amp;#39;d move &lt;code&gt;some_module.js&lt;/code&gt; from &lt;code&gt;app/assets/javascripts&lt;/code&gt; to &lt;code&gt;app/javascript&lt;/code&gt;, update its syntax to ES6.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/assets/javascript
|-- vendor.js
|-- application.js
|-- another_module.js
app/javascript
|-- some_module.js
|-- packs
    |-- vendor.js
    |-- application.js
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="maintaining-backwards-compatibility" class="title"&gt;
        &lt;a name="maintaining-backwards-compatibility" class="anchor" href="#maintaining-backwards-compatibility"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Maintaining backwards compatibility
      &lt;/h2&gt;
    
&lt;p&gt;As we moved libraries and individual components from the asset pipeline to Webpack, we needed to maintain backwards compatibility with our legacy JavaScript—-the un-migrated portion of our codebase.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, our legacy JavaScript relied heavily on the global scope. We have references to jQuery, lodash, knockout littered throughout our compiled code, Rails views, and Knockout templates. To minimize the risk in this migration, we weren&amp;#39;t going to change that.&lt;/p&gt;

&lt;p&gt;But why was this an issue?&lt;/p&gt;

&lt;p&gt;It helps to understand that Sprockets and Webpack are two completely different paradigms of bundling JavaScript for the browser. The differences get to the heart of &lt;a href="https://what-problem-does-it-solve.com/webpack/intro.html#what-problem-does-webpack-solve"&gt;how Webpack works&lt;/a&gt;. Instead of concatenating all your JavaScript into the global scope, as Sprockets does, Webpack provides a runtime that compartmentalizes each JavaScript module into separate scopes via closures so that access between modules must be declared via imports. By default, none of these modules are exposed to the global scope.&lt;/p&gt;

&lt;aside class="callout panel"&gt;
&lt;h3&gt;What problem does Webpack solve?&lt;/h3&gt;
&lt;p&gt;
For more background on this topic, checkout &lt;a href="https://twitter.com/davetron5000"&gt;David Copeland's&lt;/a&gt; recent book, &lt;a href="https://what-problem-does-it-solve.com/webpack/intro.html"&gt;Webpack from Nothing&lt;/a&gt;. It may also help to understand the code that Webpack generates to form the runtime, which &lt;a href="https://twitter.com/seanlandsman"&gt;Sean Landsman&lt;/a&gt; nicely explains in &lt;a href="https://www.ag-grid.com/ag-grid-understanding-webpack/"&gt;Understanding How Webpack Works&lt;/a&gt;.
&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;We decided, as a policy. we did not want our Webpack modules to depend on global variables. This meant we would have no references to Sprockets-compiled code in our Webpack pipeline. Therefore, to migrate an individual file, &lt;code&gt;some_module.js&lt;/code&gt;, we needed to answer two questions first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can we import all third party dependencies of &lt;code&gt;some_module.js&lt;/code&gt; from Webpack?&lt;/li&gt;
&lt;li&gt;can we import all application dependencies of &lt;code&gt;some_module.js&lt;/code&gt; from Webpack?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In reality, we had to compromise in some cases. While most of our third party JavaScript could be moved to &lt;code&gt;node_modules&lt;/code&gt;, we also relied on a number of vendor JavaScript APIs loaded via script tags in the browser. For example, since we don&amp;#39;t compile our Google Analytics script via Webpack and instead load this script from Google&amp;#39;s servers, we left global references to &lt;code&gt;window.ga&lt;/code&gt; in our codebase.&lt;/p&gt;

      &lt;h2 id="migrating-a-javascript-module" class="title"&gt;
        &lt;a name="migrating-a-javascript-module" class="anchor" href="#migrating-a-javascript-module"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Migrating a Javascript Module
      &lt;/h2&gt;
    
&lt;p&gt;Our legacy JavaScript application consistently followed a pattern of defining and accessing properties on a global JavaScript object: &lt;code&gt;window.App&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/assets/javascripts/some_module.js

App = App || {};

App.SomeModule = (function() {
  someMethod: function() {
    var timestamp = moment();
    return App.AnotherModule.method(timestamp);
  }
}();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we moved them over to Webpack, the new version of the file above might look like the example below as we converted to ES6 syntax and replaced global references with imports:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/some_module.js

import moment from &amp;#39;moment&amp;#39;;
import AnotherModule from &amp;#39;./another_module&amp;#39;;

const SomeModule = {
  someMethod() {
    const timestamp = moment();
    return AnotherModule.method(timestamp);
  }
};

export default SomeModule;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;#39;s a problem though. Once &lt;code&gt;SomeModule&lt;/code&gt; moved to Webpack, it was no longer available in the global scope as a property of &lt;code&gt;App&lt;/code&gt;. References to &lt;code&gt;App.SomeModule&lt;/code&gt; in Sprockets would be &lt;code&gt;undefined&lt;/code&gt;. To maintain backwards compatibility, we had to find a way to make &lt;code&gt;SomeModule&lt;/code&gt; available in both Webpack and Sprockets.&lt;/p&gt;

&lt;p&gt;Practically, this meant &lt;code&gt;SomeModule&lt;/code&gt; could be available both as an import in Webpack...&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import SomeModule from &amp;#39;../some_module&amp;#39;;

SomeModule.someMethod();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;...and in the global scope as a property the global &lt;code&gt;App&lt;/code&gt; instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;App.SomeModule.someMethod();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, we wanted to have our ES6 module cake and eat it too. Luckily, Webpack provides a mechanism to do this.&lt;/p&gt;

&lt;aside class="callout panel"&gt;
&lt;h3&gt;Guest appearance by TSort&lt;/h3&gt;
&lt;p&gt;
To ensure we selected modules to migrate in the right order, we wrote a short script using &lt;a href="https://ruby-doc.org/stdlib-2.3.0/libdoc/tsort/rdoc/TSort.html"&gt;Ruby's &lt;code&gt;TSort&lt;/code&gt; module&lt;/a&gt;. &lt;code&gt;TSort&lt;/code&gt; is for topological sorting, which is to say, given a list of dependencies, sort them in a valid order such that all the dependencies of a given item are satisfied before processing that item. I'll go into more detail about how we did this in another post.
&lt;/p&gt;
&lt;/aside&gt;

      &lt;h2 id="exporting-from-webpack" class="title"&gt;
        &lt;a name="exporting-from-webpack" class="anchor" href="#exporting-from-webpack"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Exporting from Webpack
      &lt;/h2&gt;
    
&lt;p&gt;Webpack provides for a use case that met our needs: that of library authors. This entails &lt;a href="https://webpack.js.org/configuration/output/#output-library"&gt;configuring the Webpack output to export a variable&lt;/a&gt; to its receiving scope�—in our case, the browser &lt;code&gt;window&lt;/code&gt;. That meant we would package our Webpack modules into a library for our Sprockets code!&lt;/p&gt;

&lt;p&gt;To do this, we modified our Webpack config:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/shared.js

output: {
  // Makes exports from entry packs available to global scope, e.g.
  library: [&amp;#39;Packs&amp;#39;, &amp;#39;[name]&amp;#39;],
  libraryTarget: &amp;#39;var&amp;#39;
},

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above configuration, Webpack will export a module called &lt;code&gt;Packs&lt;/code&gt; to the global scope. The &lt;code&gt;Packs&lt;/code&gt; variable will have a property corresponding to each &lt;code&gt;entry&lt;/code&gt; by name. In our case, this means Webpack exports a &lt;code&gt;Packs.vendor&lt;/code&gt; and &lt;code&gt;Packs.application&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;To add modules to the library, we export them from our entry files. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

export { default as SomeModule } from &amp;#39;./some_module`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Webpack would then make &lt;code&gt;SomeModule&lt;/code&gt; a property of the &lt;code&gt;Packs.application&lt;/code&gt; module, i.e., &lt;code&gt;Packs.application.SomeModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;Packs&lt;/code&gt; variable gets exported to the global scope. We added some glue code to merge our &lt;code&gt;Packs&lt;/code&gt; modules into the &lt;code&gt;App&lt;/code&gt; namespace as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/assets/javascripts/application.js

App = App || {};
_.assign(App, Packs.application);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Now, we&amp;#39;d be able to use our Webpack-compiled module as &lt;code&gt;App.SomeModule&lt;/code&gt; in Sprockets without making any other changes to our legacy JavaScript.&lt;/p&gt;

      &lt;h2 id="resolving-application-modules" class="title"&gt;
        &lt;a name="resolving-application-modules" class="anchor" href="#resolving-application-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Resolving application modules
      &lt;/h2&gt;
    
&lt;p&gt;As a convenience, we learned to resolve modules in our application as &lt;code&gt;import &amp;#39;some_module&amp;#39;&lt;/code&gt; instead of via relative paths like &lt;code&gt;import &amp;#39;../some_module&lt;/code&gt;. To do this, we set up an alias in &lt;code&gt;.babelrc&lt;/code&gt;. Webpacker installs &lt;code&gt;.babelrc&lt;/code&gt; as a separate configuration file for Babel. We added the &lt;code&gt;babel-plugin-module-resolver&lt;/code&gt; and updated the relevant section in our &lt;code&gt;.babelrc&lt;/code&gt; in the plugins section:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// .babelrc

{
  // ...
  &amp;quot;plugins&amp;quot;: [
    // ...
    [&amp;quot;module-resolver&amp;quot;, { &amp;quot;root&amp;quot;: [&amp;quot;./app/javascript&amp;quot;], &amp;quot;alias&amp;quot;: {} }]
  ],
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="extending-the-webpack-configuration" class="title"&gt;
        &lt;a name="extending-the-webpack-configuration" class="anchor" href="#extending-the-webpack-configuration"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Extending the Webpack configuration
      &lt;/h2&gt;
    
&lt;p&gt;Though Webpacker&amp;#39;s default configuration made it easy to get started, we soon ran into the need to modify it to fit our needs. The configuration is extracted away in the &lt;code&gt;@rails/webpacker&lt;/code&gt; NPM package, so we often revisit the source and debug it in the node REPL.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ NODE_ENV=development node
&amp;gt; let config = require(&amp;#39;./config/webpack/development&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a shared file in the &lt;code&gt;config/webpack&lt;/code&gt; directory that imports the Webpack configuration through its API and exports the modified config object for the enviornment-specific config files to consume.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// config/webpack/environment.js

const {environment} = require(&amp;#39;@rails/webpacker&amp;#39;);
module.exports = environment;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// config/webpack/shared.js

const merge = require(&amp;#39;webpack-merge&amp;#39;);
const environment = require(&amp;#39;./environment&amp;#39;);

// make changes
environment.loaders.set(&amp;#39;ChosenJSLoader&amp;#39;, {
    test: require.resolve(&amp;quot;chosen-js&amp;quot;),
    use: [&amp;quot;script-loader&amp;quot;],
  },
);

environment.plugins.set(&amp;#39;CommonsChunkPlugin&amp;#39;
    new webpack.optimize.CommonsChunkPlugin({ options });

const config = environment.toWebpackConfig();

const additionalConfig = {
  // stuff to add
};

module.exports = merge(config, additionalConfig);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// config/webpack/development.js

module.exports = require(&amp;#39;./shared&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Webpacker docs also provide &lt;a href="https://github.com/rails/webpacker/blob/05bf821ce983a2ad88fba0da476023e67f8efe43/docs/webpack.md#configuration"&gt;some helpful tips&lt;/a&gt; on how to extend the default configuration.&lt;/p&gt;

      &lt;h2 id="importing-libraries-and-global-scope" class="title"&gt;
        &lt;a name="importing-libraries-and-global-scope" class="anchor" href="#importing-libraries-and-global-scope"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Importing libraries and global scope
      &lt;/h2&gt;
    
&lt;p&gt;Though Webpack tries hard to encourage you to avoid exporting your dependencies to the global scope. Recall this wasn&amp;#39;t an option for us.&lt;/p&gt;

&lt;p&gt;To make our third party JavaScript libraries, like jQuery and knockout, available in the global scope, we added special &lt;a href="https://webpack.js.org/concepts/loaders/"&gt;loader&lt;/a&gt; to the Webpack pipeline. A Webpack loader generally describes a type of transformation for a given file type. For example, &lt;a href="https://github.com/rails/webpacker/blob/b2d899b25fb9f1cb11426b1b5e2d699c680bdcf6/package/loaders/babel.js"&gt;Babel integrates with Webpack via a loader&lt;/a&gt; in Webpacker to transform any JavaScript file from ES6 to ES5 syntax.&lt;/p&gt;

&lt;p&gt;One way to instruct Webpack to expose variables exported by a given library to the global scope is via the official &lt;a href="https://github.com/webpack-contrib/expose-loader"&gt;&lt;code&gt;expose-loader&lt;/code&gt;&lt;/a&gt;. To use this loader, we updated the default Webpack config provided by Webpacker to ensure that our Webpack-compiled &lt;code&gt;jQuery&lt;/code&gt; package is made available in the global scope for our legacy JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/shared.js

module: {
  rules: [
   {
      test: require.resolve(&amp;#39;jquery&amp;#39;),
      use: [{
        loader: &amp;#39;expose-loader&amp;#39;,
        options: &amp;#39;$&amp;#39;,
      }, {
        loader: &amp;#39;expose-loader&amp;#39;,
        options: &amp;#39;jQuery&amp;#39;,
      }],
    },

    // ... other custom loader rules
  ],
},

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have similar &lt;code&gt;expose-loader&lt;/code&gt; rules for each of our commonly-used libraries such as &lt;code&gt;knockout&lt;/code&gt; and &lt;code&gt;lodash&lt;/code&gt;.&lt;/p&gt;

      &lt;h2 id="discovering-webpack-chunks" class="title"&gt;
        &lt;a name="discovering-webpack-chunks" class="anchor" href="#discovering-webpack-chunks"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Discovering Webpack chunks
      &lt;/h2&gt;
    
&lt;p&gt;However, after adding &lt;code&gt;expose-loader&lt;/code&gt; for jQuery, not everything worked as we expected in the early going.&lt;/p&gt;

&lt;p&gt;Consider the following where we import jQuery in &lt;code&gt;vendor.js&lt;/code&gt;. Then we&amp;#39;ve added the &lt;code&gt;chosen-js&lt;/code&gt; package and import it in &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/vendor.js

import &amp;#39;jquery&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;chosen-js&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can show that this works on the Dev Tools console:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&amp;gt; typeof $.fn.chosen
&amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we installed another jQuery plugin, like &lt;code&gt;slick-carousel&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/vendor.js

import &amp;#39;jquery&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;chosen-js&amp;#39;;
import &amp;#39;slick-carousel&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the Dev Tools console, we can test for the new plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&amp;gt; typeof $.fn.slick
&amp;quot;function&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But something happened. The &lt;code&gt;chosen&lt;/code&gt; plugin is missing:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&amp;gt; typeof $.fn.chosen
&amp;quot;undefined&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not expected! Clearly, there are some side effects from importing these packages in Webpack. Turns out, there were a couple issues here converging at once.&lt;/p&gt;

&lt;p&gt;At this point, it would help to visualize what&amp;#39;s happening in our Webpack bundles. We can do this in development with &lt;a href="https://github.com/robertknight/webpack-bundle-size-analyzer"&gt;&lt;code&gt;webpack-bundler-analyzer&lt;/code&gt;&lt;/a&gt;. Adding this plugin to our Webpack config produces a separate local webserver that graphs the packages used in each bundle.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the analyzer produced before we added &lt;code&gt;slick-carousel&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack-bundle-analyzer-one-jquery-73ee3547.png" alt="Webpack bundle analyzer one jquery" /&gt;&lt;/p&gt;

&lt;p&gt;And after we added &lt;code&gt;slick-carousel&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack-bundle-analyzer-two-jquerys-b74a1ea8.png" alt="Webpack bundle analyzer two jquerys" /&gt;&lt;/p&gt;

&lt;p&gt;Two jQuerys! (You may have noticed some other modules are duplicated as well.)&lt;/p&gt;

&lt;p&gt;It turns out that &lt;code&gt;slick-carousel&lt;/code&gt; employs a common pattern in modern JavaScript packages to detect the presence of a JavaScript module loader API, such as Asynchronous Module Definition (AMD) or CommonJS. The pattern looks something like this, &lt;a href="https://github.com/kenwheeler/slick/blob/ee7d37faeb92c4619ffeefeba2cc4c733f39b1b3/slick/slick.js#L18"&gt;excerpted from the &lt;code&gt;slick-carousel&lt;/code&gt; source&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;;(function(factory) {
    &amp;#39;use strict&amp;#39;;
    if (typeof define === &amp;#39;function&amp;#39; &amp;amp;&amp;amp; define.amd) {
        define([&amp;#39;jquery&amp;#39;], factory);
    } else if (typeof exports !== &amp;#39;undefined&amp;#39;) {
        module.exports = factory(require(&amp;#39;jquery&amp;#39;));
    } else {
        factory(jQuery);
    }

}(function($) {
  // library code
  // ...
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Webpack recognizes both AMD &lt;code&gt;define&lt;/code&gt; and CommonJs style &lt;code&gt;require&lt;/code&gt; to resolve modules. Since &lt;code&gt;slick-carousel&lt;/code&gt; imports &lt;code&gt;jQuery&lt;/code&gt;, as seen in the except above, it&amp;#39;s now included in the &lt;code&gt;application.js&lt;/code&gt; bundle. Webpack knows nothing about how we&amp;#39;re including both &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt; in the same HTML page, so it happily includes &lt;code&gt;jQuery&lt;/code&gt; in both bundles—exactly as it&amp;#39;s been instructed to do.&lt;/p&gt;

&lt;p&gt;Ok, but why didn&amp;#39;t we see two jQuerys when we included &lt;code&gt;chosen-js&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The reason is that the Chosen jQuery plugin only works with browser globals, as described by &lt;a href="https://github.com/harvesthq/chosen/issues/2215"&gt;this issue on the chosen-js GitHub repository&lt;/a&gt;. It doesn&amp;#39;t use a module loader pattern, so if we hadn&amp;#39;t exported &lt;code&gt;jQuery&lt;/code&gt; to global scope in the first place, it wouldn&amp;#39;t have worked at all. In that case, we would have followed &lt;a href="http://reactkungfu.com/2015/10/integrating-jquery-chosen-with-webpack-using-imports-loader/"&gt;this post that describes how to integrate Chosen with Webpack using the &lt;code&gt;imports-loader&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When we import &lt;code&gt;chosen-js&lt;/code&gt; in the &lt;code&gt;application.js&lt;/code&gt; bundle, it attaches itself to the global &lt;code&gt;jQuery&lt;/code&gt; instance we imported in &lt;code&gt;vendor.js&lt;/code&gt;. When we then import &lt;code&gt;slick-carousel&lt;/code&gt;, it subsequently imports &lt;code&gt;jQuery&lt;/code&gt; again, which is represented by a separate &amp;quot;chunk&amp;quot; in Webpack. This new instance of &lt;code&gt;jQuery&lt;/code&gt; clobbers the original instance in the global. Since the original instance is the one to which the Chosen plugin attached itself, no &lt;code&gt;$.fn.chosen&lt;/code&gt; function appears in the browser.&lt;/p&gt;

&lt;p&gt;Luckily, you don&amp;#39;t have to resort to global variables just to use Chosen or most other packages that fail to employ the module loader pattern. In most cases, there&amp;#39;s a loader (or plugin) for that! The Webpack documentation devotes an entire &lt;a href="https://webpack.js.org/guides/shimming/"&gt;guide to shimming modules&lt;/a&gt; that&amp;#39;s worth your time.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re not able to shim a module, you can always resort to the &lt;a href="https://webpack.js.org/loaders/script-loader/"&gt;&lt;code&gt;script-loader&lt;/code&gt;&lt;/a&gt;, which will evaluate the module in the global context. The main takeaway here is you may have to roll up your sleeves and dig into the source of your dependencies to understand whether they&amp;#39;ll work in the Webpack context and/or whether you&amp;#39;ll need to integrate with a loader or plugin.&lt;/p&gt;

&lt;p&gt;Through our debugging sessions we came to learn a good lesson the hard way:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Importing a new Webpack dependency may have side effects you did not anticipate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To avoid any misunderstanding about the affects of adding new dependencies to Wepback, it helps to have a visual model of the Webpack &amp;quot;chunks&amp;quot;. The &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; is a good place to start.&lt;/p&gt;

      &lt;h2 id="extracting-common-chunks" class="title"&gt;
        &lt;a name="extracting-common-chunks" class="anchor" href="#extracting-common-chunks"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Extracting common chunks
      &lt;/h2&gt;
    
&lt;p&gt;We fixed the &amp;quot;two jQuerys&amp;quot; problem with some additional Webpack configuration. We essentially have to instruct Webpack to pull jQuery (or just about any module) into only one bundle.&lt;/p&gt;

&lt;p&gt;Two promising strategies of note include use of community supported Webpack plugins. One of these is the &lt;a href="https://webpack.js.org/plugins/dll-plugin/"&gt;&lt;code&gt;DllPlugin&lt;/code&gt;&lt;/a&gt;, which is a powerful way to split bundles and drastically improve build performance. It&amp;#39;s also a bit more complex to setup and requires an extra build step.&lt;/p&gt;

&lt;p&gt;We decided to use the &lt;a href="https://webpack.js.org/plugins/commons-chunk-plugin/"&gt;CommonsChunkPlugin&lt;/a&gt; instead as this was bit easier to setup in Webpacker. (If you&amp;#39;re interested in setting up the DllPlugin with Webpacker, &lt;a href="https://github.com/rails/webpacker/issues/702"&gt;check out this thread on GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To ensure jQuery and any other package from &lt;code&gt;node_modules&lt;/code&gt; ends up in the &lt;code&gt;vendor.js&lt;/code&gt; bundle only, we add something like this to our Webpack plugins configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;new webpack.optimize.CommonsChunkPlugin({
  name: &amp;#39;vendor&amp;#39;,
  chunks: [&amp;#39;vendor&amp;#39;, &amp;#39;application&amp;#39;],
  minChunks(module) {
    return module.context &amp;amp;&amp;amp; module.context.indexOf(&amp;#39;node_modules&amp;#39;) &amp;gt;= 0;
  },
}),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This basic config basically says, take any &amp;quot;chunk&amp;quot; (effectively, a module) that is loaded from &lt;code&gt;node_modules&lt;/code&gt; and occurs in both &lt;code&gt;vendor.js&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt;, and extract it only to &lt;code&gt;vendor.js&lt;/code&gt; in a way that can be shared by both modules. Rebuilding with this setup fixed our jQuery plugin issue (among other side effects of clobbering global variables).&lt;/p&gt;

      &lt;h2 id="adding-predictable-long-term-caching" class="title"&gt;
        &lt;a name="adding-predictable-long-term-caching" class="anchor" href="#adding-predictable-long-term-caching"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Adding predictable long term caching
      &lt;/h2&gt;
    
&lt;p&gt;We learned though that we had a problem with our initial &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; configuration.&lt;/p&gt;

&lt;p&gt;Without prior knowledge of how Webpack works, one might expect that making a change only to a module imported by &lt;code&gt;application.js&lt;/code&gt; would only affect only the application bundle output during a deploy. While using the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; configuration as shown in the previous section this is, in fact, not the case.&lt;/p&gt;

&lt;p&gt;To demonstrate, let&amp;#39;s say all we did was import jQuery in our vendor bundle and &lt;code&gt;./some_module&lt;/code&gt; in our application bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/vendor.js

import &amp;#39;jquery&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import SomeModule from &amp;#39;../some_module&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#39;s the output of the Webpack build, using the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; setup as described in the previous section:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ bin/webpack
Hash: 6331dfce0c27b4723c58
Version: webpack 3.8.1
Time: 779ms
                              Asset       Size  Chunks                    Chunk Names
application-5b435b20467ae799d8e6.js    3.42 kB       0  [emitted]         application
     vendor-282477ba5e90974e92cb.js     789 kB       1  [emitted]  [big]  vendor
                      manifest.json  124 bytes          [emitted]
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the digest of the application and vendor bundles under &amp;quot;Asset&amp;quot;: &lt;code&gt;application-5b435b20467ae799d8e6.js&lt;/code&gt; and &lt;code&gt;vendor-282477ba5e90974e92cb.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s make only a change to &lt;code&gt;application.js&lt;/code&gt; as below. &lt;code&gt;AnotherModule&lt;/code&gt; brings in no new dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import SomeModule from &amp;#39;../some_module&amp;#39;;
import AnotherModule from &amp;#39;../another_module&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rebuilding now, we might expect only the digest for &lt;code&gt;application.js&lt;/code&gt; would change:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ bin/webpack
Hash: 7a033d5c3c2dffec095b
Version: webpack 3.8.1
Time: 758ms
                              Asset       Size  Chunks                    Chunk Names
application-80aab62cb2b8b0bfd6f3.js     4.5 kB       0  [emitted]         application
     vendor-a5762b269bc7170f5a51.js     789 kB       1  [emitted]  [big]  vendor
                      manifest.json  124 bytes          [emitted]
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, you&amp;#39;ll notice both the application and vendor digests changed. Again, not expected!&lt;/p&gt;

&lt;p&gt;The root problem (and solution) gets into the real meat of how Webpack works under the hood. First, here is &lt;a href="https://www.ag-grid.com/ag-grid-understanding-webpack/"&gt;an article that has helped us better understand how Webpack works&lt;/a&gt; including its use of module ids to link modules in the Webpack runtime.&lt;/p&gt;

&lt;p&gt;Building on that primer, we followed the steps outlined in this &lt;a href="https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31"&gt;great article on predictable long term caching&lt;/a&gt; to ensure Webpack generates the same fingerprinted output for our infrequently changing vendor bundle.&lt;/p&gt;

      &lt;h2 id="third-party-stylesheets-images-and-fonts" class="title"&gt;
        &lt;a name="third-party-stylesheets-images-and-fonts" class="anchor" href="#third-party-stylesheets-images-and-fonts"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Third-party stylesheets, images, and fonts
      &lt;/h2&gt;
    
&lt;p&gt;Since we decided to leave stylesheets, images, and fonts in &lt;code&gt;app/assets&lt;/code&gt; &lt;em&gt;under Sprockets compilation&lt;/em&gt;, we needed to make Sprockets aware of asset sources we we now installing as NPM modules.&lt;/p&gt;

&lt;p&gt;In most cases, we&amp;#39;d replace the corresponding Rails asset gem and add the appropriate &lt;code&gt;node_modules&lt;/code&gt; directory to the Sprockets load path. For example, for &lt;code&gt;foundation&lt;/code&gt;, here&amp;#39;s how we did it:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# Gemfile

- gem &amp;quot;foundation-rails&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// package.json

&amp;quot;dependencies&amp;quot;: {
   // ...
+ &amp;quot;foundation-sites&amp;quot;: &amp;quot;~6.3.0&amp;quot;,
   // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/initializers/assets.rb

+ Rails.application.config.assets.paths &amp;lt;&amp;lt; Rails.root.join(&amp;quot;node_modules&amp;quot;, &amp;quot;foundation-sites&amp;quot;, &amp;quot;scss&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, Webpack can bundle stylesheets as well and we&amp;#39;ll likely investigate
this on a future iteration when we&amp;#39;re ready to remove Sprockets entirely.&lt;/p&gt;

      &lt;h2 id="deploying-with-capistrano-and-nginx" class="title"&gt;
        &lt;a name="deploying-with-capistrano-and-nginx" class="anchor" href="#deploying-with-capistrano-and-nginx"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Deploying with Capistrano and Nginx
      &lt;/h2&gt;
    
&lt;p&gt;We use Capistrano to deploy our Rails application. The &lt;code&gt;capistrano/rails&lt;/code&gt; plugin adds some deployment configuration for the Rails asset pipeline, but we needed to make some changes to support Webpack properly.&lt;/p&gt;

&lt;p&gt;Webpack compilation happens automatically with each deploy because Webpacker hooks into the &lt;code&gt;rake assets:precompile&lt;/code&gt; task. This task relies on a Webpacker binstub, &lt;code&gt;bin/webpack&lt;/code&gt;, which needs to be checked into version control.&lt;/p&gt;

&lt;p&gt;We also needed to set &lt;code&gt;public/packs&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; as shared directories to ensure Webpack build output and NPM package installation via &lt;code&gt;yarn&lt;/code&gt; are shared across deploys.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/deploy.rb

set :linked_dirs, fetch(:linked_dirs, []).push(&amp;#39;public/packs&amp;#39;, &amp;#39;node_modules&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also helps to be aware of that Webpacker uses the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable to select the right Webpack configuration. If &lt;code&gt;NODE_ENV&lt;/code&gt; is not set, it will infer its value from &lt;code&gt;RAILS_ENV&lt;/code&gt;. We also have a staging environment where we use the environment variable &lt;code&gt;RAILS_ENV=staging&lt;/code&gt;. Our initial Webpack deploy to staging failed because we did not have a Webpack config for staging. Since our Webpack configuration for staging would be identical to production, we simply set &lt;code&gt;NODE_ENV=production&lt;/code&gt; on our staging environments:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/deploy.rb

set :default_env, { &amp;#39;NODE_ENV&amp;#39; =&amp;gt; &amp;#39;production&amp;#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, since we use Nginx as a reverse proxy to our Rails application, we want to be sure the proper HTTP response headers are added for anything Webpack compiles to &lt;code&gt;public/packs&lt;/code&gt; to improve cacheability. So we added &amp;quot;packs&amp;quot; to our Nginx location block for assets, similar to below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="nginx"&gt;server {
  listen 443;
  server_name example.com;
  root /path/to/application/current/public;

  location ^~ /assets|packs/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  # ...
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="unit-testing-with-karma" class="title"&gt;
        &lt;a name="unit-testing-with-karma" class="anchor" href="#unit-testing-with-karma"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Unit Testing with Karma
      &lt;/h2&gt;
    
&lt;p&gt;For unit testing our JavaScript with the Rails asset pipeline, we used &lt;a href="https://github.com/searls/jasmine-rails"&gt;jasmine-rails&lt;/a&gt;. That gem has allowed us to run JS unit tests either in the browser or on the command line. Given its tight coupling to the Rails asset pipeline, we would also have to replace our test runner. After trying out a few options, we liked the features of &lt;a href="https://karma-runner.github.io/1.0/index.html"&gt;Karma&lt;/a&gt; and that a) it was easy to setup with Webpack, and b) supports the Jasmine assertion syntax. That meant we could port our existing tests to Karma + Webpack with minimal changes.&lt;/p&gt;

&lt;p&gt;There are plenty of tutorials and tips out there for Karma + Webpack, including &lt;a href="https://github.com/rails/webpacker/blob/master/docs/testing.md#karma-setup-for-typescript"&gt;Karma setup instructions in the Webpacker docs&lt;/a&gt;. Here&amp;#39;s a brief overview of what we did:&lt;/p&gt;

&lt;p&gt;First we added several packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;yarn add --dev karma karma-cli karma-sourcemap-loader karma-webpack karma-jasmine karma-chrome-launcher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make Karma work with our Webpacker setup, we started with the default &lt;code&gt;karma.config.js&lt;/code&gt; configuration file and made some modifications as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// karma.conf.js

// Require our Webpack test configuration
const webpackConfig = require(&amp;#39;./config/webpack/test.js&amp;#39;);

// Remove the plugins to workaround for several issues
// https://github.com/webpack-contrib/karma-webpack/issues/22
// https://github.com/rails/webpacker/issues/435
const {assign} = require(&amp;#39;lodash&amp;#39;);
assign(webpackConfig, { plugins: [] });

module.exports = function(config) {
  config.set({
    frameworks: [&amp;#39;jasmine&amp;#39;],

    // list of files / patterns to load in the browser
    files: [
      { pattern: &amp;#39;spec/javascript/**/*.js&amp;#39;, watched: false },
    ],

    // preprocess matching files before serving them to the browser
    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {
      &amp;#39;spec/javascript/**/*.js&amp;#39;: [&amp;#39;webpack&amp;#39;, &amp;#39;sourcemap&amp;#39;],
    },

    // For karma-webpack extension
    webpack: webpackConfig,
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We ran into few problems using Karma with certain Webpack plugins, including &lt;a href="https://github.com/webpack-contrib/karma-webpack/issues/22"&gt;this issue&lt;/a&gt; with &lt;code&gt;karma-webpack&lt;/code&gt; plus the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; and &lt;a href="https://github.com/rails/webpacker/issues/435"&gt;this issue&lt;/a&gt; with Webpacker&amp;#39;s use of the &lt;code&gt;ManifestPlugin&lt;/code&gt;. Turns out, to run unit tests in the Karma context, our Webpack plugins are irrelevant, so we&amp;#39;ve opted to remove them altogether in the Karma configuration for now. The downside is that our unit testing setup does not exercise our Webpack plugin configuration, but any issue there would be caught by our integration testing workflow.&lt;/p&gt;

&lt;p&gt;Another problem we needed to solve was to keep our legacy specs in jasmine-rails passing during the transition. As soon as we moved our first critical dependency from the asset pipeline to Webpack, all of our jasmine-rails specs broke. This is because jasmine-rails assumes you&amp;#39;re just using Sprockets and knows nothing about our Webpack output.&lt;/p&gt;

&lt;p&gt;Fortunately, jasmine-rails allowed us to override the Rails template &lt;code&gt;spec_runner.html.erb&lt;/code&gt; that gets rendered when jasmine-rails executes the test suite in the browser. We just copied the default jasmine-rails ERB layout into our project and added our Webpack &amp;quot;packs&amp;quot; in the right place.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- app/views/layouts/jasmine_rails/spec_runner.html.erb --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta content=&amp;quot;text/html;charset=UTF-8&amp;quot; http-equiv=&amp;quot;Content-Type&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;/&amp;gt;
    &amp;lt;title&amp;gt;Jasmine Specs&amp;lt;/title&amp;gt;

    &amp;lt;%= stylesheet_link_tag *jasmine_css_files %&amp;gt;

    &amp;lt;!-- add the packs! --&amp;gt;
    &amp;lt;%= javascript_pack_tag &amp;quot;vendor&amp;quot;, &amp;quot;application&amp;quot; %&amp;gt;

    &amp;lt;%= javascript_include_tag *jasmine_js_files, :defer =&amp;gt; &amp;quot;defer&amp;quot; %&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body data-no-turbolink&amp;gt;
    &amp;lt;div id=&amp;quot;jasmine_content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;%= yield %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once all our unit test were ported over to Karma, we were able to remove &lt;code&gt;jasmine-rails&lt;/code&gt; from our application.&lt;/p&gt;

      &lt;h2 id="local-development-with-ssl" class="title"&gt;
        &lt;a name="local-development-with-ssl" class="anchor" href="#local-development-with-ssl"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Local development with SSL
      &lt;/h2&gt;
    
&lt;p&gt;Our team also strives for dev/prod parity as much as possible, from the 12 factor app methodology. This includes using a non-localhost domain, like &lt;code&gt;myapp.dev&lt;/code&gt;, Nginx as a reverse proxy, and enforcing SSL in development. Fortunately, the Webpack dev server supports SSL, but we needed to do a few things to make it work properly, including submitting a few patches to Webpacker.&lt;/p&gt;

&lt;p&gt;Webpack assets are proxied to the Webpack dev server by the Webpacker middleware, but after enabling &lt;code&gt;https&lt;/code&gt; for the dev server, autoreload wasn&amp;#39;t working. This is because Webpack inserts a script that opens up a websocket connection to the dev server over the endpoint &lt;code&gt;/sockjs-node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We needed to provide the hostname to webpack dev server so it can initiate the websocket connection for live reloading (&lt;a href="https://webpack.js.org/configuration/dev-server/#devserver-public"&gt;Webpack docs&lt;/a&gt;). To do so, we set the &lt;code&gt;public&lt;/code&gt; option in &lt;code&gt;config/webpacker.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  dev_server:
    # ...
    public: myapp.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also add the following location block to development Nginx server configuration to allow the websocket connection to proxy through Nginx.&lt;/p&gt;

&lt;pre&gt;&lt;code class="nginx"&gt;server {
    listen 80;
    server_name myapp.dev

    # Proxy webpack dev server websocket requests
    location /sockjs-node {
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
        proxy_pass http://127.0.0.1:3035; # change to match your webpack-dev-server host
    }

    # ...
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="wrapping-up" class="title"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h2&gt;
    
&lt;p&gt;Wow, you made it this far!&lt;/p&gt;

&lt;p&gt;Perhaps the most important lesson we learned throughout this process is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Choosing Webpack means investing time in understanding how it works and how to get the most out of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gone are the days when we could &amp;quot;set it and forget it&amp;quot; for most of our dependencies under Sprockets. Despite the ease with which Webpacker let us get Webpack running in our Rails application, it has required effort to experiment with configuration, optimize bundles, integrate with third-party modules, set up predictable, long-term caching, and stay up-to-date with rapidly changing dependencies, like Webpack itself.&lt;/p&gt;

&lt;p&gt;As of this writing, all of our clientside application JavaScript now runs through Webpack in development and for deployment. So far, our team has been delighted by results and we&amp;#39;re glad we invested in upgrading from the asset pipeline.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Testing Rails generators</title>
    <link rel="alternate" href="/blog/testing-rails-generators.html"/>
    <id>/blog/testing-rails-generators.html</id>
    <published>2016-11-12T00:00:00+00:00</published>
    <updated>2016-11-12T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;This is the post I wished existed before attempting to write tests for a Rails generator with TDD.&lt;/p&gt;

&lt;p&gt;I recently added a Rails generator to my gem, &lt;code&gt;serviceworker-rails&lt;/code&gt;, to make it easier to add the assets and configuration files needed to &lt;a href="/blog/make-your-rails-app-a-progressive-web-app.html"&gt;turn your Rails...&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;This is the post I wished existed before attempting to write tests for a Rails generator with TDD.&lt;/p&gt;

&lt;p&gt;I recently added a Rails generator to my gem, &lt;code&gt;serviceworker-rails&lt;/code&gt;, to make it easier to add the assets and configuration files needed to &lt;a href="/blog/make-your-rails-app-a-progressive-web-app.html"&gt;turn your Rails app into a Progressive Web App&lt;/a&gt;. I&amp;#39;ve written a few Rails generators before, but have usually skipped the part about writing tests because––no excuse.&lt;/p&gt;

      &lt;h2 id="the-requirements" class="title"&gt;
        &lt;a name="the-requirements" class="anchor" href="#the-requirements"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The requirements
      &lt;/h2&gt;
    
&lt;p&gt;Rails generators are commonly used to create and/more modify project files in a Rails project. Setting up a Rails project with a Service Worker in the Rails asset pipeline can be a bit involved, and using the Rails generator to take care of the boilerplate makes it more convenient to get up-and-running with the gem.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the &lt;code&gt;serviceworker-rails&lt;/code&gt; install generator does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adds a starter &lt;code&gt;serviceworker.js&lt;/code&gt; file and companion JavaScript to &lt;code&gt;app/assets/javascripts&lt;/code&gt; for service worker registration&lt;/li&gt;
&lt;li&gt;Modifies &amp;#39;application.js` to require the companion JavaScript&lt;/li&gt;
&lt;li&gt;Adds a web app manifest file, &lt;code&gt;manifest.json&lt;/code&gt;, to &lt;code&gt;app/assets/javascripts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag to the application layout for the browser to locate the manifest&lt;/li&gt;
&lt;li&gt;Adds a Rails initializer to configure the serviceworker asset routes&lt;/li&gt;
&lt;li&gt;Modifies &lt;code&gt;config/initializers/assets.rb&lt;/code&gt; to precompile &lt;code&gt;serviceworker.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds a default &lt;code&gt;offline.html&lt;/code&gt; file to &lt;code&gt;public/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though this is a testing post but I&amp;#39;ll briefly mention some resources I&amp;#39;ve found helpeful for writing Rails generators. I recommend the &lt;a href="http://guides.rubyonrails.org/generators.html"&gt;Rails guides&lt;/a&gt; to get your Rails generator started. It also help to understand how &lt;code&gt;Thor&lt;/code&gt; works (&lt;a href="http://whatisthor.com/"&gt;What is Thor?&lt;/a&gt;), the library on which most Rails commandline tools are based. The Rails generator base classes leverage &lt;a href="http://www.rubydoc.info/github/erikhuda/thor/master/Thor/Actions"&gt;Thor actions&lt;/a&gt;, i.e., &lt;code&gt;create_file&lt;/code&gt;, &lt;code&gt;gsub_file&lt;/code&gt;, &lt;code&gt;insert_into_file&lt;/code&gt;, and sprinkle in some &lt;a href="http://api.rubyonrails.org/classes/Rails/Generators/Actions.html"&gt;Rails-specific methods&lt;/a&gt;, including &lt;code&gt;gem&lt;/code&gt;, &lt;code&gt;rake&lt;/code&gt;, &lt;code&gt;initializer&lt;/code&gt;, etc.&lt;/p&gt;

      &lt;h2 id="a-first-pass" class="title"&gt;
        &lt;a name="a-first-pass" class="anchor" href="#a-first-pass"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A first pass
      &lt;/h2&gt;
    
&lt;p&gt;So: how do I test this?&lt;/p&gt;

&lt;p&gt;Without consulting an external library for &amp;quot;testing Rails generators&amp;quot;, I wanted to take a pass at figuring it out on my own. I&amp;#39;d need to run the generator in the tests to verify the output and that the generator is working. This means the tests would have side effects that modify the file system.&lt;/p&gt;

&lt;p&gt;When using database access in tests, we typically expect to wipe test database clean before each test either by truncating or rolling back transactions. Modifying the file system is pretty much the same thing we&amp;#39;re trying to do with testing a Rails generator: trigger some side effects, wipe the slate clean, repeat.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;serviceworker-rails&lt;/code&gt; generator adds and modifies files in a Rails app, I decided I needed to generate a fresh Rails app while running the tests and delete it after the tests finish. Crazy, right? I ended up with a test helper that generates the app with something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def generate_sample_app
  system &amp;quot;rails new dummy --skip-active-record --skip-test-unit --skip-spring --skip-bundle&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Skipping all those features simplified things a bit, but still, creating and destroying a temporary Rails app for each test was overkill so I decided to generate the Rails app once, before all the tests were run. Since I use &lt;code&gt;MiniTest&lt;/code&gt; for &lt;code&gt;serviceworker-rails&lt;/code&gt;, the test setup looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; MiniTest::Test
  include GeneratorTestHelpers

  generate_sample_app

  Minitest.after_run do
    remove_sample_app
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the tests, I also started by running the rails generator command to invoke
my install generator. So given this library code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;
require &amp;quot;rails/generators&amp;quot;

module Serviceworker
  module Generators
    class InstallGenerator &amp;lt; ::Rails::Generators::Base

      def create_assets
        template &amp;quot;manifest.json&amp;quot;, javascripts_dir(&amp;quot;manifest.json.erb&amp;quot;)
        template &amp;quot;serviceworker.js&amp;quot;, javascripts_dir(&amp;quot;serviceworker.js.erb&amp;quot;)
        template &amp;quot;serviceworker-companion.js&amp;quot;, javascripts_dir(&amp;quot;serviceworker-companion.js&amp;quot;)
      end

      # ... additional steps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could run the generator for each test with:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def run_serviceworker_generator
  system &amp;quot;rails generator serviceworker:install&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also needed to make the following types of assertions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assert that a file was generated at a given location&lt;/li&gt;
&lt;li&gt;assert the contents of a generated or modified file&lt;/li&gt;
&lt;li&gt;assert a generated file with interpolations renders valid output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this first pass, I ended up with something very similar to Zurb&amp;#39;s
&lt;code&gt;foundation-rails&lt;/code&gt; tests for its install generator: &lt;a href="https://github.com/zurb/foundation-rails/blob/4dfe9b12e8cf3a1aa04b257ff64c782832efc6a0/spec/features/generator_spec.rb"&gt;spec&lt;/a&gt; and &lt;a href="https://github.com/zurb/foundation-rails/blob/4dfe9b12e8cf3a1aa04b257ff64c782832efc6a0/spec/support/helpers.rb"&gt;helper
methods&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def test_generates_serviceworker
   serviceworker_js = File.read(sample_app_path(&amp;quot;app/assets/javascripts/serviceworker.js.erb&amp;quot;))
   companion_js = File.read(sample_app_path(&amp;quot;app/assets/javascripts/serviceworker-companion.js&amp;quot;))

   assert serviceworker_js =~ /self.addEventListener\(&amp;#39;install&amp;#39;, onInstall\)/,
     &amp;quot;Expected serviceworker to be generated&amp;quot;
   assert companion_js =~ /navigator.serviceWorker.register/,
     &amp;quot;Expected serviceworker companion to be generated&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had several tests that read the contents of files and matches expected content
through regular expressions.&lt;/p&gt;

      &lt;h2 id="using-rails-generators-testcase" class="title"&gt;
        &lt;a name="using-rails-generators-testcase" class="anchor" href="#using-rails-generators-testcase"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Using Rails::Generators::TestCase
      &lt;/h2&gt;
    
&lt;p&gt;Though what I came up with worked and didn&amp;#39;t rely on any third-party dependencies, I wasn&amp;#39;t totally happy with it. The tests were very verbose. I didn&amp;#39;t like that I had to shell out to run the generator. I finally decided to &amp;quot;peek&amp;quot; and see how Rails tests its own generators, you know, the ones you love for generating models, migrations, and entire resource scaffolds.&lt;/p&gt;

&lt;p&gt;It turns out Rails generators are tested using &lt;code&gt;Rails::Generators::TestCase&lt;/code&gt;. Since Rails tests are also written in &lt;code&gt;MiniTest&lt;/code&gt; and my library already relies on Rails as a dependency--it &lt;em&gt;is&lt;/em&gt; a Rails engine--making the switch in my tests easy. If you&amp;#39;re using RSpec, I did come across &lt;a href="https://github.com/alexrothenberg/ammeter"&gt;&lt;code&gt;ammeter&lt;/code&gt;&lt;/a&gt;, which delegates to &lt;code&gt;Rails::Generators::TestCase&lt;/code&gt; under the hood, so it&amp;#39;d be quite similar to what I did here.&lt;/p&gt;

&lt;p&gt;First, we inherit from the base class:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing so brings in a bunch of helper methods for configuring the destination
directory, running the generator, and conveniences for making assertions on the generated
files. We declare the generator under test and a destination:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase
  tests ServiceWorker::Generators::InstallGenerator
  destination File.expand_path(&amp;quot;../tmp&amp;quot;, File.dirname(__FILE__))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following the style of Rails generator tests, a test case would look like the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;creates a file&amp;quot; do
  run_generator

  # make some assertions about file and its contents
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;run_generator&lt;/code&gt; method will instatiate the generator class and execute it in
the configured destination directory within the test process (no shell command, yay!). The test case class does provide a setup macro to ensure the destination directory exists:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase
  tests ServiceWorker::Generators::InstallGenerator
  destination File.expand_path(&amp;quot;../tmp&amp;quot;, File.dirname(__FILE__))

  setup :prepare_destination
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this method makes no assumptions about what I want to modify in that
directory, so as far as I could tell, I still needed to generate the rails app
in the destination directory and clean it up after the test run. I ended up
keeping the approach I had used previously:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;class ServiceWorker::InstallGeneratorTest &amp;lt; ::Rails::Generators::TestCase
  include GeneratorTestHelpers

  tests ServiceWorker::Generators::InstallGenerator
  destination File.expand_path(&amp;quot;../tmp&amp;quot;, File.dirname(__FILE__))

  generate_sample_app

  Minitest.after_run do
    remove_sample_app
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Rails::Generators::TestCase&lt;/code&gt; provides some useful helper methods.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;assert_file&lt;/code&gt; is used to verify a file was created. The given path would be
relative to the destination directory, Rails root:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates serviceworker&amp;quot; do
  run_generator
  assert_file &amp;quot;app/assets/javascripts/serviceworker.js.erb&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;assert_file&lt;/code&gt; accepts a block that yield the content of the file so we can check
its contents with plain-old &lt;code&gt;MiniTest&lt;/code&gt; helpers like &lt;code&gt;assert_match&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates serviceworker&amp;quot; do
  run_generator
  assert_file &amp;quot;app/assets/javascripts/serviceworker.js.erb&amp;quot; do |content|
    assert_match(/self.addEventListener\(&amp;#39;install&amp;#39;, onInstall\)/, content)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complementary &lt;code&gt;assert_no_file&lt;/code&gt; method is useful for ensuring a file was not created under certain
conditions. There is also &lt;code&gt;asset_migration&lt;/code&gt; and &lt;code&gt;assert_no_migration&lt;/code&gt; for
verifying migration files without having to know the migration timestamp to
locate the file by absolute path.&lt;/p&gt;

&lt;p&gt;One final technique I used was to verify the output of a generated file after
rendering it with ERB with interpolation. For example, the web app manifest I
provide in the &lt;code&gt;serviceworker-rails&lt;/code&gt; install generator, &lt;code&gt;manifest.json.erb&lt;/code&gt;, uses ERB to embed some
Ruby method calls. At compile time for the browser, the file must contain valid
JSON. How to test this again? No convenience methods here, so I rolled up my sleeves on this one.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the source template looks like for &lt;code&gt;manifest.json.erb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;&amp;lt;%% icon_sizes = Rails.configuration.serviceworker.icon_sizes %&amp;gt;
{
  &amp;quot;name&amp;quot;: &amp;quot;My Progressive Rails App&amp;quot;,
  &amp;quot;short_name&amp;quot;: &amp;quot;Progressive&amp;quot;,
  &amp;quot;start_url&amp;quot;: &amp;quot;/&amp;quot;,
  &amp;quot;icons&amp;quot;: [
  &amp;lt;%% icon_sizes.map { |s| &amp;quot;#{s}x#{s}&amp;quot; }.each.with_index do |dim, i| %&amp;gt;
    {
      &amp;quot;src&amp;quot;: &amp;quot;&amp;lt;%%= image_path &amp;quot;serviceworker-rails/heart-#{dim}.png&amp;quot; %&amp;gt;&amp;quot;,
      &amp;quot;sizes&amp;quot;: &amp;quot;&amp;lt;%%= dim %&amp;gt;&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;image/png&amp;quot;
    }&amp;lt;%%= i == (icon_sizes.length - 1) ? &amp;#39;&amp;#39; : &amp;#39;,&amp;#39; %&amp;gt;
  &amp;lt;%% end %&amp;gt;
  ],
  &amp;quot;theme_color&amp;quot;: &amp;quot;#000000&amp;quot;,
  &amp;quot;background_color&amp;quot;: &amp;quot;#FFFFFF&amp;quot;,
  &amp;quot;display&amp;quot;: &amp;quot;fullscreen&amp;quot;,
  &amp;quot;orientation&amp;quot;: &amp;quot;portrait&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, I&amp;#39;m using the &amp;quot;double-percent&amp;quot; style ERB tags, &lt;code&gt;&amp;lt;%% %&amp;gt;&lt;/code&gt;, on purpose.
Because the template itself is rendered through ERB, the double-percent tag
escapes interpolation so we can actually output ERB tags in its place.&lt;/p&gt;

&lt;p&gt;So, for my first attempt, I though I could grab the contents of the manifest ERB template, render it through ERB, parse it as JSON, and make assertions on the JSON object (as a Ruby hash). Something like the following&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates web app manifest&amp;quot; do
  assert_file &amp;quot;app/assets/javascripts/manifest.json.erb&amp;quot; do |content|
    result = ERB.new(content).result
    json = JSON.parse(result)

    assert_equal json[&amp;quot;name&amp;quot;], &amp;quot;My Progressive Rails App&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom, this generated an error:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;ServiceWorker::InstallGeneratorTest#test_generates_web_app_manifest:
NoMethodError: undefined method `image_path&amp;#39; for main:Object
/Users/ross/.rubies/ruby-2.2.3/lib/ruby/2.2.0/erb.rb:863:in `eval&amp;#39;
/Users/ross/.rubies/ruby-2.2.3/lib/ruby/2.2.0/erb.rb:863:in `result&amp;#39;
/Users/ross/dev/rossta/serviceworker-rails/test/serviceworker/install_generator_test.rb:28:in `block (2 levels) in &amp;lt;class:InstallGeneratorTest&amp;gt;&amp;#39;
/Users/ross/.gem/ruby/2.2.3/gems/railties-4.2.6/lib/rails/generators/testing/assertions.rb:30:in `assert_file&amp;#39;
/Users/ross/dev/rossta/serviceworker-rails/test/serviceworker/install_generator_test.rb:27:in `block in &amp;lt;class:InstallGeneratorTest&amp;gt;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The asset helper method &lt;code&gt;image_path&lt;/code&gt; is needed to output an appropriate digest urls for the web app icons. This will work in development or asset precompilation for production because this method is provided by the Sprockets environment. While I could load the Sprockets environment just for this test, it seems like both overkill and, honestly, way more work than I&amp;#39;m interested in.&lt;/p&gt;

&lt;p&gt;Instead of loading Sprockets, I decided to stub the &lt;code&gt;image_path&lt;/code&gt; method. The &lt;code&gt;ERB#result&lt;/code&gt; method takes a &lt;code&gt;binding&lt;/code&gt; as an optional argument. All Ruby objects have a private method &lt;code&gt;binding&lt;/code&gt;, which exposes the execution context to other objects, like &lt;code&gt;ERB&lt;/code&gt; for rendering template strings. The template doesn&amp;#39;t care what binding we give it, as long as it responds to the methods and instance variables present in the embedded ERB tags. It&amp;#39;s a classic example of dependency injection in the Ruby standard library.&lt;/p&gt;

&lt;p&gt;So I defined some helper methods to build up a context to mimic the behavior of
Sprockets by defining an implementation of the &lt;code&gt;image_path&lt;/code&gt; method and exposing
its &lt;code&gt;binding&lt;/code&gt; to be passes to the &lt;code&gt;ERB#result&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;def evaluate_erb_asset_template(template)
  engine = ::ERB.new(template)
  asset_binding = asset_context_class.new.context_binding
  engine.result(asset_binding)
end

def asset_context_class
  Class.new do
    def image_path(name)
      &amp;quot;/assets/#{name}&amp;quot;
    end

    def context_binding
      binding
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I&amp;#39;m able to assert the contents of the generated, compiled JSON!&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;test &amp;quot;generates web app manifest&amp;quot; do
  assert_file &amp;quot;app/assets/javascripts/manifest.json.erb&amp;quot; do |content|
    json = JSON.parse(evaluate_erb_asset_template(content))

    assert_equal json[&amp;quot;name&amp;quot;], &amp;quot;My Progressive Rails App&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/rossta/serviceworker-rails/blob/94c45720f793397f0df66dbd4d67c680f3a293c3/test/serviceworker/install_generator_test.rb"&gt;Check out the source&lt;/a&gt; of the &lt;code&gt;serviceworker-rails&lt;/code&gt; generator test case to see the full picture of how all the pieces fit together.&lt;/p&gt;

      &lt;h2 id="wrapping-up" class="title"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h2&gt;
    
&lt;p&gt;I don&amp;#39;t often have to write generators for my libraries or production codebases,
but now that I&amp;#39;ve worked through both &amp;quot;rolling my own&amp;quot; testing strategy and
leveraging the behavior of Rails own &lt;code&gt;Rails::Generators::TestCase&lt;/code&gt;, I think I&amp;#39;ve
got a good feel for how I can test more generators moving forward.&lt;/p&gt;

&lt;p&gt;Hopefully, you&amp;#39;ll find this useful when and if you decide to write a Rails generator yourself.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Your first Progressive Web App on Rails</title>
    <link rel="alternate" href="/blog/make-your-rails-app-a-progressive-web-app.html"/>
    <id>/blog/make-your-rails-app-a-progressive-web-app.html</id>
    <published>2016-11-09T00:00:00+00:00</published>
    <updated>2016-11-09T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Discussion of &lt;a href="https://developers.google.com/web/progressive-web-apps/"&gt;Progressive Web Apps&lt;/a&gt; (PWA) is &lt;a href="https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0"&gt;catching fire&lt;/a&gt; in the JavaScript community, but amongst Rails developers... not so much.&lt;/p&gt;

&lt;p&gt;Progressive Web App technology is still very young and rapidly churning; perhaps there's more reluctance on Rails teams...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Discussion of &lt;a href="https://developers.google.com/web/progressive-web-apps/"&gt;Progressive Web Apps&lt;/a&gt; (PWA) is &lt;a href="https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0"&gt;catching fire&lt;/a&gt; in the JavaScript community, but amongst Rails developers... not so much.&lt;/p&gt;

&lt;p&gt;Progressive Web App technology is still very young and rapidly churning; perhaps there&amp;#39;s more reluctance on Rails teams to get onboard with new JavaScript APIs until they become more stable. Also, the Rails community hasn&amp;#39;t had a clear path to integrating PWA technology&amp;mdash;until now. In this post, we&amp;#39;ll demonstrate how to turn your Rails app into a Progressive Web App using the &lt;code&gt;serviceworker-rails&lt;/code&gt; gem.&lt;/p&gt;

&lt;p&gt;What are Progressive Web Apps? Simply put, they are web applications that deliver mobile
app-like experiences. For example, open web technologies are now making it possible for browser-based web apps to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;installable&lt;/strong&gt; - add web apps to the Home Screen of a mobile device easily&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;more reliable&lt;/strong&gt; - provide a user experience when the device is offline or network responsiveness has degraded; sync user requests in the background when network capability is restored&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;more engaging&lt;/strong&gt; - notify users of activity even when they&amp;#39;re not using the site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sound good? Let&amp;#39;s get started.&lt;/p&gt;

      &lt;h2 id="your-first-progressive-web-app-on-rails" class="title"&gt;
        &lt;a name="your-first-progressive-web-app-on-rails" class="anchor" href="#your-first-progressive-web-app-on-rails"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Your first Progressive Web App on Rails
      &lt;/h2&gt;
    
&lt;p&gt;Eric Elliot recently posted &lt;a href="https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0"&gt;a thorough overview of Progessive Web App
requirements&lt;/a&gt;
that&amp;#39;s worth a read. Here&amp;#39;s summary of what&amp;#39;s needed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS - any page that uses Progressive Web App technology needs to be served
over SSL/TLS so &amp;quot;HTTPS everywhere&amp;quot; is recommended&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Manifest"&gt;Web App Manifest&lt;/a&gt; - a
text file with application metadata to support home screen installation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"&gt;Service Worker&lt;/a&gt; - a client-side JavaScript worker that can intercept network requests, modify responses, interact with local caches, sync data in the background, and enable push notifications&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="set-up-https" class="title"&gt;
        &lt;a name="set-up-https" class="anchor" href="#set-up-https"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Set up HTTPS
      &lt;/h3&gt;
    
&lt;p&gt;To enable HTTPS on our website, we&amp;#39;ll need to decide for ourselves how to set up our web
server depending on our hosting provider and deployment needs. Tutorials for setting up &lt;a href="https://devcenter.heroku.com/articles/ssl"&gt;Heroku&lt;/a&gt; and &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-an-ssl-certificate-from-a-commercial-certificate-authority"&gt;Digital Ocean&lt;/a&gt; may be a good place to start.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll also want to force SSL settings in our Rails application
configuration for our remote environments, i.e., &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/environments/production.rb

Rails.application.configure do
  # ...

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should be sure to test out this behavior on a secondary remote environment before going live in
production as we&amp;#39;ll want to be aware of hiccups like mixed content warnings and
hard-coded non-HTTPS urls in our application.&lt;/p&gt;

      &lt;h3 id="add-a-manifest-and-service-worker" class="title"&gt;
        &lt;a name="add-a-manifest-and-service-worker" class="anchor" href="#add-a-manifest-and-service-worker"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Add a manifest and Service Worker
      &lt;/h3&gt;
    
&lt;p&gt;For this next step, we&amp;#39;ll assume we&amp;#39;re using the Rails asset pipeline. This is
both helpful and presents a problem:&lt;/p&gt;

&lt;p&gt;The Rails asset pipeline makes a number of assumptions about what&amp;#39;s best for deploying JavaScript, including asset digest fingerprints and long-lived cache headers - mostly to increase &amp;quot;cacheability&amp;quot;. Rails also assumes a single parent directory, /public/assets, to make it easier to look up the file path for a given asset.&lt;/p&gt;

&lt;p&gt;Service worker and manifest assets must play by different rules. Service workers may only be active from within the scope from which they are served. So if you try to register a service worker from a Rails asset pipeline path, like &lt;code&gt;/assets/serviceworker-abcd1234.js&lt;/code&gt;, it will only be able to interact with requests and responses within &lt;code&gt;/assets/**&lt;/code&gt;. This is not what we want.&lt;/p&gt;

&lt;p&gt;To address this issue, I created the &lt;code&gt;serviceworker-rails&lt;/code&gt; gem (&lt;a href="https://github.com/rossta/serviceworker-rails"&gt;source&lt;/a&gt;). This Rails
plugin makes it easier to set up your app to serve service worker
scripts and web app manifests at canonical urls while taking advantage of the transpilation and
interpolation features the asset pipeline provides.&lt;/p&gt;

&lt;p&gt;To get started with &lt;code&gt;serviceworker-rails&lt;/code&gt;, we&amp;#39;ll bundle it with our Rails app.&lt;/p&gt;

&lt;p&gt;Add the gem to the &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# Gemfile

gem &amp;quot;serviceworker-rails&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bundle the app:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ll use the built-in generator from service worker rails to add some starter
JavaScript files to our project and the proper configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ rails g serviceworker:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generator will create the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config/initializers/serviceworker.rb&lt;/code&gt; - for configuring your Rails app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/assets/javascripts/serviceworker.js.erb&lt;/code&gt; - a blank Service Worker
script with some example strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/assets/javascripts/serviceworker-companion.js&lt;/code&gt; - a snippet of JavaScript
necessary to register your Service Worker in the browser&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/assets/javascripts/manifest.json.erb&lt;/code&gt; - a starter web app manifest
pointing to some default app icons provided by the gem&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/offline.html&lt;/code&gt; - a starter offline page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will also make the following modifications to existing files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adds a sprockets directive to &lt;code&gt;application.js&lt;/code&gt; to require
&lt;code&gt;serviceworker-companion.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds &lt;code&gt;serviceworker.js&lt;/code&gt; and &lt;code&gt;manifest.json&lt;/code&gt; to the list of compiled assets in
&lt;code&gt;config/initializers/assets.rb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Injects tags into the &lt;code&gt;head&lt;/code&gt; of &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; for
linking to the web app manifest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, we could do this set up manually, but it may be helpful to run the
automated install for our first attempt. If going manual, consult the &lt;code&gt;serviceworker-rails&lt;/code&gt;
&lt;a href="https://github.com/rossta/serviceworker-rails"&gt;README&lt;/a&gt; and my previous &lt;a href="https://rossta.net/blog/service-worker-on-rails.html"&gt;blog
post on configuring the gem&lt;/a&gt; for more help during setup.&lt;/p&gt;

&lt;p&gt;At this point, we&amp;#39;ve got all the boilerplate in place in our Rails app to begin
adding Progessive Web App functionality. The great part is, we can pick and
choose which features we want to add.&lt;/p&gt;

&lt;p&gt;Here are few things you can try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rossta.net/blog/offline-page-for-your-rails-application.html"&gt;Adding an offline page for your Rails app&lt;/a&gt; - by @rossta&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rossta.net/blog/web-push-notifications-from-rails.html"&gt;Sending Web Push notifications from Rails&lt;/a&gt; - by @rossta&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addyosmani.com/blog/application-shell/"&gt;Instant loading Web Apps with a Service Worker application shell architecture&lt;/a&gt; - by Addy Osmani
*&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="going-further" class="title"&gt;
        &lt;a name="going-further" class="anchor" href="#going-further"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Going further
      &lt;/h2&gt;
    
&lt;p&gt;For more on grasping Service Worker fundamentals and developing offline solutions for the web, I highly recommend this free Udacity course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/offline-web-applications--ud899"&gt;Offline Web Applications&lt;/a&gt; by Google&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;#39;ll want to understand the Service Worker life cycle, which Jake Archibald
treats in great detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/lifecycle"&gt;The Service Worker Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For some open-source abstractions for implementing Service Worker fetching and
caching strategies, checkout out &lt;a href="https://github.com/GoogleChrome/sw-toolbox"&gt;SW-Toolbox&lt;/a&gt; and &lt;a href="https://github.com/GoogleChrome/sw-precache"&gt;SW-Precache&lt;/a&gt; from the Google Chrome team.&lt;/p&gt;

&lt;p&gt;Of course, we&amp;#39;ve only covered the getting started part of our journey with
Progressive Web Apps. I&amp;#39;ve left out a lot of fun parts like decided how to implement
caching strategies or send push notifications. Here are some resources to check
out to take your PWA skills to the next level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serviceworke.rs/"&gt;ServiceWorke.rs&lt;/a&gt; - a set of Service Worker recipes
and demos from Mozilla&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakearchibald.com/2014/offline-cookbook/"&gt;Offline Cookbook&lt;/a&gt; - a great rundown of Service Worker snippets, including a number of caching strategies, by Jake Archibald&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/serviceworker-rails-sandbox"&gt;Service Worker on Rails Sandbox&lt;/a&gt; - a demo Progressive Web App on Rails using the &lt;code&gt;serviceworker-rails&lt;/code&gt; gem by &lt;a href="https://github.com/rossta"&gt;@rossta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TalAter/awesome-progressive-web-apps"&gt;Awesome Progressive Web Apps&lt;/a&gt; - kitchen sink of PWA resources&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TalAter/awesome-service-workers"&gt;Awesome Service Workers&lt;/a&gt; - kitchen sink of Service Worker resources&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="rails-pwa" class="title"&gt;
        &lt;a name="rails-pwa" class="anchor" href="#rails-pwa"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Rails 💜 PWA
      &lt;/h2&gt;
    
&lt;p&gt;Nothing about Rails is incongruent with Progressive Web App technology so there&amp;#39;s no technical reason why we can&amp;#39;t start introducing these features today. It&amp;#39;s worth noting the choice to transition to PWA is completely orthogonal to whatever JavaScript MVC framework/module bundler/turbolinks decision you might be otherwise already tackling.&lt;/p&gt;

&lt;p&gt;In the coming years, I believe it will become increasingly important to adopt PWA features to keep up with demand as more and more site visits will shift to mobile web.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I'm betting on Elixir</title>
    <link rel="alternate" href="/blog/why-i-am-betting-on-elixir.html"/>
    <id>/blog/why-i-am-betting-on-elixir.html</id>
    <published>2016-10-23T00:00:00+00:00</published>
    <updated>2016-10-23T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;While reading the first chapter of &lt;a href="https://www.manning.com/books/elixir-in-action"&gt;&lt;em&gt;Elixir in
Action&lt;/em&gt;&lt;/a&gt;, I had my "a-ha!"
moment with Elixir; this table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.manning.com/books/elixir-in-action"&gt;&lt;img src="/assets/images/screenshots/screenshot-elixir-in-action-table-1.1-dfcd6760.jpg" alt="Screenshot elixir in action table 1.1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'd already been playing with Elixir for a few months before I picked up
Sasha Juric's book introducing the Elixir language and its abstractions...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;While reading the first chapter of &lt;a href="https://www.manning.com/books/elixir-in-action"&gt;&lt;em&gt;Elixir in
Action&lt;/em&gt;&lt;/a&gt;, I had my &amp;quot;a-ha!&amp;quot;
moment with Elixir; this table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.manning.com/books/elixir-in-action"&gt;&lt;img src="/assets/images/screenshots/screenshot-elixir-in-action-table-1.1-dfcd6760.jpg" alt="Screenshot elixir in action table 1.1" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;d already been playing with Elixir for a few months before I picked up
Sasha Juric&amp;#39;s book introducing the Elixir language and its abstractions for the
Open Telecom Platform (OTP). If you&amp;#39;re interested in Elixir, &lt;a href="https://www.manning.com/books/elixir-in-action"&gt;please check out
the book&lt;/a&gt;; no affiliate links, I
just enjoyed it immensely.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://elixir-lang.org/"&gt;Elixir&lt;/a&gt; is a new programming language that targets the
Erlang virtual machine.  Therefore, it comes with many of the benefits of
&lt;a href="https://www.erlang.org/"&gt;Erlang&lt;/a&gt;, including fault tolerance, scalability,
distribution, and concurrency, in a cleaner, more concise syntax. I knew all
this but the graphic above revealed a new perspective, especially in regards to
web development as we know it in the Rails community.&lt;/p&gt;

      &lt;h2 id="using-your-tools" class="title"&gt;
        &lt;a name="using-your-tools" class="anchor" href="#using-your-tools"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Using your tools
      &lt;/h2&gt;
    
&lt;p&gt;Anyone who has built a non-trivial Ruby on Rails app (or Node.js, Django, PHP,
etc.) knows the left-side of the table above well. When we deploy a Rails app,
we don&amp;#39;t just set up the Rails process. We need a web server like Nginx, Apache,
or Phusion Passenger, to queue requests and serve static content, neither of
which Rails does well.&lt;/p&gt;

&lt;p&gt;Running background jobs becomes an essential tool for moving intensive tasks out
of the request/response process, typically requiring separate processes, e.g.
Sidekiq, often deployed on other servers. Setting up additional caching
processes in Redis or Memcached is also an assumed requirement for storing HTML
fragments or other bits of precalculated data. See the theme? performance
improvements in Ruby apps often mean avoiding Ruby.&lt;/p&gt;

&lt;p&gt;Getting all these separate dependencies up and running for development often requires
complicated setup or additional tools like Docker/Vagrant/Boxen, etc. Keeping
them running in production means relying on a yet another service to
act as a supervisor or monitor like &lt;a href="http://upstart.ubuntu.com/"&gt;Upstart&lt;/a&gt; or
&lt;a href="https://mmonit.com/monit/"&gt;Monit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Elixir, all these features can be handled by the Erlang virtual machine
(called BEAM) in a &lt;em&gt;single&lt;/em&gt; operating system process. The runtime itself is
behaves like its own operating system that provides its lightweight processes
and a scheduler. In a web application, this means responses to web requests and
background jobs can run concurrently, all within the same BEAM process. Elixir
and Erlang have built-in abstractions for supervising processes in your
application, so you can provide fine-grained logic for monitoring and restarting
failed tasks within your project as an integral part of your business logic.
There are also built-in tools for persisting and sharing state in place of
separate tools like Redis or Memcached.&lt;/p&gt;

&lt;p&gt;Setting up the project on the development machine and deployment considerations
all becomes much simpler when you&amp;#39;re concerned only with the requirements of
managing a single OS process.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re obviously free to use these other tools (Redis, memcached, a separate jobs
queue, a web server, etc.) but they no longer need to be the default in Elixir.
If you&amp;#39;re building a web app in &lt;a href="http://www.phoenixframework.org/"&gt;Phoenix&lt;/a&gt;, you
still may need a database, and you&amp;#39;ll probably still feel the need to pick
a JavaScript framework. But you get the idea.&lt;/p&gt;

&lt;p&gt;As I discovered this, I tweeted it out, imagining all the money saved on hosting
costs. Here&amp;#39;s &lt;a href="https://twitter.com/sasajuric/status/750078059286556673"&gt;Sasha&amp;#39;s response&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a
href="https://twitter.com/rossta"&gt;@rossta&lt;/a&gt; That&amp;#39;s the smallest gain.
Imagine all the money saved on not developing/maintaining overcomplex error
prone solutions :-)&lt;/p&gt;&amp;mdash; Saša Jurić (@sasajuric) &lt;a
href="https://twitter.com/sasajuric/status/750078059286556673"&gt;July 4,
2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So Elixir has some measurable benefits.&lt;/p&gt;

      &lt;h2 id="choosing-your-tools" class="title"&gt;
        &lt;a name="choosing-your-tools" class="anchor" href="#choosing-your-tools"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Choosing your tools
      &lt;/h2&gt;
    
&lt;p&gt;I&amp;#39;ve never much enjoyed the phrase &amp;quot;right tool for the job&amp;quot;. We programmers
often fall back on this phrase as a way to justify our technology choices. In my
experience, there are many possible languages/frameworks (the &amp;quot;tools&amp;quot;) that can
serve the needs of a given business (the &amp;quot;job&amp;quot;). As my professional software experience
is largely based on building web applications for startups, I don&amp;#39;t wish to
speak for systems software, game programmers, or even mobile app developers. But
on the web, there exist a great number of tools serving teams quite well,
and it would difficult for me to call any of them &lt;em&gt;the&lt;/em&gt; right tool.&lt;/p&gt;

&lt;p&gt;The trouble I have with &amp;quot;right tool for the job&amp;quot; is we tend to focus our
arguments on technology features and capabilities, but very rarely do we
consider factors such as our current constraints or the people involved in as
part of the equation. The team has 25 years of experience building Node.js web
apps? We&amp;#39;re probably going to be choosing Node.js for our next web app. The
DevOps team invested months and thousands of dollars in shoring up our
architecture for Ruby on Rails? I probably won&amp;#39;t be switching to Django for our
next feature.&lt;/p&gt;

&lt;p&gt;How about admitting we&amp;#39;d most often love to choose the tools we&amp;#39;d
most enjoy using? This is a much more personal choice than &amp;quot;right tool&amp;quot;
suggests. I don&amp;#39;t think there&amp;#39;s anything wrong with choosing tools you like -
as long as you can still get the job done, of course!&lt;/p&gt;

&lt;p&gt;Giles Bowkett wrote a &lt;a href="http://gilesbowkett.blogspot.com/2016/10/let-asset-pipeline-die.html"&gt;thoroughly entertaining essay on why the Rails asset
pipeline should
die&lt;/a&gt;,
which is really an essay about the fundamental nature of Ruby and Rails. He
reminds us that a big reason for the success of Ruby and of Rails is that they
optimize for programmer happiness. Ruby isn&amp;#39;t successful for its performance
benefits, (if anything, it&amp;#39;s successful in spite of performance), but because
programmers really eff-ing love writing Ruby.&lt;/p&gt;

&lt;p&gt;Which brings me to back to Elixir: writing Elixir is so darn fun. For a Rubyist
getting introduced to Elixir for the first time, the surface area of the language feels
familiar. We get new concepts, like pattern matching, guard clauses, and
comprehensions. Working with OTP abstractions feels a bit foreign at first, but once this
flavor starts to sink in, we may start to regain some of that feeling of how
exciting it can be to play with new ideas (new, at least, to Rubyists).&lt;/p&gt;

&lt;p&gt;With all abstractions and functionality provided by the Elixir language, and its
ability to scale, handle fault tolerance, to be distributed - I can&amp;#39;t imagine a
technology choice better suited for the web.  These traits alone may help
convince engineering leads to go along with Elixir for the next web app, i.e.,
&amp;quot;right tool for the job&amp;quot;.  Maybe our next web app doesn&amp;#39;t truly need the
concurrency or scalability made possible by the BEAM virtual machine, but it&amp;#39;s
sure fun to learn how to take advantage of it and be able to apply it when
necessary.&lt;/p&gt;

&lt;p&gt;I haven&amp;#39;t been this excited about a language and its primary web framework,
since, well, Ruby on Rails came along.&lt;/p&gt;

&lt;p&gt;With Elixir we get a tool that&amp;#39;s both fun to use and that can scale with the needs
of the business. From the start, it&amp;#39;s like getting the best of Ruby and whatever you think you
will replace it with later. Something about that just feels right.&lt;/p&gt;

&lt;div class="callout panel"&gt;
&lt;p&gt;
  If you're interested in Elixir and in New York City on Thursday, Oct 27 2016, please check out the &lt;a href="http://empex.co"&gt;Empire City Elixir Conference Halloween Lightning Talks&lt;/a&gt;. Registration is free and you'll get to meet folks in the blossoming Elixir community in New York City at a really cool venue.
&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Using Web Push Notifications with VAPID</title>
    <link rel="alternate" href="/blog/using-the-web-push-api-with-vapid.html"/>
    <id>/blog/using-the-web-push-api-with-vapid.html</id>
    <published>2016-10-21T00:00:00+00:00</published>
    <updated>2016-10-21T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Push messages from mobile and desktop browsers are &lt;a href="http://caniuse.com/#feat=push-api"&gt;now a thing&lt;/a&gt; on the open web.&lt;/p&gt;

&lt;p&gt;Why use the Push API? It allows us to use free, third-party services to notify our users
of events, even when they're not actively engaged with our site. It's
not meant...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Push messages from mobile and desktop browsers are &lt;a href="http://caniuse.com/#feat=push-api"&gt;now a thing&lt;/a&gt; on the open web.&lt;/p&gt;

&lt;p&gt;Why use the Push API? It allows us to use free, third-party services to notify our users
of events, even when they&amp;#39;re not actively engaged with our site. It&amp;#39;s
not meant to replace other methods of pushing data to clients, like
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"&gt;WebSockets&lt;/a&gt; or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events"&gt;Server Sent Events&lt;/a&gt;, but can be useful for sending small, infrequent payloads to keep users engaged. Think: a build has finished successfully, a new post was published, a touchdown was scored.  What&amp;#39;s
common place on our smartphones from installed apps is now possible from the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serviceworker-rails.herokuapp.com/push-simple/"&gt;&lt;img src="/assets/images/screenshots/screenshot-sw-sandbox-push-simple-3-36a167ad.jpg" alt="Push message in Chrome" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though only supported in Chrome and Firefox on the desktop and in Chrome on Android at the time of this writing, it&amp;#39;ll be more widespread soon enough. While I previously &lt;a href="/blog/web-push-notifications-from-rails.html"&gt;wrote about this topic&lt;/a&gt;, there have been recent changes in the Chrome implementation to make the API consistent with Firefox, which we&amp;#39;ll describe here.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;#39;ll walk through setting up a Ruby or Node.js web application to use the Push API with the &lt;a href="https://tools.ietf.org/html/draft-ietf-webpush-vapid-01"&gt;Voluntary Application server Identification (VAPID)&lt;/a&gt;. Use of VAPID for push requests is optional, but primarily a security benefit. Application servers use VAPID to identify themselves to the push servers so push subscriptions can be properly restricted to their origin app servers. In other words, VAPID could theoretically prevent an attacker from stealing a user &lt;code&gt;PushSubscription&lt;/code&gt; and sending push messages to that recipient from another server. Down the road, push services may be able to provide analytics and debugging assistance for app servers using the VAPID protocol. Another benefit: in Chrome, it is no longer necessary to register our web apps through the Google Developer Console and pass around Google app credentials in web push requests.&lt;/p&gt;

      &lt;h2 id="overview" class="title"&gt;
        &lt;a name="overview" class="anchor" href="#overview"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Overview
      &lt;/h2&gt;
    
&lt;p&gt;There are three parties involved in delivering a push message.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your application server&lt;/li&gt;
&lt;li&gt;Your user&lt;/li&gt;
&lt;li&gt;A push server, e.g., Google or Mozilla&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before a push message can be delivered with VAPID, a few criteria should be satisfied:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your application server has generated a set of VAPID keys that will be used to sign Push API requests. This is a one-time step (at least until we decide to reset the keys).&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;manifest.json&lt;/code&gt; file, linked from a page on our website, identifies our app settings.&lt;/li&gt;
&lt;li&gt;In the user&amp;#39;s web browser, a service worker script is installed and activated. The &lt;code&gt;pushManager&lt;/code&gt; property of the &lt;code&gt;ServiceWorkerRegistration&lt;/code&gt; is subscribed to push events with our VAPID public key, with creates a &lt;code&gt;subscription&lt;/code&gt; JSON object on the client side.&lt;/li&gt;
&lt;li&gt;Your server makes an API request to a push server (likely using a server-side library) to send a notification with the &lt;code&gt;subscription&lt;/code&gt; obtained from the client and an optional payload (the message).&lt;/li&gt;
&lt;li&gt;Your service worker is set up to receive &lt;code&gt;&amp;#39;push&amp;#39;&lt;/code&gt; events. To trigger a desktop notification, the user has accepted the prompt to receive notifications from our site.&lt;/li&gt;
&lt;/ol&gt;

      &lt;h2 id="generating-vapid-keys" class="title"&gt;
        &lt;a name="generating-vapid-keys" class="anchor" href="#generating-vapid-keys"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Generating VAPID keys
      &lt;/h2&gt;
    
&lt;p&gt;To take advantage of the VAPID protocol, we would generate a public/private VAPID key pair to store on our server to be used for all user subscriptions.&lt;/p&gt;

&lt;p&gt;In Ruby, we can use the &lt;code&gt;webpush&lt;/code&gt; gem to generate a VAPID key that has both a &lt;code&gt;public_key&lt;/code&gt; and &lt;code&gt;private_key&lt;/code&gt; attribute to be saved on the server side.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# Gemfile
gem &amp;#39;webpush&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a Ruby console:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;require &amp;#39;webpush&amp;#39;

# One-time, on the server
vapid_key = Webpush.generate_key

# Save these in our application server settings
vapid_key.public_key
# =&amp;gt; &amp;quot;BC1mp...HQ=&amp;quot;

vapid_key.private_key
# =&amp;gt; &amp;quot;XhGUr...Kec&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Node.js, we can use the &lt;code&gt;web-push&lt;/code&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;npm install web-push --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the node REPL:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const webpush = require(&amp;#39;web-push&amp;#39;);

const vapidKeys = webpush.generateVAPIDKeys()

vapidKeys.publicKey
&amp;#39;BDO0P...eoH&amp;#39;

vapidKeys.privateKey
&amp;#39;3J303..r4I&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The keys returned will both be Base64-encoded byte strings. Only the public key
will be shared, both with the user&amp;#39;s browser and the push server as we&amp;#39;ll see
later.&lt;/p&gt;

      &lt;h2 id="declaring-manifest-json" class="title"&gt;
        &lt;a name="declaring-manifest-json" class="anchor" href="#declaring-manifest-json"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Declaring manifest.json
      &lt;/h2&gt;
    
&lt;p&gt;Add a &lt;code&gt;manifest.json&lt;/code&gt; file served at the scope of our app (or above), like at the root to describe our client application for use with the Push API.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;My App&amp;quot;,
    &amp;quot;short_name&amp;quot;: &amp;quot;my-app&amp;quot;,
    &amp;quot;start_url&amp;quot;: &amp;quot;/&amp;quot;,
    &amp;quot;icons&amp;quot;: [
    {
      &amp;quot;src&amp;quot;: &amp;quot;/images/my-push-logo-192x192.png&amp;quot;,
      &amp;quot;sizes&amp;quot;: &amp;quot;192x192&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;image/png&amp;quot;
    }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Link to it somewhere in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- index.html --&amp;gt;
&amp;lt;link rel=&amp;quot;manifest&amp;quot; href=&amp;quot;/manifest.json&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="installing-a-service-worker" class="title"&gt;
        &lt;a name="installing-a-service-worker" class="anchor" href="#installing-a-service-worker"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Installing a service worker
      &lt;/h2&gt;
    
&lt;p&gt;Your application javascript must register a service worker script at an appropriate scope (we&amp;#39;re sticking with the root).&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// application.js
// Register the serviceWorker script at /serviceworker.js from our server if supported
if (navigator.serviceWorker) {
  navigator.serviceWorker.register(&amp;#39;/serviceworker.js&amp;#39;)
  .then(function(reg) {
    console.log(&amp;#39;Service worker change, registered the service worker&amp;#39;);
  });
}
// Otherwise, no push notifications :(
else {
  console.error(&amp;#39;Service worker is not supported in this browser&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Rails developers, we may want to look at the &lt;a href="https://github.com/rossta/serviceworker-rails"&gt;&lt;code&gt;serviceworker-rails&lt;/code&gt; gem&lt;/a&gt; and this &lt;a href="https://rossta.net/blog/service-worker-on-rails.html"&gt;helpful tutorial&lt;/a&gt; to integrate service worker scripts with the Rails asset pipeline.&lt;/p&gt;

      &lt;h2 id="subscribing-to-push-notifications" class="title"&gt;
        &lt;a name="subscribing-to-push-notifications" class="anchor" href="#subscribing-to-push-notifications"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Subscribing to push notifications
      &lt;/h2&gt;
    
&lt;p&gt;The VAPID public key we generated earlier is made available to the client as a &lt;code&gt;Uint8Array&lt;/code&gt;. To do this, one way would be to expose the urlsafe-decoded bytes from Ruby to JavaScript when rendering the HTML template.&lt;/p&gt;

&lt;p&gt;In Ruby, we might embed the key as raw bytes from the application &lt;code&gt;ENV&lt;/code&gt; or some other application settings mechanism into an HTML template with help from the &lt;code&gt;Base64&lt;/code&gt; module in the standard library. Global variables are used here for simplicity.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# server
@decodedVapidPublicKey = Base64.urlsafe_decode64(ENV[&amp;#39;VAPID_PUBLIC_KEY&amp;#39;]).bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- html template --&amp;gt;
&amp;lt;script&amp;gt;
window.vapidPublicKey = new Uint8Array(&amp;lt;%= @decodedVapidPublicKey %&amp;gt;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Node.js, we could use the &lt;code&gt;urlsafe-base64&lt;/code&gt; package to decode the public key and convert it to raw bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// server
const urlsafeBase64 = require(&amp;#39;urlsafe-base64&amp;#39;);
const decodedVapidPublicKey = urlsafeBase64.decode(process.env.VAPID_PUBLIC_KEY);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- html template --&amp;gt;
&amp;lt;script&amp;gt;
window.vapidPublicKey = new Uint8Array(&amp;lt;%= decodedVapidPublicKey %&amp;gt;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your application javascript would then use the &lt;code&gt;pushManager&lt;/code&gt; property to subscribe to push notifications, passing the VAPID public key to the subscription settings.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// application.js
// When serviceWorker is supported, installed, and activated,
// subscribe the pushManager property with the vapidPublicKey
navigator.serviceWorker.ready.then((serviceWorkerRegistration) =&amp;gt; {
  serviceWorkerRegistration.pushManager
  .subscribe({
    userVisibleOnly: true,
    applicationServerKey: window.vapidPublicKey
  });
});
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="triggering-a-web-push-notification" class="title"&gt;
        &lt;a name="triggering-a-web-push-notification" class="anchor" href="#triggering-a-web-push-notification"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Triggering a web push notification
      &lt;/h2&gt;
    
&lt;p&gt;The web push library we&amp;#39;re using on the backend will be responsible for
packaging up the request to the subscription&amp;#39;s endpoint and handling encryption, so the user&amp;#39;s push subscription must be sent from the client to the application server at some point.&lt;/p&gt;

&lt;p&gt;In the example below, we send the JSON generated subscription object to our backend with a message when a button on the page is clicked.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// application.js
$(&amp;#39;.webpush-button&amp;#39;).on(&amp;#39;click&amp;#39;, (e) =&amp;gt; {
  navigator.serviceWorker.ready
  .then((serviceWorkerRegistration) =&amp;gt; {
    serviceWorkerRegistration.pushManager.getSubscription()
    .then((subscription) =&amp;gt; {
      $.post(&amp;#39;/push&amp;#39;, {
        subscription: subscription.toJSON(),
        message: &amp;#39;You clicked a button!&amp;#39;
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to &lt;code&gt;pushManager.getSubscription()&lt;/code&gt; returns a Promise that provides the
&lt;code&gt;PushSubscription&lt;/code&gt; instance with all the information the push service needs to
send a push message to this user&amp;#39;s browser. This includes an &lt;code&gt;endpoint&lt;/code&gt;, the URL
on the push server where we&amp;#39;ll send the push request, and a pair of &lt;code&gt;keys&lt;/code&gt;
labelled as &lt;code&gt;p256dh&lt;/code&gt; and &lt;code&gt;auth&lt;/code&gt; required to encrypt the push message payload. If interested to learn more about how this encryption works, check out this detailed summary on &lt;a href="https://developers.google.com/web/updates/2016/03/web-push-encryption"&gt;web push payload encryption&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// subscription.toJSON();
{
  endpoint: &amp;quot;https://android.googleapis.com/gcm/send/a-subscription-id&amp;quot;,
  keys: {
    auth: &amp;#39;AEl35...7fG&amp;#39;,
    p256dh: &amp;#39;Fg5t8...2rC&amp;#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imagine a Ruby app endpoint that responds to the request by triggering notification through the &lt;code&gt;webpush&lt;/code&gt; gem. VAPID details include a URL or mailto address for our website and the Base64-encoded public/private VAPID key pair we generated earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# app.rb
post &amp;#39;/push&amp;#39; do
  Webpush.payload_send(
    message: params[:message]
    endpoint: params[:subscription][:endpoint],
    p256dh: params[:subscription][:keys][:p256dh],
    auth: params[:subscription][:keys][:auth],
    ttl: 24 * 60 * 60,
    vapid: {
      subject: &amp;#39;mailto:sender@example.com&amp;#39;,
      public_key: ENV[&amp;#39;VAPID_PUBLIC_KEY&amp;#39;],
      private_key: ENV[&amp;#39;VAPID_PRIVATE_KEY&amp;#39;]
    }
  )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Node.js, usage of the &lt;code&gt;web-push&lt;/code&gt; package might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;# index.js
const webpush = require(&amp;#39;web-push&amp;#39;);

// ...

app.post(&amp;#39;/push&amp;#39;, function(request, response) {
  const subscription = request.param(&amp;#39;subscription&amp;#39;);
  const message = request.param(&amp;#39;message&amp;#39;);

  setTimeout(() =&amp;gt; {
    const options = {
      TTL: 24 * 60 * 60,
      vapidDetails: {
        subject: &amp;#39;mailto:sender@example.com&amp;#39;,
        publicKey: process.env.VAPID_PUBLIC_KEY,
        privateKey: process.env.VAPID_PRIVATE_KEY
      },
    }

    webpush.sendNotification(
      subscription,
      message,
      options
    );

  }, 0);

  response.send(&amp;#39;OK&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="receiving-the-push-event" class="title"&gt;
        &lt;a name="receiving-the-push-event" class="anchor" href="#receiving-the-push-event"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Receiving the push event
      &lt;/h2&gt;
    
&lt;p&gt;Your &lt;code&gt;/serviceworker.js&lt;/code&gt; script can respond to &lt;code&gt;&amp;#39;push&amp;#39;&lt;/code&gt; events to trigger desktop notifications by calling &lt;code&gt;showNotification&lt;/code&gt; on the &lt;code&gt;registration&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// serviceworker.js
// The serviceworker context can respond to &amp;#39;push&amp;#39; events and trigger
// notifications on the registration property
self.addEventListener(&amp;quot;push&amp;quot;, (event) =&amp;gt; {
  let title = (event.data &amp;amp;&amp;amp; event.data.text()) || &amp;quot;Yay a message&amp;quot;;
  let body = &amp;quot;We have received a push message&amp;quot;;
  let tag = &amp;quot;push-simple-demo-notification-tag&amp;quot;;
  let icon = &amp;#39;/assets/my-logo-120x120.png&amp;#39;;

  event.waitUntil(
    self.registration.showNotification(title, { body, icon, tag })
  )
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before the notifications can be displayed, the user must grant permission for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/notification"&gt;notifications&lt;/a&gt; in a browser prompt, using something like the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// application.js

// Let&amp;#39;s check if the browser supports notifications
if (!(&amp;quot;Notification&amp;quot; in window)) {
  console.error(&amp;quot;This browser does not support desktop notification&amp;quot;);
}

// Let&amp;#39;s check whether notification permissions have already been granted
else if (Notification.permission === &amp;quot;granted&amp;quot;) {
  console.log(&amp;quot;Permission to receive notifications has been granted&amp;quot;);
}

// Otherwise, we need to ask the user for permission
else if (Notification.permission !== &amp;#39;denied&amp;#39;) {
  Notification.requestPermission(function (permission) {
  // If the user accepts, let&amp;#39;s create a notification
    if (permission === &amp;quot;granted&amp;quot;) {
      console.log(&amp;quot;Permission to receive notifications has been granted&amp;quot;);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all that setup, we should see a browser notification triggered via the Push API.&lt;/p&gt;

&lt;p&gt;As this is still an emerging technology, things are rapidly changing. I&amp;#39;d be
interested to hear how things are working out for folks integrating web push
into their web apps.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fill out Google Forms from the command line</title>
    <link rel="alternate" href="/blog/fill-out-google-forms-from-the-command-line-with-casperjs.html"/>
    <id>/blog/fill-out-google-forms-from-the-command-line-with-casperjs.html</id>
    <published>2016-09-28T00:00:00+00:00</published>
    <updated>2016-09-28T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;To give you some idea about what a geek I am, when &lt;a href="https://twitter.com/saronyitbarek"&gt;Saron&lt;/a&gt; asked me to fill out a form to submit blog posts to the &lt;a href="http://www.codenewbie.org/blogs/submit-to-the-codenewbie-newsletter"&gt;CodeNewbie Newsletter&lt;/a&gt;, I thought, "what if I could automate that?" I happen to spend a lot of time in a terminal and thinking about webpage...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;To give you some idea about what a geek I am, when &lt;a href="https://twitter.com/saronyitbarek"&gt;Saron&lt;/a&gt; asked me to fill out a form to submit blog posts to the &lt;a href="http://www.codenewbie.org/blogs/submit-to-the-codenewbie-newsletter"&gt;CodeNewbie Newsletter&lt;/a&gt;, I thought, &amp;quot;what if I could automate that?&amp;quot; I happen to spend a lot of time in a terminal and thinking about webpage interaction, so...&lt;/p&gt;

&lt;p&gt;Instead of filling out the form for my last article, I ended up creating a tool to submit a Google Form from the command line. At its core, it&amp;#39;s a &lt;a href="http://casperjs.org/"&gt;CasperJS&lt;/a&gt; script available as an npm package. It&amp;#39;s called &lt;a href="https://github.com/rossta/form-to-terminal"&gt;&lt;code&gt;form-to-terminal&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;form-to-terminal&lt;/code&gt;, install it via npm and use the executable &lt;code&gt;ftt&lt;/code&gt; along with a url to a Google Form url:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;# Open a terminal and enter the following commands after the prompt ($):
$ npm install -g form-to-terminal
$ ftt [Google Form Url]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This assumes that you&amp;#39;ve already installed &lt;a href="https://nodejs.org/en/download/package-manager/"&gt;nodejs&lt;/a&gt;,  &lt;a href="http://docs.casperjs.org/en/latest/installation.html"&gt;CasperJS&lt;/a&gt;, and its pre-requisites.&lt;/p&gt;

      &lt;h2 id="casper-the-friendly-ghost" class="title"&gt;
        &lt;a name="casper-the-friendly-ghost" class="anchor" href="#casper-the-friendly-ghost"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Casper, the friendly ghost
      &lt;/h2&gt;
    
&lt;p&gt;CasperJS is actually just a wrapper around &lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;, which provides
fully-featured API for interacting with webpages from JavaScript.&lt;/p&gt;

&lt;p&gt;CasperJS makes this scripting more pleasant by providing some syntactic sugar for dealing
with multi-stage interactions and waiting for asynchronous actions. In other
words, I could&amp;#39;ve done this with just using PhantomJS, but the code I needed to
write got a whole lot easier by using the CasperJS module on top of it.&lt;/p&gt;

      &lt;h2 id="a-closer-look" class="title"&gt;
        &lt;a name="a-closer-look" class="anchor" href="#a-closer-look"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A closer look
      &lt;/h2&gt;
    
&lt;p&gt;Let&amp;#39;s look at some sample code. What follows are simplified excerpts from the &lt;code&gt;form-to-terminal&lt;/code&gt; CasperJS script.&lt;/p&gt;

&lt;p&gt;Given a &lt;code&gt;url&lt;/code&gt; to a Google Form, first we &lt;code&gt;start&lt;/code&gt; the webpage interaction, which waits to complete
before moving to the next step.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;var casper = require(&amp;quot;casper&amp;quot;).create();

casper.start(url, function() {
  this.waitForSelector(&amp;quot;form&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To provide the command line interface with some context, the script parses the
page for the form title to display back to the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;var formTitle;

casper.then(function() {
  formTitle = this.evaluate(getFormTitle);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we want to allow human interaction with each input one-by-one, so we parse
the form for the text inputs and their labels so we can ask the user to enter answers back into the
terminal using &lt;code&gt;readLine&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;var system = require(&amp;#39;system&amp;#39;);
var answers;

casper.then(function() {
  var page = this;
  page.echo(&amp;quot;Please fill out &amp;quot; + formTitle);
  page.echo(&amp;quot;----------------&amp;quot; + formTitle.length);
  answers = page.evaluate(getFormInputs)

  answers.filter(function(input) {
    return input.type == &amp;quot;text&amp;quot;;
  }).map(function(input, i) {
    page.echo(&amp;quot;&amp;quot;);
    page.echo(&amp;quot;&amp;quot;+(i+1)+&amp;quot;) &amp;quot;+input.label+&amp;quot;:&amp;quot;);

    input.value = system.stdin.readLine();
t
    return input;
  });
});m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome! Now we just need to pass the &lt;code&gt;answers&lt;/code&gt; back to the webpage and submit
the form. CasperJS makes it easy to do this with additional args to
&lt;code&gt;this.evaluate&lt;/code&gt; in the &lt;code&gt;casper&lt;/code&gt; context:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;casper.then(function() {
  this.evaluate(submitAnswers, {answers: answers});
  page.echo(&amp;quot;&amp;quot;);
  this.echo(&amp;quot;Thanks!&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out the full &lt;a href="https://github.com/rossta/form-to-terminal/blob/96a4dd8be4b071b5bfb5adb50676a6383c685240/index.js"&gt;CasperJS script&lt;/a&gt; to see how &lt;code&gt;form-to-terminal&lt;/code&gt; interacts with Google Forms in more detail.&lt;/p&gt;

      &lt;h2 id="command-line-node" class="title"&gt;
        &lt;a name="command-line-node" class="anchor" href="#command-line-node"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Command line node
      &lt;/h2&gt;
    
&lt;p&gt;I wanted to make this work for others on the command line as an npm package. To
get this to work, we have to understand that &lt;code&gt;casperjs&lt;/code&gt; is already its own
process. To make it work from &lt;code&gt;node&lt;/code&gt;, I needed to spawn the &lt;code&gt;casperjs&lt;/code&gt; while
passing arguments from node. I also needed to make sure that the &lt;code&gt;stdin&lt;/code&gt;
stream is piped from parent (node) to the child (casperjs) process so that we our answers
for the form inputs end up on the web page.&lt;/p&gt;

&lt;p&gt;The key pieces of the command line tool are shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const child = spawn(&amp;#39;casperjs&amp;#39;, [&amp;#39;index.js&amp;#39;].concat(urls));

child.stdin.setEncoding(&amp;#39;utf-8&amp;#39;);
child.stdout.pipe(process.stdout);
process.stdin.pipe(child.stdin);
child.on(&amp;#39;exit&amp;#39;, process.exit);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;urls&lt;/code&gt; represent the set of Google Form urls with which the CasperJS script
will interact. The line &lt;code&gt;process.stdin.pipe(child.stdin);&lt;/code&gt; ensures the text we
enter on the command line is passed to CasperJS.&lt;/p&gt;

      &lt;h2 id="going-further" class="title"&gt;
        &lt;a name="going-further" class="anchor" href="#going-further"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Going further
      &lt;/h2&gt;
    
&lt;p&gt;&lt;code&gt;form-to-terminal&lt;/code&gt; (as of version 1.0.2) only supports Google Forms and only
fully those with text inputs. It&amp;#39;s likely quite buggy - for example, it doesn&amp;#39;t
currently check that you&amp;#39;ve filled out all required fields, nor does it check
for validations errors after you&amp;#39;ve submitted the form - but, hey, it&amp;#39;s a start.
Go ahead and &lt;a href="https://github.com/rossta/form-to-terminal"&gt;check it out on GitHub&lt;/a&gt; and contribute some improvements!&lt;/p&gt;

&lt;p&gt;CasperJS is a fun tool for automating your workflow and worth a look for
automated testing for web developers.&lt;/p&gt;

&lt;p&gt;Of course, I submitted this post to the CodeNewbie Newsletter using
&lt;code&gt;form-to-terminal&lt;/code&gt; - how meta? It comes with a built-in shortcut to the
CodeNewbie Google Form, so you can try it too:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;$ ftt codenewbie
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
