<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2018-06-07T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Deploying Vue with CircleCI 2.0</title>
    <link rel="alternate" href="/blog/deploying-vue-with-circleci-2.html"/>
    <id>/blog/deploying-vue-with-circleci-2.html</id>
    <published>2018-06-07T00:00:00+00:00</published>
    <updated>2018-06-07T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I recently upgraded my &lt;a href="https://github.com/rossta/connect-four-vue"&gt;Connect Four&lt;/a&gt; Vue.js application to build on CircleCI 2.0 . In my &lt;a href="/blog/deploying-vue-to-amazon-s3-with-circleci.html"&gt;previous post&lt;/a&gt;, I showed how I used continuous integration on CircleCI 1.0 to bundle Vue.js assets and upload them to an S3 bucket configured to serve the application...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I recently upgraded my &lt;a href="https://github.com/rossta/connect-four-vue"&gt;Connect Four&lt;/a&gt; Vue.js application to build on CircleCI 2.0 . In my &lt;a href="/blog/deploying-vue-to-amazon-s3-with-circleci.html"&gt;previous post&lt;/a&gt;, I showed how I used continuous integration on CircleCI 1.0 to bundle Vue.js assets and upload them to an S3 bucket configured to serve the application as a static website. Now that &lt;a href="https://circleci.com/blog/sunsetting-1-0/"&gt;CircleCI is sunsetting 1.0&lt;/a&gt;, I revisit my configuration and update it for 2.0. Here&amp;#39;s how I did it.&lt;/p&gt;

&lt;p&gt;The basic steps of the build are the same: once I push changes to GitHub, CircleCI will detect those changes and trigger a build. That build will bundle the app using the &lt;code&gt;vue-cli&lt;/code&gt; command mapped to &lt;code&gt;yarn run build&lt;/code&gt;. The assets output from that step will then be uploaded to S3 using the &lt;code&gt;s3deploy&lt;/code&gt; golang package only if the build is running against master.&lt;/p&gt;

      &lt;h3 id="the-old-config" class="title"&gt;
        &lt;a name="the-old-config" class="anchor" href="#the-old-config"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The old config
      &lt;/h3&gt;
    
&lt;p&gt;For reference, here is the old configuration I had been using to deploy the application on CircleCI 1.0.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;machine:
  environment:
    CIRCLE_BUILD_DIR: $HOME/$CIRCLE_PROJECT_REPONAME
    PATH: $PATH:$CIRCLE_BUILD_DIR/bin:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin&amp;quot;

  post:
    - mkdir -p $CIRCLE_BUILD_DIR/bin
  node:
    version: 8.9.1

dependencies:
  pre:
    - go get -v github.com/bep/s3deploy
  override:
    - yarn
  cache_directories:
    - ~/.cache/yarn
    - bin

test:
  override:
    - yarn run build

deployment:
  s3up:
    branch: master
    commands:
      - s3deploy -source=dist/ -region=us-west-2 -bucket=rossta-connect-four
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CircleCI 2.0 offers a number of features to give developers more control and flexibility. This does mean that configuration is more complex than it was in 1.0. A couple of key improvements include &lt;a href="https://circleci.com/blog/introducing-workflows-on-circleci-2-0/"&gt;workflows&lt;/a&gt; and the ability to run builds Docker containers. We&amp;#39;ll take advantage of both to deploy Vue.js to S3.&lt;/p&gt;

&lt;p&gt;Workflows are useful when you need to split a build up into a number of jobs. Those jobs may have different dependencies, or in some cases, may run in parallel. Since I want to bundle assets on all branches, but only deploy from the primary (&lt;code&gt;master&lt;/code&gt;) branch, it makes sense for me to split my CircleCI 2.0 configuration into two jobs, which I&amp;#39;ll call &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;deploy&lt;/code&gt;. It&amp;#39;s worth noting that, even though these jobs must share resources (the bundled assets), I can configure them to run from different Docker containers; this is necessary because the primary language dependency in the build step is node.js and in the deploy phase, it&amp;#39;s golang.&lt;/p&gt;

      &lt;h3 id="the-build-job" class="title"&gt;
        &lt;a name="the-build-job" class="anchor" href="#the-build-job"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The build job
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s what the build step looks like in my new CircleCI 2.0 config:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8.11.2
    parallelism: 1
    working_directory: ~/rossta/connect-four-vue
    steps:
      - checkout
      - attach_workspace:
          at: ~/rossta/connect-four-vue
      - restore_cache:
          key: v1-yarn-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
      - run: yarn install
      - save_cache:
          key: v1-yarn-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
          paths:
            - ./node_modules
      - run: yarn run build
      - persist_to_workspace:
          root: .
          paths: dist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This job will build from the &lt;code&gt;circleci/node:8.11.2&lt;/code&gt; base Docker image. Though any Docker image can be used, CircleCI-supported images are prepared with tools that are typically needed for most builds. (&lt;a href="https://circleci.com/docs/2.0/circleci-images/"&gt;Here&amp;#39;s a list of pre-built CircleCI Docker images&lt;/a&gt;). The key entries here include &lt;code&gt;restore_cache&lt;/code&gt; and &lt;code&gt;save_cache&lt;/code&gt;. These entries ensure the build preserve previously installed node modules when the &lt;code&gt;yarn.lock&lt;/code&gt; file hasn&amp;#39;t changed. More importantly, the &lt;code&gt;attach_workspace&lt;/code&gt; and &lt;code&gt;persist_to_workspace&lt;/code&gt; entries allow us to share the build output to the &lt;code&gt;dist/&lt;/code&gt; directory across jobs.&lt;/p&gt;

      &lt;h3 id="the-deploy-job" class="title"&gt;
        &lt;a name="the-deploy-job" class="anchor" href="#the-deploy-job"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The deploy job
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the configuration used to upload assets to S3.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;version: 2
jobs:
  # ...
  deploy:
    docker:
      - image: circleci/golang:1.9.6
    parallelism: 1
    working_directory: ~/rossta/connect-four-vue
    steps:
      - checkout
      - attach_workspace:
          at: ~/rossta/connect-four-vue
      - restore_cache:
          key: v1-pkg-cache
      - run: go get -v github.com/bep/s3deploy
      - save_cache:
          key: v1-pkg-cache
          paths:
            - /go/pkg
      - run:
          name: Deploy to S3
          command: |
            s3deploy -source=dist/ -region=us-west-2 -bucket=rossta-connect-four
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the deploy, we need a golang base image to run the &lt;code&gt;s3deploy&lt;/code&gt; command. A key step in this job is the &lt;code&gt;attach_workspace&lt;/code&gt; entry, which will contain the &lt;code&gt;dist/&lt;/code&gt; build output we persisted in the build job. That &lt;code&gt;dist/&lt;/code&gt; directory is the source given to the &lt;code&gt;s3deploy&lt;/code&gt; command. The deploy job also specifies &lt;code&gt;restore_cache&lt;/code&gt; and &lt;code&gt;save_cache&lt;/code&gt; for the &lt;code&gt;s3deploy&lt;/code&gt; go package.&lt;/p&gt;

&lt;p&gt;One piece not shown in the config file are the AWS credentials needed to upload the assets to S3. The &lt;code&gt;s3deploy&lt;/code&gt; command will implicitly look for the environment variables &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;. Since I do not want to publish these credentials to Github, I added them through the CircleCI web interface using &lt;a href="https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project"&gt;these instructions&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="the-workflow" class="title"&gt;
        &lt;a name="the-workflow" class="anchor" href="#the-workflow"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The workflow
      &lt;/h3&gt;
    
&lt;p&gt;Finally, to tie these jobs together, I&amp;#39;m using a workflow as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;version: 2
# ...
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="putting-it-all-together" class="title"&gt;
        &lt;a name="putting-it-all-together" class="anchor" href="#putting-it-all-together"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Putting it all together
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the complete configuration for CircleCI 2.0 at the time of this writing, located at &lt;a href="https://github.com/rossta/connect-four-vue/blob/master/.circleci/config.yml"&gt;&lt;code&gt;.circleci/config.yml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8.11.2
    parallelism: 1
    working_directory: ~/rossta/connect-four-vue
    steps:
      - checkout
      - attach_workspace:
          at: ~/rossta/connect-four-vue
      - restore_cache:
          key: v1-yarn-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
      - run: yarn install
      - save_cache:
          key: v1-yarn-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
          paths:
            - ./node_modules
      - run: yarn run build
      - persist_to_workspace:
          root: .
          paths: dist

  deploy:
    docker:
      - image: circleci/golang:1.9.6
    parallelism: 1
    working_directory: ~/rossta/connect-four-vue
    steps:
      - checkout
      - attach_workspace:
          at: ~/rossta/connect-four-vue
      - restore_cache:
          key: v1-pkg-cache
      - run: go get -v github.com/bep/s3deploy
      - save_cache:
          key: v1-pkg-cache
          paths:
            - /go/pkg
      - run:
          name: Deploy to S3
          command: |
            s3deploy -source=dist/ -region=us-west-2 -bucket=rossta-connect-four

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, this blog is also a static website built and published to Github pages via CircleCI. I recently upgraded to its config to 2.0, which you can &lt;a href="https://github.com/rossta/rossta.github.com/blob/develop/.circleci/config.yml"&gt;check out here&lt;/a&gt; if you&amp;#39;re interested. CircleCI 1.0 goes dark at the end of August, 2018, so upgrade your configurations soon!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Deploying a Vue.js website to Amazon S3 with CircleCI</title>
    <link rel="alternate" href="/blog/deploying-vue-to-amazon-s3-with-circleci.html"/>
    <id>/blog/deploying-vue-to-amazon-s3-with-circleci.html</id>
    <published>2018-02-05T00:00:00+00:00</published>
    <updated>2018-02-05T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: for configuring CircleCI 2.0 to deploy Vue applications to S3, see &lt;a href="https://rossta.net/blog/deploying-vue-with-circleci-2.html"&gt;my follow up post&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we'll walkthrough how I set up continuous deployment for my &lt;a href="http://connect-four-vue-abcdefg.s3-website-us-west-2.amazonaws.com/"&gt;Vue.js static website&lt;/a&gt;. Every time I &lt;code&gt;git push&lt;/code&gt; to the primary branch of my repository...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: for configuring CircleCI 2.0 to deploy Vue applications to S3, see &lt;a href="https://rossta.net/blog/deploying-vue-with-circleci-2.html"&gt;my follow up post&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we&amp;#39;ll walkthrough how I set up continuous deployment for my &lt;a href="http://connect-four-vue-abcdefg.s3-website-us-west-2.amazonaws.com/"&gt;Vue.js static website&lt;/a&gt;. Every time I &lt;code&gt;git push&lt;/code&gt; to the primary branch of my repository, an automated process will build the project and upload any new files to Amazon S3 with the appropriate caching headers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is part of an ongoing series on &lt;a href="/series/connect-four.html"&gt;building Connect Four with Vue.js and Phoenix&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an overview of the tools involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Github (or similar) account&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vue-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;an AWS account&lt;/li&gt;
&lt;li&gt;an S3 bucket set up to host a static website&lt;/li&gt;
&lt;li&gt;AWS credentials for reading and writing the S3 bucket&lt;/li&gt;
&lt;li&gt;a CircleCI account&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;circle.yml&lt;/code&gt; configured to build and deploy the site&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="from-codepen-to-github" class="title"&gt;
        &lt;a name="from-codepen-to-github" class="anchor" href="#from-codepen-to-github"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        From CodePen to Github
      &lt;/h3&gt;
    
&lt;p&gt;Since my version of Connect Four up to this point has been &lt;a href="https://codepen.io/rossta/pen/VydJKG"&gt;built and hosted entirely on CodePen&lt;/a&gt;, my first step was to move the source code to Github. I initialized a new &lt;code&gt;vue-cli&lt;/code&gt; (version 2) using the Webpack template.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ yarn global install vue-cli
$ vue init webpack connect-four-vue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the game working and now backed by version control (&lt;a href="https://github.com/rossta/connect-four-vue"&gt;source code&lt;/a&gt;), I was able to bundle a set of static assets suitable for deployment to a provider like S3:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ yarn run build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &lt;code&gt;vue-cli&lt;/code&gt; version 2, this command builds an index file and its associated assets to the &lt;code&gt;dist/&lt;/code&gt; directory. This will be important when we set up the build for continuous deployment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For users of &lt;code&gt;vue-cli&lt;/code&gt; version 3, the above command would be simply &lt;code&gt;yarn build&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;aside class="callout panel"&gt;
&lt;p&gt;
Though there are big changes coming to &lt;i&gt;vue-cli&lt;/i&gt; in version 3, it's still in alpha and the documentation is &lt;a href="https://github.com/vuejs/vue-cli/tree/2c61d236d77dfcb22b4560afe4c957ddf45b4337/docs"&gt;still WIP&lt;/a&gt; as of this writing. Though the commands for initializing and building a Vue project may differ in v3, the workflow described in this post still applies.
&lt;/p&gt;
&lt;/aside&gt;

      &lt;h3 id="the-host-with-the-most" class="title"&gt;
        &lt;a name="the-host-with-the-most" class="anchor" href="#the-host-with-the-most"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The host with the most
      &lt;/h3&gt;
    
&lt;p&gt;To host on Amazon S3, I needed an S3 bucket with permissions to make its contents available to the public for static website hosting. This can be done from the &lt;a href="https://aws.amazon.com"&gt;AWS console&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/s3/aws-create-bucket-767a39de.jpg" alt="Aws create bucket" /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Properties&lt;/strong&gt; pane on the bucket management page, I enabled &lt;em&gt;Static Website Hosting&lt;/em&gt; and entered &lt;code&gt;index.html&lt;/code&gt; as the name of the index document to match the output of the Vue build.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/s3/aws-static-website-properties-03528fa5.jpg" alt="Aws static website properties" /&gt;&lt;/p&gt;

&lt;p&gt;This screen also reveals the public endpoint for the S3 bucket index page, which is what we&amp;#39;ll need to navigate to our deployed site in the browser. The endpoint may be something like &lt;strong&gt;&lt;a href="http://bucket-name.s3-website-region-name.amazonaws.com"&gt;http://bucket-name.s3-website-region-name.amazonaws.com&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Permissions&lt;/strong&gt; tab, I added a bucket policy to provide public read permissions to everything in the bucket.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/s3/aws-static-website-policy-10243aae.jpg" alt="Aws static website policy" /&gt;&lt;/p&gt;

&lt;p&gt;The  AWS docs recommend the following policy for static website hosting. If setting this up for your own bucket, be sure to replace &lt;code&gt;bucket-name&lt;/code&gt; in the &lt;em&gt;Resource&lt;/em&gt; string with your bucket name:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;{
    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
    &amp;quot;Statement&amp;quot;: [
        {
            &amp;quot;Sid&amp;quot;: &amp;quot;PublicReadForGetBucketObjects&amp;quot;,
            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
            &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,
            &amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
            &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::bucket-name/*&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on setting up static websites on Amazon S3, check out Kyle Galbraith&amp;#39;s &lt;a href="https://medium.freecodecamp.org/how-to-host-a-website-on-s3-without-getting-lost-in-the-sea-e2b82aa6cd38"&gt;How to host a website on S3 with getting lost in the sea&lt;/a&gt;, which also touches on costs and custom domain setup. Connor Leech wrote a nice post on &lt;a href="https://medium.com/@connorleech/host-a-vue-js-website-on-amazon-s3-for-the-best-hosting-solution-ever-%EF%B8%8F-eee2a28b2506"&gt;hosting a Vue.js website on Amazon S3&lt;/a&gt; with manual file upload, which I used as my starting point. The AWS documentation provides a &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html"&gt;general walkthrough&lt;/a&gt; as well.&lt;/p&gt;

      &lt;h3 id="automatic-for-the-people" class="title"&gt;
        &lt;a name="automatic-for-the-people" class="anchor" href="#automatic-for-the-people"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Automatic for the people
      &lt;/h3&gt;
    
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: for configuring CircleCI 2.0 to deploy Vue applications to S3, see &lt;a href="https://rossta.net/blog/deploying-vue-with-circleci-2.html"&gt;my follow up post&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For continuous deployment, I chose CircleCI 1.0 since I&amp;#39;m most familiar with its configuration options and it&amp;#39;s currently free for my needs.&lt;/p&gt;

&lt;p&gt;With my Github account linked to my CircleCI, I added my Connect Four Github project to CircleCI from the &lt;em&gt;Projects&lt;/em&gt; tab in the CircleCI dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/s3/circle-add-projects-922272d9.jpg" alt="Circle add projects" /&gt;&lt;/p&gt;

&lt;p&gt;I also added a &lt;code&gt;circle.yml&lt;/code&gt; file to my project similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;machine:
  environment:
    CIRCLE_BUILD_DIR: $HOME/$CIRCLE_PROJECT_REPONAME
    PATH: $PATH:$CIRCLE_BUILD_DIR/bin:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin&amp;quot;

  post:
    - mkdir -p $CIRCLE_BUILD_DIR/bin
  node:
    version: 8.9.1

dependencies:
  pre:
    - go get -v github.com/bep/s3deploy
  override:
    - yarn
  cache_directories:
    - ~/.cache/yarn
    - bin

test:
  override
    - yarn run build

deployment:
  s3up:
    branch: master
    commands:
      - s3deploy -source=dist/ -region=us-west-2 -bucket=connect-four-abcdefg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration above will do several things on each &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install npm dependencies with &lt;code&gt;yarn&lt;/code&gt; and fetch the binary, &lt;code&gt;s3deploy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;build the project with &lt;code&gt;yarn run build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sync build files to my S3 bucket with &lt;code&gt;s3deploy&lt;/code&gt; (only on the &lt;code&gt;develop&lt;/code&gt; branch)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the &lt;code&gt;s3deploy&lt;/code&gt; command receives a &lt;code&gt;-source=dist/&lt;/code&gt; option to indicate that only files output by the build step will be synced with S3.&lt;/p&gt;

&lt;p&gt;I like &lt;code&gt;s3deploy&lt;/code&gt; for its simplicity and speed (it&amp;#39;s written in Go). It will only upload new files or files that have changed. It also provides advanced configuration to fine tune response behavior on sets of files by route through a separate &lt;code&gt;.s3deploy.yml&lt;/code&gt; file. Here&amp;#39;s what I used to add long-term caching and gzipping for static assets in my bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;routes:
    - route: &amp;quot;^.+\\.(js|css|svg|ttf)$&amp;quot;
      #  cache static assets for 20 years
      headers:
         Cache-Control: &amp;quot;max-age=630720000, no-transform, public&amp;quot;
      gzip: true
    - route: &amp;quot;^.+\\.(png|jpg)$&amp;quot;
      headers:
         Cache-Control: &amp;quot;max-age=630720000, no-transform, public&amp;quot;
      gzip: true
    - route: &amp;quot;^.+\\.(html|xml|json|js)$&amp;quot;
      gzip: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the &lt;a href="https://github.com/bep/s3deploy"&gt;&lt;code&gt;s3deploy&lt;/code&gt; project page&lt;/a&gt; for more information on configuration options.&lt;/p&gt;

      &lt;h3 id="permissions-please" class="title"&gt;
        &lt;a name="permissions-please" class="anchor" href="#permissions-please"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Permissions please
      &lt;/h3&gt;
    
&lt;p&gt;Almost done! To give the &lt;code&gt;s3deploy&lt;/code&gt; command permissionsto add and modify files in my S3 bucket, I needed a set of AWS credentials linked to another AWS authorization policy. To do this, I created a new Amazon IAM user for programmatic access in the Security Credentials panel on AWS.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/s3/aws-add-user-1-2b33e2f3.jpg" alt="Aws add user 1" /&gt;&lt;/p&gt;

&lt;p&gt;I added this user to a security group with the following policy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;{
   &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
   &amp;quot;Statement&amp;quot;:[
      {
         &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,
         &amp;quot;Action&amp;quot;:[
            &amp;quot;s3:ListBucket&amp;quot;,
            &amp;quot;s3:GetBucketLocation&amp;quot;
         ],
         &amp;quot;Resource&amp;quot;:&amp;quot;arn:aws:s3:::&amp;lt;bucketname&amp;gt;&amp;quot;
      },
      {
         &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,
         &amp;quot;Action&amp;quot;:[
            &amp;quot;s3:PutObject&amp;quot;,
            &amp;quot;s3:PutObjectAcl&amp;quot;,
            &amp;quot;s3:DeleteObject&amp;quot;
         ],
         &amp;quot;Resource&amp;quot;:&amp;quot;arn:aws:s3:::&amp;lt;bucketname&amp;gt;/*&amp;quot;
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: don&amp;#39;t confuse this policy with your static website hosting policy!&lt;/p&gt;

&lt;p&gt;With my new IAM user, a fresh set of credentials, an AWS access key id and secret access key, are now available to control my S3 bucket programmatically.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/s3/aws-add-user-2-5943f1b3.jpg" alt="Aws add user 2" /&gt;&lt;/p&gt;

&lt;p&gt;If you follow these steps, make sure to keep your credentials in a safe place. Anyone with these credentials would be able to modify the contents of your S3 bucket with the permissions we&amp;#39;ve used.&lt;/p&gt;

&lt;aside class="callout panel"&gt;
&lt;p&gt;
Check out &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html"&gt;the docs&lt;/a&gt; for more information on managing Amazon IAM users.
&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;I added these credentials to CircleCI through its project level configuration page in the web UI.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/s3/circle-aws-ceee440d.jpg" alt="Circle aws" /&gt;&lt;/p&gt;

&lt;p&gt;This step makes the AWS credentials available to the build environment. It&amp;#39;s a more secure option than adding credentials as plain text in the &lt;code&gt;circle.yml&lt;/code&gt; file.&lt;/p&gt;

      &lt;h3 id="liftoff-" class="title"&gt;
        &lt;a name="liftoff-" class="anchor" href="#liftoff-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Liftoff!
      &lt;/h3&gt;
    
&lt;p&gt;Now, when we push to Github on our primary branch, the build process on CircleCI will fetch our dependencies, bundle the static assets and compile our Vue codebase to the &lt;code&gt;dist/&lt;/code&gt; directory, which will then be synced to Amazon S3. As long as the build and sync steps succeed, we ensure that the latest code is always in production with minimal fuss from the command line.&lt;/p&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you like this post?&lt;/em&gt; Please share! Even better, sign up for my newsletter to hear about new posts in my ongoing series on &lt;a href="/blog/basic-connect-four-with-vuejs.html"&gt;building Connect Four with Vue.js and Phoenix&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Finding Four-in-a-Row for the Win</title>
    <link rel="alternate" href="/blog/finding-four-in-a-row-ftw.html"/>
    <id>/blog/finding-four-in-a-row-ftw.html</id>
    <published>2018-01-28T00:00:00+00:00</published>
    <updated>2018-01-28T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;With the Connect Four game we created in the previous post, we're able to use &lt;a href="https://vuejs.org/v2/guide/transitions.html"&gt;Vue transitions&lt;/a&gt; to animate checkers dropping into place on the game board. Though we're able to add checkers, we still weren't declaring the winner when four-in-a-row had...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;With the Connect Four game we created in the previous post, we&amp;#39;re able to use &lt;a href="https://vuejs.org/v2/guide/transitions.html"&gt;Vue transitions&lt;/a&gt; to animate checkers dropping into place on the game board. Though we&amp;#39;re able to add checkers, we still weren&amp;#39;t declaring the winner when four-in-a-row had been achieved—kind of the whole point of the game. We&amp;#39;ll tackle that in this post.&lt;/p&gt;

&lt;p&gt;Before we dive in, here&amp;#39;s a pen of the game with the win logic we&amp;#39;ll be describing so you&amp;#39;ll see where we&amp;#39;ll end up:&lt;/p&gt;

&lt;p data-height="529" data-theme-id="light" data-slug-hash="VydJKG" data-default-tab="js,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four in Vue.js, SVG: detect winner and animated checkers" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/VydJKG/"&gt;Connect Four in Vue.js, SVG: detect winner and animated checkers&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;When a player achieves four-in-a-row, we update the visual elements on the board to indicate the win and provide a &amp;quot;Play again&amp;quot; link to reset the game state.&lt;/p&gt;

      &lt;h2 id="imagining-the-algorithm" class="title"&gt;
        &lt;a name="imagining-the-algorithm" class="anchor" href="#imagining-the-algorithm"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Imagining the algorithm
      &lt;/h2&gt;
    
&lt;p&gt;We want the game logic to evaluate the state of the board after each checker is played and before allowing the next player to drop their checker. If four-in-a-row is found, we&amp;#39;ll want to highlight the winning segment of checkers and declare the winner in the UI. We&amp;#39;ll also want to declare a draw if the board is full and no one has won.&lt;/p&gt;

&lt;p&gt;The basic skeleton of the win algorithm will work as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;check all viable horizonal segments FOR THE WIN. Return the winner OR
check all viable vertical segments FTW. Return the winner OR
check all viable &amp;quot;forward slash&amp;quot; segments FTW. Return the winner OR
check all viable &amp;quot;back slash&amp;quot; segments FTW. Return the winner OR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the word &lt;em&gt;viable&lt;/em&gt; to mean that the segment must contain four &amp;quot;slots&amp;quot; that exist on the game board. In other words, since the game board has seven columns, indexed as 0-6, each row contains only four horizonal segments: 0-3, 1-4, 2-5, 3-6.&lt;/p&gt;

&lt;p&gt;As described, it&amp;#39;s a bit wasteful to check every possible segment in the board. This is especially true at the outset, when few checkers are on the board, or near the end when many segments have already been checked on previous turns. Since we&amp;#39;re checking the board on each drop and we know the position of the last checker played, we can reduce the number of computations by treating the last checker as a focal point. So we update our definition of a &lt;em&gt;viable&lt;/em&gt; segment to mean segments of four on the board that intersect with the last checker played.&lt;/p&gt;

&lt;p&gt;To figure out which segments over lap with the last checker played, we need a few values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the coordinates of the checker, the &amp;quot;focal point&amp;quot; of our collection of segments&lt;/li&gt;
&lt;li&gt;the minimum viable row value, i.e., the greater of first row value (0) and the value of the farthest numerical segment point to the left (&lt;code&gt;focalRow&lt;/code&gt; - 3)&lt;/li&gt;
&lt;li&gt;the minimum viable column value, i.e., the greater of first col value (0) and the value of the farthest numerical segment ponit from the bottom (&lt;code&gt;focalCol&lt;/code&gt; - 3)&lt;/li&gt;
&lt;li&gt;the maximum viable row value, i.e., the lesser of (&lt;code&gt;focalRow&lt;/code&gt; + 3) and the top row (5)&lt;/li&gt;
&lt;li&gt;the maximum viable column value, i.e., the lesser of (&lt;code&gt;focalCol&lt;/code&gt; + 3) and the last column (6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given an object &lt;code&gt;lastChecker&lt;/code&gt; of the form &lt;code&gt;{ row, col }&lt;/code&gt;, and the properites &lt;code&gt;rowCount&lt;/code&gt; and &lt;code&gt;colCount&lt;/code&gt; representing the total number of rows and columns respectively, we can determine these values as follows in JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const min = num =&amp;gt; Math.max(num - 3, 0);
const max = (num, max) =&amp;gt; Math.min(num + 3, max);

const { row: focalRow, col: focalCol } = lastChecker;
const minCol = min(focalCol);
const maxCol = max(focalCol, this.colCount-1);
const minRow = min(focalRow);
const maxRow = max(focalRow, this.rowCount-1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The min and max row and column values form the boundaries of the search space, which may be much smaller than the total number of segments on the board, especially when the last checker played is near the edges.&lt;/p&gt;

      &lt;h2 id="checking-the-horizonal-segment" class="title"&gt;
        &lt;a name="checking-the-horizonal-segment" class="anchor" href="#checking-the-horizonal-segment"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Checking the horizonal segment
      &lt;/h2&gt;
    
&lt;p&gt;Using these values, we can select only the segments in the horizontal, vertical, and diagonal intersections with our last played checker. Let&amp;#39;s say the last checker ended up in row 3 and column 2. There are only three horizonal segments we need to check from this position. Here&amp;#39;s a visual:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four/check-horizontal-5fa1a3a4.png" alt="Check horizontal" /&gt;&lt;/p&gt;

&lt;p&gt;In the context of our &lt;code&gt;GameContainer&lt;/code&gt; component, here&amp;#39;s one way of iterating through those segments and searching for a winner:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
checkHorizontalSegments({ focalRow, minCol, maxCol }) {
  for (let row = focalRow, col = minCol; col &amp;lt;= maxCol; col++) {

    // the horizonal segment contains four neighboring coordinates across
    const segment = [[row, col], [row, col+1], [row, col+2], [row, col+3]];

    // this.getChecker returns the checker object { row, col, color } for a given position
    const checkers = segment.map(([row, col]) =&amp;gt; this.getChecker({row, col}));

    // If all colors are valid and match
    if (checkers.reduce((a, b) =&amp;gt; a === b &amp;amp;&amp;amp; a !== EMPTY)) {
      return { color: checkers[0].color, checkers };
    }
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a win is detected, we&amp;#39;ll record the color and checker positions of the winning segment, which we can later use as data to show the winning state on the game board. Similar functions for checking the vertical and diagonal segments are left as an exercise for the reader... or you may inspect the &lt;a href="https://codepen.io/rossta/pen/VydJKG"&gt;source of the CodePen demo&lt;/a&gt;.&lt;/p&gt;

      &lt;h2 id="updating-the-vue" class="title"&gt;
        &lt;a name="updating-the-vue" class="anchor" href="#updating-the-vue"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Updating the Vue
      &lt;/h2&gt;
    
&lt;p&gt;Putting this altogether, our win algorithm in JavaScript could be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
checkForWin(lastChecker) {
  if (!lastChecker) return;

  const min = num =&amp;gt; Math.max(num - 3, 0);
  const max = (num, max) =&amp;gt; Math.min(num + 3, max);

  const { row: focalRow, col: focalCol } = lastChecker;
  const minCol = min(focalCol);
  const maxCol = max(focalCol, this.colCount-1);
  const minRow = min(focalRow);
  const maxRow = max(focalRow, this.rowCount-1);
  const coords = { focalRow, focalCol, minRow, minCol, maxRow, maxCol };

  return this.checkHorizontalSegments(coords) ||
    this.checkVerticalSegments(coords) ||
    this.checkForwardSlashSegments(coords) ||
    this.checkBackwardSlashSegments(coords);
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recall from the &lt;a href="/blog/animating-connect-four-with-vuejs.html"&gt;previous post&lt;/a&gt;, once a checker is dropped, we emit two custom events, one to create the checker component, &lt;code&gt;&amp;#39;drop&amp;#39;&lt;/code&gt; and a second, &lt;code&gt;&amp;#39;land&amp;#39;&lt;/code&gt;, to indicate the falling checker animation has completed. We&amp;#39;re bubbling these events up to the &lt;code&gt;GameContainer&lt;/code&gt; where we can then check for the win. For the checker drop, we lock the game from additional moves while this processing is carried out and we obtain a reference to the last checker and pass to our &lt;code&gt;checkForWin&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
drop({ col, row }) {
  if (this.isLocked) return;

  this.isLocked = true;

  const checker = { row, col, color };
  this.checkForWin(checker);

  // update the board
  // switch turns
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the animation completes, the &lt;code&gt;land&lt;/code&gt; callback is triggered on the &lt;code&gt;GameContainer&lt;/code&gt;. Here, we check for the win. If the winner was set by the &lt;code&gt;checkForWin&lt;/code&gt; method, we&amp;#39;ll display the win or unlock the game so the next player can play their turn.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
land() {
  if (this.winner) {
    this.displayWin(winner);
  } else {
    this.isLocked = false;
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Display win simply sets the game status and sets a flag on each of checkers in the winner segment.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
displayWin(winner) {
  this.status = &amp;#39;OVER&amp;#39;;
  this.winner.checkers.forEach((checker) =&amp;gt; {
    this.setChecker(checker, {isWinner: true});
  });
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our components can react to this new state by updating various elements of the UI. One approach we&amp;#39;ve taken is to adjust the opacity of the non-winning checkers to accentuate the winners:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// BoardChecker computed
opacity() {
  return (this.status === OVER &amp;amp;&amp;amp; !this.isWinner) ? 0.25 : 1.0;
},
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="checking-for-a-draw" class="title"&gt;
        &lt;a name="checking-for-a-draw" class="anchor" href="#checking-for-a-draw"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Checking for a draw
      &lt;/h2&gt;
    
&lt;p&gt;There&amp;#39;s one case we haven&amp;#39;t yet accounted for—what if no one wins?&lt;/p&gt;

&lt;p&gt;It&amp;#39;s possible for a game to reach a state where all the cells are filled with checkers, but neither player has acheived four-in-a-row. To account for this case, we&amp;#39;ll want to check a draw before checking for the win on each turn. A draw occurs when the number of checkers played equals the number of cells:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
checkForDraw() {
  this.isDraw = Object.keys(this.checkers).length === this.rowCount * this.colCount;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ll update the &lt;code&gt;land&lt;/code&gt; method to short-circuit on a draw:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
land() {
  if (this.isDraw) return this.displayDraw();

  if (this.winner) {
    this.displayWin(winner);
  } else {
    this.isLocked = false;
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Highlighting the simplicity of our Vue-based reactive system, displaying the draw means simply setting the game state to &lt;code&gt;&amp;#39;OVER&amp;#39;&lt;/code&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;displayDraw() {
  this.status = OVER;
},
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="resetting-the-game" class="title"&gt;
        &lt;a name="resetting-the-game" class="anchor" href="#resetting-the-game"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Resetting the game
      &lt;/h2&gt;
    
&lt;p&gt;We can use the game status to display a message to the players and provide a &amp;quot;Play again&amp;quot; link:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;p v-if=&amp;quot;status === &amp;#39;OVER&amp;#39;&amp;quot;&amp;gt;
  {{ gameOverMessage }}
  &amp;lt;a href=&amp;quot;#&amp;quot; @click=&amp;quot;reset&amp;quot;&amp;gt;Play again&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;gameOverMessage&lt;/code&gt; is simply a computed property that switches on the winner state:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer computed
gameOverMessage() {
  if (this.winner) {
    return `${titleize(this.winner.color)} wins!`;
  } else {
    return `It&amp;#39;s a draw!`;
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the &amp;quot;Play again&amp;quot; link, we just add a function to reset the game state:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// GameContainer method
reset() {
  this.winner = undefined;
  this.isLocked = false;
  this.status = PLAY;
  this.checkers = {};
},
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="summing-up" class="title"&gt;
        &lt;a name="summing-up" class="anchor" href="#summing-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Summing up
      &lt;/h2&gt;
    
&lt;p&gt;We&amp;#39;ve come a long way—we developed a basic algorithm to search the game board for a winner while ensuring we only traverse relevant segments. We also leveraged the simplicity of reactive Vue properties to trigger UI updates. We now have a decent version of Connect Four playable in the browser by individual(s) using the same browser. We&amp;#39;ve also lumped a ton of logic into the game container and have no mechanism to play opponents ver the network. There&amp;#39;s some exciting work to do ahead: we&amp;#39;ll work on introducing additional layers to our frontend design by building on Vue libraries like &lt;code&gt;vue-router&lt;/code&gt; for client-side routing and &lt;code&gt;vuex&lt;/code&gt; for state managment. This will set us up to make the game playable over the network by connecting our game to an Elixir/Phoenix backend.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Animating Connect Four with Vue.js</title>
    <link rel="alternate" href="/blog/animating-connect-four-with-vuejs.html"/>
    <id>/blog/animating-connect-four-with-vuejs.html</id>
    <published>2018-01-18T00:00:00+00:00</published>
    <updated>2018-01-18T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;When we left off our &lt;a href="/blog/basic-connect-four-with-vuejs.html"&gt;Connect Four game last&lt;/a&gt;, we used Vue.js components to convert a static HTML view of the Connect Four board into a playable
interface. In this post, we'll animate the checkers falling and bouncing into
place when added to the game...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When we left off our &lt;a href="/blog/basic-connect-four-with-vuejs.html"&gt;Connect Four game last&lt;/a&gt;, we used Vue.js components to convert a static HTML view of the Connect Four board into a playable
interface. In this post, we&amp;#39;ll animate the checkers falling and bouncing into
place when added to the game board.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how the game behaved at the end of &lt;a href="/blog/basic-connect-four-with-vuejs.html"&gt;the previous post&lt;/a&gt;:&lt;/p&gt;

&lt;p data-height="485" data-theme-id="light" data-slug-hash="eyrMBy" data-default-tab="js,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four Vue.js, SVG: first pass" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyrMBy/"&gt;Connect Four Vue.js, SVG: first pass&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;Clicking columns simply adds new checkers to the board in the first available
slots. Though it works, it doesn&amp;#39;t quite &lt;em&gt;feel&lt;/em&gt; like Connect Four; we want
checkers falling to the bottom of each column.&lt;/p&gt;

      &lt;h2 id="vue-transitions" class="title"&gt;
        &lt;a name="vue-transitions" class="anchor" href="#vue-transitions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Vue transitions
      &lt;/h2&gt;
    
&lt;p&gt;Vue.js can help us here. It provides a number of features to support
&lt;em&gt;transitions&lt;/em&gt;, such as adding/removing single elements, adding/removing items in
a list, and even between values in data itself. Vue provides a &lt;a href="https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components"&gt;&lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;
component, which can be leveraged to animate elements as they enter and leave the DOM&lt;/a&gt;. This is what we&amp;#39;ll use to animate checkers when they are added to the board.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;transition&amp;gt;
  &amp;lt;!-- magic --&amp;gt;
&amp;lt;/transition&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Vue &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; element has mechanisms for either CSS or JavaScript
animation. Since we&amp;#39;ll have exact coordinates as component properties
representing the start and end points of the checker&amp;#39;s fall, we&amp;#39;ll want to reach
for the component&amp;#39;s &lt;a href="https://vuejs.org/v2/guide/transitions.html#JavaScript-Hooks"&gt;JavaScript
hooks&lt;/a&gt;, which
include &lt;code&gt;before-enter&lt;/code&gt;, &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;after-enter&lt;/code&gt;, &lt;code&gt;before-leave&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;, etc. To
keep things short and sweet, we&amp;#39;ll simply animate checkers as they are added to
the board—we may come back to animating of release of checkers from the
board in a later post.&lt;/p&gt;

      &lt;h2 id="adding-a-checker-transition" class="title"&gt;
        &lt;a name="adding-a-checker-transition" class="anchor" href="#adding-a-checker-transition"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Adding a checker transition
      &lt;/h2&gt;
    
&lt;p&gt;The template for our checker is simply a SVG &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element with &lt;code&gt;cx&lt;/code&gt; and
&lt;code&gt;cy&lt;/code&gt; properties to indicate its resting position in the column.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- board-checker-template --&amp;gt;
&amp;lt;circle :cx=&amp;quot;centerX&amp;quot; :cy=&amp;quot;centerY&amp;quot; ... /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of these HTML properties is bound to component properties in the &lt;code&gt;BoardChecker&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  computed: {
    centerX() {
      return (this.cellSize / 2);
    },

    centerY() {
      return (this.cellSize / 2) + (this.cellSize * (this.rowCount - 1 - this.row));
    },

    // ...
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To animate the arrival of this checker to the board, we need to wrap the
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; in a &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;transition
  @enter=&amp;quot;enter&amp;quot;
  :css=&amp;quot;false&amp;quot;
  &amp;gt;
  &amp;lt;circle ... /&amp;gt;
&amp;lt;/transition&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we&amp;#39;ll only JavaScript animation for the transition, Vue recommends setting
the &lt;code&gt;:css&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; as an optimization. We also bind a callback named
&amp;quot;enter&amp;quot; to the &lt;code&gt;@enter&lt;/code&gt; listener on the &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component. The definition
of that callback will be a method on the &lt;code&gt;BoardChecker&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  method: {
    enter(element, done) {
      // animate!

      done();
    },

    // ...
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vue expects that the &lt;code&gt;enter&lt;/code&gt; callback may be asynchronous, so the framework
provides a &lt;code&gt;done&lt;/code&gt; parameter which is a function that must be called to indicate that the
transition has completed.&lt;/p&gt;

      &lt;h2 id="animating-the-transition" class="title"&gt;
        &lt;a name="animating-the-transition" class="anchor" href="#animating-the-transition"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Animating the transition
      &lt;/h2&gt;
    
&lt;p&gt;So how to animate? We can lean on a third-party library to do the heavy-lifting;
we just need to wire it up correctly to get the desired effect. I chose the
&lt;code&gt;GSAP&lt;/code&gt; library from &lt;a href="https://greensock.com/"&gt;Greensock&lt;/a&gt; which is well-suited for
SVG animation, though just about any popular animation library could work in its
place. But don&amp;#39;t take it from me—here&amp;#39;s what expert, Sarah Drasner, has to say
in her book &lt;a href="http://shop.oreilly.com/product/0636920045335.do"&gt;SVG Animations&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Due to the fact that GreenSock corrects some of SVG’s cross-browser quirks,
and has thought of every different use case for animation, GreenSock is going
to be the animation technology I recommend for production sites most
frequently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The GSAP ships with a number of utilities to support complex animation and
synchronization. We&amp;#39;re going to use the
&lt;a href="https://greensock.com/docs/TweenMax/static.fromTo"&gt;&lt;code&gt;TweenMax.fromTo&lt;/code&gt;&lt;/a&gt; function
with an easing parameter to bounce the checker in to place. It needs a target
element, a duration, &amp;quot;from params&amp;quot;, and &amp;quot;to params&amp;quot;, which describe the
animation at the start and end—hence, &lt;code&gt;fromTo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;TweenMax.fromTo(element, duration, { y: startPosition }, { y: endPosition });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the checker&amp;#39;s path of motion will have only vertical motion, we will
animate the &lt;code&gt;y&lt;/code&gt; position. The key insight is to understand that the &lt;code&gt;TweenMax&lt;/code&gt;
start and end &lt;code&gt;y&lt;/code&gt; positions are relative to element&amp;#39;s static position; in this
case, that is the &lt;code&gt;cy&lt;/code&gt; property of our &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element. The start position
for the animiation must be above the checker&amp;#39;s finish position, it&amp;#39;s given &lt;code&gt;cy&lt;/code&gt;
coordinate; because the origin of the SVG view box is in the top left, the
vertical start position must be a &lt;em&gt;negative&lt;/em&gt; value with repect to the finish. To
start the animation just barely outside the view box, we want the negative value
of the static &lt;code&gt;cy&lt;/code&gt; position and subtract the &lt;code&gt;cellSize&lt;/code&gt;. The end position is
simply 0—no change from the given &lt;code&gt;cy&lt;/code&gt; coordinate.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const fromParams = {
  y: (-1 * (this.centerY + this.cellSize))
};

const toParams = {
  y: 0,
  ease: Bounce.easeOut,
  onComplete: done,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;toParams&lt;/code&gt; also accept an &lt;code&gt;ease&lt;/code&gt; property, for which we&amp;#39;ll use GSAP&amp;#39;s
&lt;code&gt;Bounce.easeOut&lt;/code&gt;, and an &lt;code&gt;onComplete&lt;/code&gt; callback property, which will be the
&lt;code&gt;done&lt;/code&gt; callback provided by Vue transition&amp;#39;s &lt;code&gt;enter&lt;/code&gt; hook. This will allow us to
prevent changes in game state until the checker has finished animating.&lt;/p&gt;

&lt;p&gt;We also can play with the &lt;code&gt;duration&lt;/code&gt; property. As we add more checkers to a
single column, each checker will have a shorter distance to fall. If we
otherwise kept the duration the same for all checkers, they would appear to fall
more slowly as they had less distance to fall.&lt;/p&gt;

&lt;p&gt;Finding a duration that feels right takes a little trial and error, but where we
currently have it, the duration is an arbitrary constant multiplied by a
percentage of the total column height based on where the checker will end up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const percentage = (this.rowCount - this.row) / this.rowCount;
const duration = return 0.2 + 0.4 * this.percentage;           // seconds
&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id="showtime" class="title"&gt;
        &lt;a name="showtime" class="anchor" href="#showtime"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Showtime
      &lt;/h2&gt;
    
&lt;p&gt;Putting this altogether, our final &lt;code&gt;enter&lt;/code&gt; method looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  // ...

  methods: {
    enter(el, done) {
      // start above board, outside the view box
      const fromY = -1 * (this.centerY + this.cellSize);

      // finish at the position given to
      const toY = 0;

      const fromParams = {
        y: fromY
      };

      const toParams = {
        y: toY,
        ease: Bounce.easeOut,
        onComplete: done,
      };

      const percentage = (this.rowCount - this.row) / this.rowCount;
      const duration = return 0.2 + 0.4 * this.percentage; // arbitrary constants

      return TweenMax.fromTo(el, this.duration, fromParams, destParams);
    },
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding this to our game board, we now have some nicely animated checkers falling
into place as we play! Note that, because we&amp;#39;re using SVG pattern masking, as
described in &lt;a href="#"&gt;an earlier post&lt;/a&gt;, the checkers appear to fall behind the Connect
Four wall, visible through the portholes.&lt;/p&gt;

&lt;p data-height="485" data-theme-id="light" data-slug-hash="jYxxGv" data-default-tab="js,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four in Vue.js, SVG: animated checkers" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/jYxxGv/"&gt;Connect Four in Vue.js, SVG: animated checkers&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;Cool!&lt;/p&gt;

&lt;p&gt;Notice though, that you can continue dropping checkers until the board fills up. In the &lt;a href="/blog/finding-four-in-a-row-ftw.html"&gt;next post&lt;/a&gt;, we&amp;#39;ll fix that by introducing an algorithm to check for a win and display the results in the UI when the game ends.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building basic Connect Four with Vue.js</title>
    <link rel="alternate" href="/blog/basic-connect-four-with-vuejs.html"/>
    <id>/blog/basic-connect-four-with-vuejs.html</id>
    <published>2018-01-15T00:00:00+00:00</published>
    <updated>2018-01-15T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG, Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lately, I've gotten excited about the &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; JavaScript
framework view rendering due to its versatility, low barrier to entry, and
community...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG, Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lately, I&amp;#39;ve gotten excited about the &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; JavaScript
framework view rendering due to its versatility, low barrier to entry, and
community supported extensions for state management and routing.  In this post,
we&amp;#39;ll use Vue.js 2 to dynamically render the Connect Four game board we started
&lt;a href="/blog/connect-four-with-svg-pattern-masking.html"&gt;last time&lt;/a&gt;. This
will not be a complete tutorial on Vue.js, but it hopefully will illustrate
some of Vue&amp;#39;s basic concepts and its powerful and intuitive features.
Check out the &lt;a href="https://vuejs.org/v2/guide/"&gt;excellent Vue.js guides&lt;/a&gt; for a
thorough introduction to the framework.&lt;/p&gt;

&lt;p&gt;To see where we&amp;#39;ll end up, here&amp;#39;s a pen:&lt;/p&gt;

&lt;p data-height="485" data-theme-id="light" data-slug-hash="eyrMBy" data-default-tab="js,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four Vue.js, SVG: first pass" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyrMBy/"&gt;Connect Four Vue.js, SVG: first pass&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

      &lt;h2 id="breaking-it-down" class="title"&gt;
        &lt;a name="breaking-it-down" class="anchor" href="#breaking-it-down"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Breaking it down
      &lt;/h2&gt;
    
&lt;p&gt;We&amp;#39;ll use Vue.js to convert the static layout, which renders the Connect Four board in SVG with a few checkers in place as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- board --&amp;gt;
&amp;lt;svg viewBox=&amp;quot;0 0 700 600&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;!-- defs for svg pattern masking --&amp;gt;

  &amp;lt;!-- column 0 --&amp;gt;
  &amp;lt;svg x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot;&amp;gt;

    &amp;lt;!-- checker --&amp;gt;
    &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;550&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;#254689&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;

    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;600&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
  &amp;lt;/svg&amp;gt;

  &amp;lt;!-- column 1 --&amp;gt;
  &amp;lt;svg x=&amp;quot;100&amp;quot; y=&amp;quot;0&amp;quot;&amp;gt;
    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;600&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
  &amp;lt;/svg&amp;gt;

  &amp;lt;!-- and more columns... --&amp;gt;

&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#39;s easy to spot some repetition. There are a fixed number of columns of
the same dimensions and appearance, each of which may contain checkers. As
Vue.js is a component based framework, we&amp;#39;ll want to break these pieces into logical
units: the game will be composed of a single Board component, which will render
all the Column components, each of which will render their &amp;quot;stack&amp;quot; of Checker
components. Here&amp;#39;s how we might visualize this breakdown:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/connect-four-components-442b46a4.png" style="width:70%;margin:2em auto;display:block;" alt="Connect four components" /&gt;&lt;/p&gt;

&lt;p&gt;Aside from this hierarchy, we also will make an informal distinction to describe
the Board, Column, and Checker: they are &amp;quot;presentation&amp;quot; components.
Notably, their main role is to determine how the app will look. We&amp;#39;ll wrap
the Board in a &amp;quot;container&amp;quot; component, whose main role is to determine how the
app will work. For more on this distinction, check out Dan Abramov&amp;#39;s React article on
&lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"&gt;Presentational and Container
Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For our game, a &lt;code&gt;GameContainer&lt;/code&gt; component will keep track of and manipulate the key
game state, including adding checkers when a player selects a column, toggling
the player turns, and, later, determine if a player has won the game. Here&amp;#39;s
the complete component hierarchy in Vue/HTML pseudocode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;game-container&amp;gt; &amp;lt;!-- state: checkers, current player --&amp;gt;
  &amp;lt;game-board :checkers=&amp;quot;checkers&amp;quot;&amp;gt; &amp;lt;!-- state: board dimensions --&amp;gt;
    &amp;lt;board-column v-for=&amp;quot;column in columns&amp;quot; :stack=&amp;quot;stack(column)&amp;quot;&amp;gt;
      &amp;lt;board-checker v-for=&amp;quot;checker in stack&amp;quot;&amp;gt;&amp;lt;/board-checker&amp;gt;
    &amp;lt;/board-column&amp;gt;
  &amp;lt;/game-board&amp;gt;
&amp;lt;/game-container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In practice, our presentation components will keep some of their own state and
logic as well, but it will be very specfic to the local concerns of that
component; when a presentation component needs to know about higher level
state, it will be passed in as props from its parent. Any events triggered in
the user interface will be passed back up the heirarchy, eventually reaching
our container; &amp;quot;actions up, data down&amp;quot;. For this first pass, the main action
will be clicking a column in which to drop the next checker.&lt;/p&gt;

      &lt;h2 id="the-container" class="title"&gt;
        &lt;a name="the-container" class="anchor" href="#the-container"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The container
      &lt;/h2&gt;
    
&lt;p&gt;The &lt;code&gt;GameContainer&lt;/code&gt; component be the source of truth for the key game-level
concerns including an object to store the checkers that have been played and
numbers representing row and column (abbreviated throughout the code as &lt;code&gt;col&lt;/code&gt;)
counts. For now, we&amp;#39;ll also hardcode the first player to &amp;quot;red&amp;quot;. The
&lt;code&gt;GameContainer&lt;/code&gt; markup is simply to render the &lt;code&gt;GameBoard&lt;/code&gt;, which will receive
data from the container via props.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const GameContainer = Vue.component(&amp;#39;game-container&amp;#39;, {
  data() {
    return {
      checkers: {},
      playerColor: &amp;#39;red&amp;#39;,
      rowCount: 6,
      colCount: 7,
      // ...
    };
  },

  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- game-container-template --&amp;gt;
&amp;lt;game-board :checkers=&amp;quot;checkers&amp;quot; :rowCount=&amp;quot;rowCount&amp;quot; :colCount=&amp;quot;colCount&amp;quot;&amp;gt;&amp;lt;/game-board&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I&amp;#39;ve chosen to store checker data in an object, where each checker will be
identified by a key based on its row and column number. Each value in the
&lt;code&gt;checkers&lt;/code&gt; object will itself be an object with properties for row, column,
color of a dropped checker, i.e., &lt;code&gt;{ row, col, color }&lt;/code&gt;. A common alternative for
storing data in a grid-based game is to use an array of arrays; I personally
have found it easier to represent the grid in a map-like data structure, such
as a JavaScript object, to manipulate, search for, and perform transformations
on game data. Either approach would work for the purpose of this demo—the
mechanics of getting and setting checker data in the &lt;code&gt;GameContainer&lt;/code&gt; would just
differ slightly.&lt;/p&gt;

      &lt;h2 id="the-board" class="title"&gt;
        &lt;a name="the-board" class="anchor" href="#the-board"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The board
      &lt;/h2&gt;
    
&lt;p&gt;The &lt;code&gt;GameBoard&lt;/code&gt; has the primary responsibility of defining the dimensions of
the board layout, based off the row and column counts it receives from the
&lt;code&gt;GameContainer&lt;/code&gt; and the size of each cell, which will come from local data.
From this data, the board computes board width and height and the radius of
each checker. The &lt;code&gt;GameBoard&lt;/code&gt; will also be responsible for filtering the
checkers specific to each column into the correct &lt;code&gt;BoardColumn&lt;/code&gt; children
components, as shown in the &lt;code&gt;checkerStack(col)&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const GameBoard = Vue.component(&amp;#39;game-board&amp;#39;, {
  data() {
    return {
      cellSize: 100,
    };
  },

  computed: {
    cols() { return range(this.colCount); },

    boardWidth() { return this.colCount * this.cellSize; },
    boardHeight() { return this.rowCount * this.cellSize; },
    checkerRadius() { return this.cellSize * 0.45; },

    // ...
  },

  methods: {
    checkerStack(col) {
      return Object.values(this.checkers).filter(c =&amp;gt; c.col === col);
    },
  },

  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A neat trick here is to use a custom &lt;code&gt;range&lt;/code&gt; function that converts the
&lt;code&gt;colCount&lt;/code&gt; into a list of &lt;code&gt;0..colCount-1&lt;/code&gt; to identify the columns, using the
spread operator and the &lt;code&gt;Array.prototype.keys&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const range = num =&amp;gt; [...Array(num).keys()];
// range(7)
// [0, 1, 2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;GameBoard&lt;/code&gt; template, we&amp;#39;re able convert the hard-coded width, height,
, x, and y positions of our original SVG layout to dynamic properties. The
&lt;code&gt;GameBoard&lt;/code&gt; also renders each of the &lt;code&gt;BoardColumn&lt;/code&gt; components using the &lt;code&gt;v-for&lt;/code&gt;
directive on our &lt;code&gt;col&lt;/code&gt; range, again, passing key game state and checker data
as props. The props also include the url to the pattern &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; that will
give the columns the transparent portholes, as discussed in the &lt;a href="/blog/connect-four-with-svg-pattern-masking.html"&gt;previous
post&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- game-board-template --&amp;gt;
&amp;lt;svg :viewBox=&amp;quot;`0 0 ${boardWidth} ${boardHeight}`&amp;quot;
  xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;defs&amp;gt;
    &amp;lt;pattern :id=&amp;quot;patternId&amp;quot; :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;cellSize&amp;quot;
      patternUnits=&amp;quot;userSpaceOnUse&amp;quot;&amp;gt;
      &amp;lt;circle :cx=&amp;quot;cellSize / 2&amp;quot; :cy=&amp;quot;cellSize / 2&amp;quot; :r=&amp;quot;checkerRadius&amp;quot; fill=&amp;quot;black&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
    &amp;lt;/pattern&amp;gt;
    &amp;lt;mask :id=&amp;quot;maskId&amp;quot;&amp;gt;
      &amp;lt;rect :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;boardHeight&amp;quot; fill=&amp;quot;white&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
      &amp;lt;rect :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;boardHeight&amp;quot; :fill=&amp;quot;pattern&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;/mask&amp;gt;
  &amp;lt;/defs&amp;gt;
  &amp;lt;board-column
    v-for=&amp;quot;col in cols&amp;quot;
    :checkers=&amp;quot;checkerStack(col)&amp;quot;
    :col=&amp;quot;col&amp;quot;
    :mask=&amp;quot;mask&amp;quot;
    ...  /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more on the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; elements, see the previous
article on &lt;a href="/blog/connect-four-with-svg-pattern-masking.html"&gt;SVG pattern
masking&lt;/a&gt;.&lt;/p&gt;

      &lt;h2 id="the-columns" class="title"&gt;
        &lt;a name="the-columns" class="anchor" href="#the-columns"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The columns
      &lt;/h2&gt;
    
&lt;p&gt;Now on to the &lt;code&gt;BoardColumn&lt;/code&gt; component and its template. It is responsible for
rendering the pattern-masked &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; and any checkers dropped in its column.
By wrapping the &lt;code&gt;BoardColumn&lt;/code&gt; in a nested &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element with an x value based
off &lt;code&gt;col * cellSize&lt;/code&gt;, the rendered child elements of the &lt;code&gt;BoardColumn&lt;/code&gt; will be
positioned relatively within. Note how straightforward it is to add a click
listener to our template where we&amp;#39;ll trigger a &lt;code&gt;drop&lt;/code&gt; method on the
&lt;code&gt;BoardColumn&lt;/code&gt; instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- board-column-template --&amp;gt;
&amp;lt;svg :x=&amp;quot;col * cellSize&amp;quot; y=&amp;quot;0&amp;quot;&amp;gt;
  &amp;lt;g @click=&amp;quot;drop&amp;quot; class=&amp;quot;column&amp;quot;&amp;gt;
    &amp;lt;board-checker
      v-for=&amp;quot;checker in checkers&amp;quot;
      :checker=&amp;quot;checker&amp;quot;
      :cellSize=&amp;quot;cellSize&amp;quot;
      :rowCount=&amp;quot;rowCount&amp;quot;
      ...  /&amp;gt;
    &amp;lt;rect :width=&amp;quot;cellSize&amp;quot; :height=&amp;quot;boardHeight&amp;quot; :fill=&amp;quot;color&amp;quot; :mask=&amp;quot;mask&amp;quot; /&amp;gt;
  &amp;lt;/g&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#39;s check out that &lt;code&gt;drop&lt;/code&gt; method on &lt;code&gt;BoardColumn&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const BoardColumn = Vue.component(&amp;#39;board-column&amp;#39;, {
  computed: {
    // Find the current max occupied row and add 1
    nextOpenRow() {
      return Math.max(...this.checkers.map(c =&amp;gt; c.row).concat(-1)) + 1;
    },
  },

  methods: {
    drop(col) {
      const row = this.nextOpenRow;

      if (row &amp;lt; this.rowCount) {
        this.$emit(&amp;#39;drop&amp;#39;, { row, col });
      } else {
        console.log(&amp;#39;cannot drop&amp;#39;, { row, col });
      }
    },
  },
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method&amp;#39;s responsibility is to trigger a &lt;code&gt;&amp;#39;drop&amp;#39;&lt;/code&gt; event up the component hierarchy
with data for &lt;code&gt;{ row, col }&lt;/code&gt;. This will indicate an attempt has been made to drop
a checker at that position. To accomplish this, it calculates the next
available row in the &lt;code&gt;nextOpenRow&lt;/code&gt; function. If the next open row would be off
the board, then the column is full and the attempt is swallowed. We calculate
&lt;code&gt;nextOpenRow&lt;/code&gt; by finding the max row number in the stack and adding one. If the
checker stack is empty in this column, then the result will be &lt;code&gt;0&lt;/code&gt;, which is
where we&amp;#39;d want the first checker to land.&lt;/p&gt;

      &lt;h2 id="updating-game-state" class="title"&gt;
        &lt;a name="updating-game-state" class="anchor" href="#updating-game-state"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Updating game state
      &lt;/h2&gt;
    
&lt;p&gt;Note this constitues some game logic so we&amp;#39;re cheating a little given our
presentation/container distinction noted earlier; it may make more sense to
push this logic to our &lt;code&gt;GameContainer&lt;/code&gt; later, but for now, it&amp;#39;s convenient to
leave it here. As we&amp;#39;ll see later, the &lt;code&gt;GameContainer&lt;/code&gt; will respond to this
event and do the work to update the &lt;code&gt;checkers&lt;/code&gt; map for the game.&lt;/p&gt;

&lt;p&gt;Back in the &lt;code&gt;GameContainer&lt;/code&gt;, an emitted &lt;code&gt;drop&lt;/code&gt; event with &lt;code&gt;{ row, col }&lt;/code&gt; data is
captured here, where the game will add the current player&amp;#39;s &lt;code&gt;color&lt;/code&gt; as
property, update the &lt;code&gt;checkers&lt;/code&gt; object, and toggle the color for the next
player.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const GameContainer = Vue.component(&amp;#39;game-container&amp;#39;, {
  methods: {
    toggleColor() {
      if (this.playerColor === RED) {
        this.playerColor = BLACK;
      } else {
        this.playerColor = RED;
      }
    },

    drop({ col, row }) {
      const color = this.playerColor;

      console.log(&amp;#39;setting checker&amp;#39;, key(row, col), { row, col, color });
      Vue.set(this.checkers, key(row, col), { row, col, color });
      this.toggleColor();
    },

    // ...
  },

  // ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note an important gotcha when using &lt;code&gt;Vue.js&lt;/code&gt; demonstrated here: we need to use
&lt;code&gt;Vue.set&lt;/code&gt; when adding a new checker to the &lt;code&gt;checkers&lt;/code&gt; object. Vue needs to hook
into getters/setters to track dependencies and propagate data changes
throughout the application. Unfortunately, because of how JavaScript works,
&lt;em&gt;Vue can&amp;#39;t detect property addition or deletion&lt;/em&gt;. This affects how we
adding checkers to the underlying data structure during game play. By using
&lt;code&gt;Vue.set&lt;/code&gt;, we ensure the data change results in rendering the new checker
on the game board.&lt;/p&gt;

      &lt;h2 id="the-checkers" class="title"&gt;
        &lt;a name="the-checkers" class="anchor" href="#the-checkers"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The checkers
      &lt;/h2&gt;
    
&lt;p&gt;To render the checkers, we have a &lt;code&gt;BoardChecker&lt;/code&gt; component. It is simply a &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- board-checker-template --&amp;gt;
&amp;lt;circle :cx=&amp;quot;centerX&amp;quot; :cy=&amp;quot;centerY&amp;quot; :r=&amp;quot;checkerRadius&amp;quot; :fill=&amp;quot;adjustedColor&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; properties are computed based on the &lt;code&gt;checker&lt;/code&gt; object&amp;#39;s &lt;code&gt;row&lt;/code&gt; and the &lt;code&gt;cellSize&lt;/code&gt; and &lt;code&gt;rowCount&lt;/code&gt; properties passed in from the parent column. We translate the canonical red/black color names to prettier hex colors to fill each &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const BoardChecker = Vue.component(&amp;#39;board-checker&amp;#39;, {
  data() {
    return {
      colorHexes: {
        red: &amp;#39;#FC7E69&amp;#39;,
        black: &amp;#39;#254689&amp;#39;,
      },
    };
  },

  computed: {
    row() { return this.checker.row; },
    col() { return this.checker.col; },
    color() { return this.checker.color; },

    adjustedColor() {
      return this.colorHexes[this.color];
    },

    centerX() {
      return (this.cellSize / 2);
    },

    centerY() {
      return (this.cellSize / 2) + (this.cellSize * (this.rowCount - 1 - this.row));
    },
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, here&amp;#39;s a link to &lt;a href="https://codepen.io/rossta/pen/jYxxGv?editors=1010"&gt;the pen on
codepen.io&lt;/a&gt; where you can
see the full source code and try out the game for yourself.&lt;/p&gt;

&lt;p&gt;This completes our first pass at using Vue.js to create a playable Connect Four
game in the browser. We&amp;#39;re not yet detecting a game win or draw; that&amp;#39;s still
to come. In &lt;a href="/blog/animating-connect-four-with-vuejs.html"&gt;the next post&lt;/a&gt;, we use Vue to animate each checker falling into
place as they are added to the board.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Connect Four with SVG pattern masking</title>
    <link rel="alternate" href="/blog/connect-four-with-svg-pattern-masking.html"/>
    <id>/blog/connect-four-with-svg-pattern-masking.html</id>
    <published>2018-01-10T00:00:00+00:00</published>
    <updated>2018-01-10T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG,
Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my recent side projects to learn new technologies
has been to build a browser-based rendition of &lt;a href="https://en.wikipedia.org/wiki/Connect_Four"&gt;Connect
Four&lt;/a&gt;.
The fully-functional...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;This post is &lt;a href="/blog/series/connect-four.html"&gt;part of a series on building Connect Four with Vue.js, SVG,
Elixir, and the Phoenix framework&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my recent side projects to learn new technologies
has been to build a browser-based rendition of &lt;a href="https://en.wikipedia.org/wiki/Connect_Four"&gt;Connect
Four&lt;/a&gt;.
The fully-functional version of the game will have both a backend and frontend
component with some good challenges including animating checkers
falling into place and connecting two players over the network.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;#39;ll demonstrate rendering the static board with SVG, including
the use of pattern masking to emulate a game board wall with portholes through
which to view the checkers.&lt;/p&gt;

      &lt;h2 id="let-39-s-talk-about-svg" class="title"&gt;
        &lt;a name="let-39-s-talk-about-svg" class="anchor" href="#let-39-s-talk-about-svg"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Let&amp;#39;s talk about SVG
      &lt;/h2&gt;
    
&lt;p&gt;SVG feels scary and confusing to the uninitiated, myself included. The good news
is that we can take a progressive approach to adopting SVG without understanding
everything there is to know about it at first.&lt;/p&gt;

&lt;p&gt;Here are a few reasons why using SVG is a good fit to render the elements of a
Connect Four game board:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SVG has shape elements like &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; that are better
semantically than using divs to render columns and checkers using &lt;a href="https://davidwalsh.name/css-circles"&gt;the rounded
border trick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVG provides simple, declarative rules for positioning visual elements; no
need to mess with picture-perfect pixels, absolute positioning, and z-indexing&lt;/li&gt;
&lt;li&gt;SVG elements animate smoothly, which will allow us to render a dropped checker
bouncing into place with a realistic touch and that it has a coordinate system&lt;/li&gt;
&lt;li&gt;SVG provides &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; elements, so we can animate falling
checkers behind &amp;quot;holes&amp;quot; in the game wall&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="pattern-masking" class="title"&gt;
        &lt;a name="pattern-masking" class="anchor" href="#pattern-masking"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Pattern masking
      &lt;/h2&gt;
    
&lt;p&gt;A first pass at the game board might be to explicitly render circles for all 42
game cells (6 rows, 7 columns) and set their fill colors based on game state to
red, black, or as the background color to fake an empty cell. What if, instead,
we could render the game board with portholes punched into it? That way, the only
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; elements we need to render explicitly are the checkers themselves.&lt;/p&gt;

&lt;p&gt;This is where SVG pattern masking comes in. A powerful feature of desktop visual
editing tools Adobe Photoshop/Illustrator is available on the web.
&lt;a href="https://www.w3.org/TR/SVG/masking.html"&gt;Masking&lt;/a&gt; allows for a graphic (or set of
graphics) to act as a transparent overlay to reveal background elements. Applied
to our game, it provides a mechanism by which we can see checkers falling
through holes in the game board wall. To my knowledge, there&amp;#39;s no (easy) way
with typical HTML/CSS to accomplish this other than, perhaps, creating a
transparent png, something we won&amp;#39;t be able to manipulate easily
programmatically.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start with a demonstration of pattern masking by rendering a single game
board cell and checker.&lt;/p&gt;

&lt;p&gt;Within a containing &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element with a &lt;code&gt;viewBox&lt;/code&gt; of 100x100 units, we&amp;#39;ll
start by adding a &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; to represent a checker positioned slightly
offscreen to mimic it falling into place.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;svg viewBox=&amp;quot;0 0 100 100&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;25&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;#254689&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The game wall is simply a &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; positioned over the circle; once added, we
can&amp;#39;t see the circle anymore.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;svg viewBox=&amp;quot;0 0 100 100&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;25&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;#254689&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
  &amp;lt;rect col=&amp;quot;0&amp;quot; width=&amp;quot;100&amp;quot; height=&amp;quot;600&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to create the hole with a pattern mask. To accomplish this, we use
(surprise) both a &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; elements. These elements are not
graphical, meaning, they won&amp;#39;t be directly rendered in the view box. Instead,
we&amp;#39;ll later add the resulting mask as an attribute of our &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; game wall—the
element we want to see through. The &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; elements are nested
inside a &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element so they can be available for reuse.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;defs&amp;gt;
  &amp;lt;pattern id=&amp;quot;cell-pattern&amp;quot; patternUnits=&amp;quot;userSpaceOnUse&amp;quot; width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot;&amp;gt;
    &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;50&amp;quot; r=&amp;quot;45&amp;quot; fill=&amp;quot;black&amp;quot;&amp;gt;&amp;lt;/circle&amp;gt;
  &amp;lt;/pattern&amp;gt;
  &amp;lt;mask id=&amp;quot;cell-mask&amp;quot;&amp;gt;
    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot; fill=&amp;quot;white&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot; fill=&amp;quot;url(#cell-pattern)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
  &amp;lt;/mask&amp;gt;
&amp;lt;/defs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is simply matches the size of a cell, 100x100, and it contains a
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;, representing the hole, that matches the size of the checker. The
&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; gets a fill color of &amp;quot;black&amp;quot;; when applied the to &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt;, this
this means the absence of space, or full transparency, as opposed to literal
black.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; is composed of two &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; elements that match the game wall size;
the first gets a fill color of &amp;quot;white&amp;quot; (opposite of &amp;quot;black&amp;quot; in a mask) to
represent the part of the wall we want to be opaque. The second &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; sits on
top of the first and has a &lt;code&gt;fill&lt;/code&gt; of &lt;code&gt;url(#cell-pattern)&lt;/code&gt; which refers to the
pattern we created above.&lt;/p&gt;

&lt;p&gt;Now, we can set the &lt;code&gt;mask&lt;/code&gt; attribute for our game wall &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; by referencing
the &lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt; element by id.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;rect width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot; fill=&amp;quot;cadetblue&amp;quot; mask=&amp;quot;url(#cell-mask)&amp;quot;&amp;gt;&amp;lt;/rect&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This punches a hole through the wall to reveal the checker underneath.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what we have so far on &lt;a href="https://codepen.io/rossta/pen/NXMrLg"&gt;CodePen&lt;/a&gt;:&lt;/p&gt;

&lt;p data-height="265" data-theme-id="light" data-slug-hash="NXMrLg" data-default-tab="html,result" data-user="rossta" data-embed-version="2" data-pen-title="SVG mask demo" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/NXMrLg/"&gt;SVG mask demo&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;A nice feature of the &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; element is that it repeats itself based
on the height/width attributes we&amp;#39;ve provided. This means we can extend the dimensions of the view
box and our game wall &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; to reveal the seven rows of a
single column—we don&amp;#39;t have to add each circular hole to the DOM explicitly! To
build multiple columns, we&amp;#39;ll simply, for each column, add a nested &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;
element at the correct x position to wrap each masked &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt;. This allows us
to position each column relative to the container &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; without needed to
specify x coordinates for each child &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the full demo of a static Connect Four SVG game board on
&lt;a href="https://codepen.io/rossta/pen/eyrgJe"&gt;CodePen&lt;/a&gt;:&lt;/p&gt;

&lt;p data-height="370" data-theme-id="light" data-slug-hash="eyrgJe" data-default-tab="html,result" data-user="rossta" data-embed-version="2" data-pen-title="Connect Four board in SVG" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyrgJe/"&gt;Connect Four board in SVG&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;Finally, here&amp;#39;s a sneak preview of the how the falling checker will look behind the pattern mask:&lt;/p&gt;

&lt;p data-height="265" data-theme-id="light" data-slug-hash="eyPpog" data-default-tab="html,result" data-user="rossta" data-embed-version="2" data-pen-title="SVG mask demo" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/rossta/pen/eyPpog/"&gt;SVG mask demo&lt;/a&gt; by Ross Kaffenberger (&lt;a href="https://codepen.io/rossta"&gt;@rossta&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;For more related info, check out the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial"&gt;MDN SVG Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MDN docs for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern"&gt;&lt;code&gt;&amp;lt;pattern /&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask"&gt;&lt;code&gt;&amp;lt;mask /&amp;gt;&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs"&gt;&lt;code&gt;&amp;lt;defs /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pretty much anything &lt;a href="https://twitter.com/sarah_edo"&gt;Sarah Drasner&lt;/a&gt; publishes, including &lt;a href="http://shop.oreilly.com/product/0636920045335.do"&gt;SVG Animations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="/blog/building-basic-connect-four-with-vuejs.html"&gt;the next post&lt;/a&gt;, we&amp;#39;ll
take a look at using Vue.js to render the board dynamically and add checkers
based on user interaction.&lt;/p&gt;
</content>
  </entry>
</feed>
