<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2020-05-09T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>Why does Rails 6 include both Webpacker and Sprockets?</title>
    <link rel="alternate" href="/blog/why-does-rails-install-both-webpacker-and-sprockets.html"/>
    <id>/blog/why-does-rails-install-both-webpacker-and-sprockets.html</id>
    <published>2020-05-09T00:00:00+00:00</published>
    <updated>2020-05-09T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I know why you're here. Things have gotten a little confusing lately. Rails 6 is getting more complex.
Among other things, you've heard Rails 6 installs both Webpacker and Sprockets. You're wondering WTF is going on. By the way, it's &lt;a href="https://weblog.rubyonrails.org/2020/5/7/A-May-of-WTFs/" target="_blank" rel="noopener noreferrer"&gt;a whole May of...&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I know why you&amp;#39;re here. Things have gotten a little confusing lately. Rails 6 is getting more complex.
Among other things, you&amp;#39;ve heard Rails 6 installs both Webpacker and Sprockets. You&amp;#39;re wondering WTF is going on. By the way, it&amp;#39;s &lt;a href="https://weblog.rubyonrails.org/2020/5/7/A-May-of-WTFs/" target="_blank" rel="noopener noreferrer"&gt;a whole May of WTFs for Rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait, don&amp;#39;t Sprockets and Webpacker basically do the same thing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If this is what you&amp;#39;re thinking, you&amp;#39;re not alone.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Curious about or need help with webpack? I may be able to help! I&amp;#39;m developing a course for webpack on Rails and I frequently write about it on this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;&lt;strong&gt;Subscribe to my newsletter to get updates&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question keeps coming up, like in this &lt;a href="https://www.reddit.com/r/rails/comments/9zg7fe/confused_about_the_difference_between_sprockets/" target="_blank" rel="noopener noreferrer"&gt;Reddit post&lt;/a&gt;, or this &lt;a href="https://stackoverflow.com/questions/55232591/rails-5-2-why-still-use-assets-pipeline-with-webpacker" target="_blank" rel="noopener noreferrer"&gt;StackOverflow question&lt;/a&gt;, or this &lt;a href="https://www.reddit.com/r/rails/comments/dfww82/best_practice_for_webpacker_in_rails_6_do_i_need/" target="_blank" rel="noopener noreferrer"&gt;other Reddit post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my colleague &lt;a href="https://twitter.com/danmayer" target="_blank" rel="noopener noreferrer"&gt;@danmayer&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;How and where to handle assets is in a confusing state, 1 foot in asset pipeline and one foot in webpacker... If that is going to be a long last direction vs a transition we should make the best practices more clear in guides and how to ensure they play nicely together&lt;/p&gt;&amp;mdash; Dan Mayer (@danmayer) &lt;a href="https://twitter.com/danmayer/status/1258577270760804353?ref_src=twsrc%5Etfw"&gt;May 8, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Even &lt;a href="https://twitter.com/avdi" target="_blank" rel="noopener noreferrer"&gt;@avdi&lt;/a&gt; just last week:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Will someone please explain to me why after all the foofaraw about Rails 6 going to webpack, I&amp;#39;m still having to unfuck Sprockets in my application.rb&lt;/p&gt;&amp;mdash; Avdi Grimm (@avdi) &lt;a href="https://twitter.com/avdi/status/1256742291890413570?ref_src=twsrc%5Etfw"&gt;May 3, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s clear the Webpacker-Sprockets co-existence is catching many by surprise. There&amp;#39;s good reason for that too.&lt;/p&gt;

&lt;p&gt;You wouldn&amp;#39;t be wrong to think Sprockets and webpack solve the same general problem:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Packaging assets (JavaScript, CSS, images, fonts) for the browser&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The similarities exist. Both Sprockets and webpack will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;combine many source files into one or a few destination bundles for production&lt;/li&gt;
&lt;li&gt;transpile source files from one syntax to another&lt;/li&gt;
&lt;li&gt;minify and fingerprint assets when building for production&lt;/li&gt;
&lt;li&gt;rebuild modified source files in development incrementally&lt;/li&gt;
&lt;li&gt;do all of the above for both JavaScript and CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, Sprockets and webpack solve asset bundling in very different ways.&lt;/p&gt;

&lt;p&gt;Sprockets was introduced way back in 2007 (!), before Node.js, before the Cambrian explosion of JavaScript, before module specifications like CommonJS, AMD, and EcmaScript modules, before webpack, browserify and $ANY_MODULE_AWARE_ASSET_BUNDLER. Sprockets has never embraced truly embraced what&amp;#39;s now taken for granted in the JavaScript community.&lt;/p&gt;

&lt;p&gt;Webpack, on the other hand, fully embraces the concept of JavaScript modules. It integrates with Babel, PostCSS, and just about any recent web framework. It supports a number of module syntaxes, including dynamic imports for code splitting. It&amp;#39;s extremely modular and customizable.&lt;/p&gt;

      &lt;h3 id="so-why-would-rails-include-both-" class="title title-h3"&gt;
        &lt;a name="so-why-would-rails-include-both-" class="anchor" href="#so-why-would-rails-include-both-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        So why would Rails include both?
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the answer plain and simple straight from DHH back in 2016 when Webpack was first introduced as the recommended JavaScript compiler with Rails 5.1.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We will continue to use the asset pipeline for JavaScript sprinkles, CSS, images, and other static stuff. The two approaches coexist great.&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href="https://twitter.com/dhh/status/808349072734027776?ref_src=twsrc%5Etfw"&gt;December 12, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We will continue to use the asset pipeline for JavaScript sprinkles, CSS, images, and other static stuff. The two approaches coexist great.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To elaborate on this decision, there was a telling response from DHH on his GitHub pull request to &lt;a href="https://github.com/rails/rails/pull/33079#issuecomment-400140840" target="_blank" rel="noopener noreferrer"&gt;make Webpacker the default JavaScript compiler in Rails 6&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/rails/pull/33079#issuecomment-400140840" target="_blank" rel="noopener noreferrer"&gt;&lt;img src="/assets/images/blog/webpack/dhh-awkward.png" alt="DHH: Webpack’s support is awkward in my opinion and does not offer any benefits over Sprockets. Unlike in the realm of JavaScript compilation." loading="lazy" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@dwightwatson&lt;/strong&gt; Out of curiousity, what is the argument to continue using Sprockets for CSS/static assets when Webpacker supports them by default out of the box?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@dhh&lt;/strong&gt; Webpack’s support is awkward in my opinion and does not offer any benefits over Sprockets. Unlike in the realm of JavaScript compilation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;#39;s a lot to unpack there.&lt;/p&gt;

&lt;p&gt;When it comes to asset bundling, the &amp;quot;Rails way&amp;quot; is webpack for JavaScript and Sprockets for everything else. The default setup in a fresh Rail 6 install, similar to what Basecamp uses, still compiles CSS, images, and fonts with Sprockets.&lt;/p&gt;

&lt;p&gt;This means, if you&amp;#39;re a member of the Basecamp camp, all your webpack JavaScript source files would live in &lt;code&gt;app/javascript&lt;/code&gt; and all your Sprockets CSS and images would remain in &lt;code&gt;app/assets&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To be very clear, this does not mean you need to run both Sprockets and Webpacker to serve assets for the browser. The two processes for bundling assets are completely separate and they do not share dependencies. Different helpers, different implementations, different directories, different, different, different. They are built in such a way that they can cohabitate a Rails application.&lt;/p&gt;

&lt;p&gt;You could use just Sprockets or just Webpacker to bundle &lt;strong&gt;all&lt;/strong&gt; your assets.&lt;/p&gt;

      &lt;h3 id="feeling-awkward-" class="title title-h3"&gt;
        &lt;a name="feeling-awkward-" class="anchor" href="#feeling-awkward-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Feeling, awkward?
      &lt;/h3&gt;
    
&lt;p&gt;DHH calls webpack&amp;#39;s approach to handling non-JavaScript assets &lt;em&gt;awkward&lt;/em&gt;. Now, I happen to like webpack a lot. But he&amp;#39;s not wrong.&lt;/p&gt;

&lt;p&gt;The reason he says this stems from the fact that webpack wants to treat &lt;strong&gt;everything&lt;/strong&gt; as a JavaScript module. I mean &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All JavaScript imports are treated as JavaScript modules. To use CSS with webpack, you import it as you would a JavaScript module. To use an image with webpack, you import it as you would a JavaScript module. Depending on your perspective, this may be unusual—perhaps especially for Rails developers coming from Sprockets.&lt;/p&gt;

&lt;p&gt;This isn&amp;#39;t just a &amp;quot;Rails opinion&amp;quot;. Consider this recent tweet from a prominent voice in the React community, &lt;a href="https://twitter.com/ryanflorence" target="_blank" rel="noopener noreferrer"&gt;Ryan Florence&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;import url from &amp;quot;./whatever.jpg&amp;quot;&lt;br&gt;import html from &amp;quot;./some.md&amp;quot;&lt;br&gt;import str from &amp;quot;raw!./some.js&amp;quot;&lt;br&gt;&lt;br&gt;So ... I gotta admit I love this stuff, but did we jump the shark here with JavaScript build tools? Should this stuff happen outside the JavaScript module bundler?&lt;/p&gt;&amp;mdash; Ryan Florence (@ryanflorence) &lt;a href="https://twitter.com/ryanflorence/status/1258966331572928514?ref_src=twsrc%5Etfw"&gt;May 9, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Sounds a lot like discovering Sprockets in reverse? (I&amp;#39;m not surprised at that 50/50 split either).&lt;/p&gt;

&lt;p&gt;While awkward to some, webpack&amp;#39;s &amp;quot;Everything is a Module&amp;quot; mindset is also extremely powerful. There are some interesting possibilities when a tool goes &lt;strong&gt;all in&lt;/strong&gt; with such a mental model. Think of what &amp;quot;Everything is an Object&amp;quot; has done for Ruby.&lt;/p&gt;

      &lt;h3 id="choosing-webpacker-or-sprockets-or-both-" class="title title-h3"&gt;
        &lt;a name="choosing-webpacker-or-sprockets-or-both-" class="anchor" href="#choosing-webpacker-or-sprockets-or-both-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Choosing Webpacker or Sprockets (or both)
      &lt;/h3&gt;
    
&lt;p&gt;The good news is there&amp;#39;s no need to stress about it. Rails defaults mirror the preferred approach of the Basecamp team, but that doesn&amp;#39;t mean you have to agree or that it&amp;#39;s the right way to do things for your application. You can use both, as Basecamp does, or choose one over the other.&lt;/p&gt;

&lt;p&gt;To help you decide, I adapted &lt;a href="https://github.com/reactjs/react-rails/wiki/Choosing-Sprockets-or-Webpacker" target="_blank" rel="noopener noreferrer"&gt;this excellent guide from the react-rails project&lt;/a&gt;:&lt;/p&gt;

      &lt;h4 id="why-sprockets-" class="title title-h4"&gt;
        &lt;a name="why-sprockets-" class="anchor" href="#why-sprockets-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why Sprockets?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;My Rails app does not need much JavaScript&lt;/li&gt;
&lt;li&gt;I prefer global scripts and jQuery plugin enhancement, i.e. I don&amp;#39;t need a proper JavaScript module system&lt;/li&gt;
&lt;li&gt;Upgrading my legacy Rails app to Webpacker would be too costly&lt;/li&gt;
&lt;li&gt;I don&amp;#39;t need advanced tooling for local development&lt;/li&gt;
&lt;li&gt;It just works and I don&amp;#39;t have time to ramp up on alternatives&lt;/li&gt;
&lt;/ul&gt;

      &lt;h4 id="why-not-sprockets-" class="title title-h4"&gt;
        &lt;a name="why-not-sprockets-" class="anchor" href="#why-not-sprockets-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why not Sprockets?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;Sprockets is slowing down my local development experience&lt;/li&gt;
&lt;li&gt;I need more control over aspects of our asset compilation&lt;/li&gt;
&lt;li&gt;My app has a lot of JavaScript and needs code-splitting features to avoid massive payloads&lt;/li&gt;
&lt;li&gt;I&amp;#39;m concerned about long-term support&lt;/li&gt;
&lt;/ul&gt;

      &lt;h4 id="why-webpacker-" class="title title-h4"&gt;
        &lt;a name="why-webpacker-" class="anchor" href="#why-webpacker-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why Webpacker?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;I want to use a proper JavaScript module system to manage dependencies, i.e., limit global scope pollution and have an explicit dependency graph with import/export and require&lt;/li&gt;
&lt;li&gt;I want to take advantage of the cutting edge features from ES6+, Babel, PostCSS&lt;/li&gt;
&lt;li&gt;I want intelligent code-splitting features such as dynamic imports and webpack&amp;#39;s splitChunks optimization&lt;/li&gt;
&lt;li&gt;I want more flexibility with how my build system generates source maps&lt;/li&gt;
&lt;li&gt;I want advanced tooling for local development including hot module replacement&lt;/li&gt;
&lt;li&gt;I want to build Single Page Apps*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*You don&amp;#39;t need to have a Single Page App to use webpack; it works quite well for &amp;quot;Multi Page Apps&amp;quot;.&lt;/p&gt;

      &lt;h4 id="why-not-webpacker-" class="title title-h4"&gt;
        &lt;a name="why-not-webpacker-" class="anchor" href="#why-not-webpacker-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why not Webpacker?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;My Rails app does not need much JavaScript&lt;/li&gt;
&lt;li&gt;I am a backend developer with limited knowledge of JavaScript ecosystem&lt;/li&gt;
&lt;li&gt;I am not ready to invest time to understand webpack and Webpacker&lt;/li&gt;
&lt;li&gt;It seems to complicated&lt;/li&gt;
&lt;/ul&gt;

      &lt;h4 id="why-use-both-" class="title title-h4"&gt;
        &lt;a name="why-use-both-" class="anchor" href="#why-use-both-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why use both?
      &lt;/h4&gt;
    
&lt;ul&gt;
&lt;li&gt;I prefer the &amp;quot;Rails way&amp;quot;: Webpacker to compile JavaScript, Sprockets for CSS, images, and fonts&lt;/li&gt;
&lt;li&gt;I&amp;#39;m upgrading from Sprockets to Webpacker incrementally&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="on-a-personal-note" class="title title-h3"&gt;
        &lt;a name="on-a-personal-note" class="anchor" href="#on-a-personal-note"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        On a personal note
      &lt;/h3&gt;
    
&lt;p&gt;I want to leave Sprockets behind. Sprockets was a huge leap forward for asset management when it was first introduced but it hasn&amp;#39;t taken advantage of newer possibilities. It languishes while webpack&amp;#39;s key features, such as performance optimizations through code-splitting, are first class.&lt;/p&gt;

&lt;p&gt;Webpack is more complex and does require some investment. For me, it&amp;#39;s been worth it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rossta.net/blog/reasons-to-switch-to-webpacker.html" target="_blank" rel="noopener noreferrer"&gt;I think webpack is a great choice for any application with a significant amount of JavaScript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which is right for you?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to debug webpack on Rails</title>
    <link rel="alternate" href="/blog/how-to-debug-webpack-on-rails.html"/>
    <id>/blog/how-to-debug-webpack-on-rails.html</id>
    <published>2020-05-04T00:00:00+00:00</published>
    <updated>2020-05-04T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;It's nice that the Rails Webpacker gem and NPM package abstracts your webpack config... that is until you need to make changes.&lt;/p&gt;

&lt;p&gt;In &lt;a href="/blog/how-to-customize-webpack-for-rails-apps.html"&gt;my previous post&lt;/a&gt;, I talked about how to customize the webpack config... but how can you be sure you're making the right...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s nice that the Rails Webpacker gem and NPM package abstracts your webpack config... that is until you need to make changes.&lt;/p&gt;

&lt;p&gt;In &lt;a href="/blog/how-to-customize-webpack-for-rails-apps.html"&gt;my previous post&lt;/a&gt;, I talked about how to customize the webpack config... but how can you be sure you&amp;#39;re making the right change? The webpack config is JavaScript, so you can&amp;#39;t simply jump into the Rails console to poke around. But you do have some other tools at your disposal though.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;#39;ll share some tips for debugging the webpack config in your Rails app.&lt;/p&gt;

      &lt;h3 id="the-one-liner" class="title title-h3"&gt;
        &lt;a name="the-one-liner" class="anchor" href="#the-one-liner"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        The one-liner
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;For the following examples, I&amp;#39;m using Node v12.13.1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here&amp;#39;s a quick one-liner for printing the entire Rails webpack config in development:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/development&amp;quot;), { depth: null })&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like &lt;a href="https://nodejs.org/api/console.html#console_console_dir_obj_options" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;console.dir&lt;/code&gt;&lt;/a&gt; as a nice alternative to &lt;code&gt;console.log&lt;/code&gt; for inspecting JavaScript objects.&lt;/p&gt;

&lt;p&gt;For inspecting the test or production configs, just update the RAILS_ENV and the target file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/development&amp;quot;), { depth: null })&amp;#39;
# OR
$ RAILS_ENV=test node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/test&amp;quot;), { depth: null })&amp;#39;
# OR
$ RAILS_ENV=production node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/production&amp;quot;), { depth: null })&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We ensure the RAILS_ENV is set so Webpacker&amp;#39;s NPM package will load the correct settings from your &lt;code&gt;config/webpacker.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To make it even easier, I&amp;#39;ll put this into a script file in &lt;code&gt;bin/inspect_webpack&lt;/code&gt; with my Rails projects.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;#!/usr/bin/env sh

env=${RAILS_ENV:-development}
RAILS_ENV=${env} node -e &amp;quot;console.dir(require(\&amp;quot;./config/webpack/${env}\&amp;quot;), { depth: null })&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to run:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ chmod a+x ./bin/inspect_webpack
$ ./bin/inspect_webpack
# OR
$ RAILS_ENV=test ./bin/inspect_webpack
# OR
$ RAILS_ENV=production ./bin/inspect_webpack
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="on-the-console" class="title title-h3"&gt;
        &lt;a name="on-the-console" class="anchor" href="#on-the-console"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        On the console
      &lt;/h3&gt;
    
&lt;p&gt;For an interactive experience, you can run &lt;code&gt;node&lt;/code&gt; to pull up the Node.js REPL. This is especially helpful for isolating pieces of the webpack config &amp;quot;tree&amp;quot;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;$ RAILS_ENV=development node
&amp;gt; const config = require(&amp;#39;./config/webpack/development&amp;#39;)
undefined
&amp;gt; console.dir(config, { depth: null })
{
  mode: &amp;#39;development&amp;#39;,
  output: {
// displays the entire webpack config
// ...
&amp;gt; console.dir(config.plugins, { depth: null })
// displays the plugins ...
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the script I showed earlier, change the RAILS_ENV to inspect the configs for the other environments.&lt;/p&gt;

&lt;p&gt;From the node console, you can also access and play around with the Webpack &lt;code&gt;environment&lt;/code&gt; object directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&amp;gt; const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)
undefined
&amp;gt; environment.plugins.get(&amp;#39;Manifest&amp;#39;)
// displays configured WebpackAssetsManifest plugin
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="debugging-with-devtools" class="title title-h3"&gt;
        &lt;a name="debugging-with-devtools" class="anchor" href="#debugging-with-devtools"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Debugging with DevTools
      &lt;/h3&gt;
    
&lt;p&gt;While the above examples help inspect the webpack config in a REPL, it may help to debug the config within the build process itself. It&amp;#39;s possible to &lt;a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="noopener noreferrer"&gt;use the &lt;code&gt;debugger&lt;/code&gt; provided by Chrome DevTools on a Node.js process&lt;/a&gt; (as opposed to a browser&amp;#39;s JavaScript process).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the following examples, I&amp;#39;m using Chrome Version 80.0.3987.163&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could, for example, drop a &lt;code&gt;debugger;&lt;/code&gt; statement into our Webpacker webpack config:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

debugger

// changes I want to debug ...

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then run the webpack build with the &lt;code&gt;--debug&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ ./bin/webpack --debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is in the local development environment is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node --inspect-brk yarn webpack --config ./config/webpack/development.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the webpack process in debug mode will open up a websocket to communicate with Chrome DevTools:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ ./bin/webpack --debug
Debugger listening on ws://127.0.0.1:9229/861b81ed-6f2f....
For help, see: https://nodejs.org/en/docs/inspector
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit &lt;code&gt;chrome://inspect&lt;/code&gt; in your Chrome browser and we can find a link for our running Node process in the menu:
&lt;img src="/assets/images/blog/webpack/chrome-inspect-main.png" alt="Screenshot of the chrome://inspect page" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;This will start a instance of the DevTools for your Node process where we can click &amp;quot;Play&amp;quot; to resume execution:
&lt;img src="/assets/images/blog/webpack/chrome-inspect-webpack-debug-1.png" alt="Screenshot of Chrome DevTools debugger start" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;The process halts when it hits our &lt;code&gt;debugger&lt;/code&gt; statement and we can modify values on the console:
&lt;img src="/assets/images/blog/webpack/chrome-inspect-webpack-debug-2.png" alt="Screenshot of Chrome DevTools console" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;For larger (or misconfigured) projects, you may experience memory usage issues with the webpack build. The DevTools debugger also provides a Memory tab for taking heap snapshots and tracking down the memory hogs in your build process.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/chrome-inpsect-memory-tab.png" alt="Screenshot of DevTools Memory tab" loading="lazy" /&gt;
&lt;img src="/assets/images/blog/webpack/chrome-inspect-heap-snapshot.png" alt="Screenshot of DevTools heap snapshot" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;#39;s more on &lt;a href="https://medium.com/webpack/webpack-bits-learn-and-debug-webpack-with-chrome-dev-tools-da1c5b19554" target="_blank" rel="noopener noreferrer"&gt;using DevTools with webpack on the webpack blog&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="speed-measure-plugin" class="title title-h3"&gt;
        &lt;a name="speed-measure-plugin" class="anchor" href="#speed-measure-plugin"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Speed measure plugin
      &lt;/h3&gt;
    
&lt;p&gt;To help isolate slow parts of your build, I highly recommend the &lt;a href="https://github.com/stephencookdev/speed-measure-webpack-plugin#readme" target="_blank" rel="noopener noreferrer"&gt;Speed Measure Plugin&lt;/a&gt; for webpack. This is a plugin you would install and configure in your project temporarily to get feedback about individual parts of the build process.&lt;/p&gt;

&lt;p&gt;First, install the plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn add speed-measure-webpack-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then temporarily configure your production build (you could also do something similar for development or test):&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;process.env.NODE_ENV = process.env.NODE_ENV || &amp;#39;production&amp;#39;

const environment = require(&amp;#39;./environment&amp;#39;)

const SpeedMeasurePlugin = require(&amp;#39;speed-measure-webpack-plugin&amp;#39;)
const smp = new SpeedMeasurePlugin()

module.exports = smp.wrap(environment.toWebpackConfig())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run the production build:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=production NODE_ENV=production ./bin/webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Speed Measure plugin will print information to $stdout which may help identify the slow parts:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt; SMP  ⏱
General output time took 3.094 secs

 SMP  ⏱  Plugins
CaseSensitivePathsPlugin took 0.391 secs
TerserPlugin took 0.306 secs
WebpackAssetsManifest took 0.066 secs
CompressionPlugin took 0.019 secs
MiniCssExtractPlugin took 0.001 secs
OptimizeCssAssetsWebpackPlugin took 0.001 secs
EnvironmentPlugin took 0 secs

 SMP  ⏱  Loaders
modules with no loaders took 1.27 secs
  module count = 365
babel-loader took 0.824 secs
  module count = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href="https://dev.to/slashgear_/how-to-boost-the-speed-of-your-webpack-build-16h0" target="_blank" rel="noopener noreferrer"&gt;How to boost the speed of your webpack build&lt;/a&gt; and the &lt;a href="https://webpack.js.org/guides/build-performance/" target="_blank" rel="noopener noreferrer"&gt;official webpack build performance docs&lt;/a&gt; for a number of useful tips for improving build/compilation performance.&lt;/p&gt;

      &lt;h3 id="wrapping-up" class="title title-h3"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h3&gt;
    
&lt;p&gt;Even though Webpacker hides away much of the complexity of webpack configuration, sometimes it&amp;#39;s necessary to peel back the abstraction layer. Like anything else that&amp;#39;s new, wrapping your head around webpack build can be intimidating, especially if you don&amp;#39;t know where to start. If things go wrong, all is not lost. Hopefully this post helped illustrate some ways you can get insight into what&amp;#39;s happening in your Rails webpack config.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to customize webpack in Rails apps</title>
    <link rel="alternate" href="/blog/how-to-customize-webpack-for-rails-apps.html"/>
    <id>/blog/how-to-customize-webpack-for-rails-apps.html</id>
    <published>2020-04-18T00:00:00+00:00</published>
    <updated>2020-04-18T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;When &lt;a href="/blog/how-to-use-webpacker-yml.html"&gt;adjusting webpacker.yml&lt;/a&gt; is not enough, it might be necessary to modify Webpacker's default webpack configuration. Configuring webpack is precisely the main job of Webpacker's NPM package, &lt;code&gt;@rails/webpacker&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn...&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html">&lt;p&gt;When &lt;a href="/blog/how-to-use-webpacker-yml.html"&gt;adjusting webpacker.yml&lt;/a&gt; is not enough, it might be necessary to modify Webpacker&amp;#39;s default webpack configuration. Configuring webpack is precisely the main job of Webpacker&amp;#39;s NPM package, &lt;code&gt;@rails/webpacker&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post provides an overview of how to customize its default settings for your Rails application. It&amp;#39;s a followup to my last post on &lt;a href="/blog/how-to-use-webpacker-yml.html"&gt;understanding webpacker.yml&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;webpacker.yml&lt;/code&gt;&lt;/strong&gt; to modify a &lt;strong&gt;limited&lt;/strong&gt; number of settings, some of which are shared between Rails and webpack.&lt;/p&gt;

&lt;p&gt;Modify the base &lt;strong&gt;&lt;code&gt;@rails/webpacker&lt;/code&gt;&lt;/strong&gt; configuration for &lt;strong&gt;any&lt;/strong&gt; webpack-specific config options in JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h2 id="at-a-glance" class="title title-h2"&gt;
        &lt;a name="at-a-glance" class="anchor" href="#at-a-glance"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        At a glance
      &lt;/h2&gt;
    
&lt;p&gt;In an ideal world, webpack configuration would be transparent to Rails developers. Let&amp;#39;s face it, most developers would rather spend their time building features than configuring their asset compilation process. Still, the base webpack configuration provided by &lt;code&gt;@rails/webpacker&lt;/code&gt; may not satisfy your application&amp;#39;s needs, so modifications may be inevitable.&lt;/p&gt;

&lt;p&gt;Some things you might want to modify or change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope"&gt;Handling legacy jQuery plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loading-dotenv-env-vars-in-webpack"&gt;Loading dotenv ENV vars in webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enabling-webpack-optimization"&gt;Enabling webpack optimization (i.e., sharing code across bundles)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-module-aliases"&gt;Using modules aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overriding-the-default-options-for-compiling-css-modules"&gt;Changing the identifiers for CSS modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, where to start?&lt;/p&gt;

&lt;p&gt;First, we&amp;#39;ll take a look at the environment-specific JavaScript files Webpacker installs in the &lt;code&gt;config/webpack/&lt;/code&gt; directory within your Rails application:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ tree config/webpack
config/webpack
├── development.js
├── environment.js
├── production.js
└── test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For experienced frontend developers wondering &lt;em&gt;where is &lt;code&gt;webpack.config.js&lt;/code&gt;?&lt;/em&gt;, it&amp;#39;s here, as &lt;code&gt;config/webpack/{development,test,production}.js&lt;/code&gt;; there is a separate config file for each Rails environment.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;./bin/webpack&lt;/code&gt; is similar to typing out one the following commands to run &lt;code&gt;webpack&lt;/code&gt; directly, depending on your current &lt;code&gt;RAILS_ENV&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;RAILS_ENV=development yarn webpack --config ./config/webpack/development.js
RAILS_ENV=test yarn webpack --config ./config/webpack/test.js
RAILS_ENV=production yarn webpack --config ./config/webpack/production.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These files are to webpack configuration what Ruby config files &lt;code&gt;config/environments/{development,test,production}.rb&lt;/code&gt; are Rails configuration: the place to customize environment-specific needs. Just as &lt;code&gt;config/application.rb&lt;/code&gt; is the shared configuration for all Rails environments, so is &lt;code&gt;config/webpack/environment.js&lt;/code&gt; for each of the environment-specific webpack config files.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;config/webpack/environment.js&lt;/code&gt; file is where the default webpack configuration is imported via &lt;code&gt;@rails/webpacker&lt;/code&gt;. The named import &lt;code&gt;environment&lt;/code&gt; is an abstraction around the webpack config. It provides &lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#configuration" target="_blank" rel="noopener noreferrer"&gt;its own API to support modification and extension&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the environment-specific files are more or less the same; they import the base &lt;code&gt;environment&lt;/code&gt; object and must convert it to a JavaScript object that matches the webpack configuration schema:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/development.js
process.env.NODE_ENV = process.env.NODE_ENV || &amp;#39;development&amp;#39;

const environment = require(&amp;#39;./environment&amp;#39;)

module.exports = environment.toWebpackConfig()
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="under-the-hood" class="title title-h3"&gt;
        &lt;a name="under-the-hood" class="anchor" href="#under-the-hood"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Under the hood
      &lt;/h3&gt;
    
&lt;p&gt;There&amp;#39;s a problem though with making changes through an abstraction layer; it&amp;#39;s hard to see what you want to change. Since the API is not fully documented yet, you may need to do some digging.&lt;/p&gt;

&lt;p&gt;To print it out on the command line, here&amp;#39;s a handy one-line script:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ RAILS_ENV=development node -e &amp;#39;console.dir(require(&amp;quot;./config/webpack/development&amp;quot;), { depth: null })&amp;#39;
# displays entire webpack config object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/api/console.html#console_console_dir_obj_options" target="_blank" rel="noopener noreferrer"&gt;console.dir&lt;/a&gt; is a nice alternative to &lt;code&gt;console.log&lt;/code&gt; for inspecting JavaScript objects.&lt;/p&gt;

&lt;p&gt;To go deeper, you may want to checkout &lt;a href="https://github.com/rails/webpacker/blob/40a171021f6a89117aed1317957199cf2ca72b98/package/environments/base.js#L123" target="_blank" rel="noopener noreferrer"&gt;the source for the &lt;code&gt;Environment&lt;/code&gt; class in the &lt;code&gt;@rails/webpacker&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;environment&lt;/code&gt; instance has &lt;code&gt;loaders&lt;/code&gt; and &lt;code&gt;plugins&lt;/code&gt; properties that are each implemented as bespoke &lt;a href="https://github.com/rails/webpacker/blob/40a171021f6a89117aed1317957199cf2ca72b98/package/config_types/config_list.js#L5" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;ConfigList&lt;/code&gt;&lt;/a&gt; objects that subclass JavaScript&amp;#39;s &lt;code&gt;Array&lt;/code&gt; class (&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/package/config_types/config_list.js" target="_blank" rel="noopener noreferrer"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://webpack.js.org/concepts/#loaders" target="_blank" rel="noopener noreferrer"&gt;Loaders in webpack&lt;/a&gt; define transforms based on file type or name; they are analogous to preprocessors in the Sprockets. &lt;a href="https://webpack.js.org/concepts/#plugins" target="_blank" rel="noopener noreferrer"&gt;Plugins in webpack&lt;/a&gt; support a wider range of tasks, like optimization or moving/copying assets, by leveraging webpack&amp;#39;s exhaustive list of hooks to tap into the compilation process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;environment.config&lt;/code&gt; property is also useful is you want to simply override defaults with a raw object matching a portion of the webpack config schema.&lt;/p&gt;

      &lt;h3 id="examples" class="title title-h3"&gt;
        &lt;a name="examples" class="anchor" href="#examples"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Examples
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the rub: Webpacker, in true Rails fashion, aims to provide convention over configuration, however, the design of webpack skews heavily in the other direction: it is extremely flexible and malleable through its support for plugins and a large number of configurable options. Webpack is built to support a broad range of use cases to meet the needs of a diverse frontend landscape. Webpacker&amp;#39;s opinionated approach may leave out something you need.&lt;/p&gt;

&lt;p&gt;This means there may come a time when you need to roll up your sleeves and peel back the abstraction layer and modify the base Webpacker &lt;code&gt;environment&lt;/code&gt; object. At this point, it may help to read up on &lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#configuration" target="_blank" rel="noopener noreferrer"&gt;the Webpacker docs for modifying the webpack configuration&lt;/a&gt;. Below are just a few examples.&lt;/p&gt;

      &lt;h4 id="providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope" class="title title-h4"&gt;
        &lt;a name="providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope" class="anchor" href="#providing-jquery-as-an-import-to-legacy-plugins-and-exposing-to-global-scope"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Providing jQuery as an import to legacy plugins and exposing to global scope
      &lt;/h4&gt;
    
&lt;p&gt;Here&amp;#39;s an example of how to &amp;quot;provide&amp;quot; a jQuery import to a legacy package that doesn&amp;#39;t understand modules and to &amp;quot;expose&amp;quot; the &lt;code&gt;$&lt;/code&gt; variable for the global scope (so you can use &lt;code&gt;$(...)&lt;/code&gt; expressions in raw &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags).&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ yarn add expose-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)
const webpack = require(&amp;#39;webpack&amp;#39;)

// Adds `var jQuery = require(&amp;#39;jquery&amp;#39;) to legacy jQuery plugins
environment.plugins.append(
  &amp;#39;Provide&amp;#39;,
  new webpack.ProvidePlugin({
    $: &amp;#39;jquery&amp;#39;,
    jQuery: &amp;#39;jquery&amp;#39;,
    jquery: &amp;#39;jquery&amp;#39;,
  }),
)

// Adds window.$ = require(&amp;#39;jquery&amp;#39;)
environment.loaders.append(&amp;#39;jquery&amp;#39;, {
  test: require.resolve(&amp;#39;jquery&amp;#39;),
  use: [
    {
      loader: &amp;#39;expose-loader&amp;#39;,
      options: &amp;#39;$&amp;#39;,
    },
  ],
})

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack" target="_blank" rel="noopener noreferrer"&gt;This StackOverflow post&lt;/a&gt; provides more general context on making legacy jQuery play nice with webpack.&lt;/p&gt;

      &lt;h4 id="loading-dotenv-env-vars-in-webpack" class="title title-h4"&gt;
        &lt;a name="loading-dotenv-env-vars-in-webpack" class="anchor" href="#loading-dotenv-env-vars-in-webpack"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Loading dotenv ENV vars in webpack
      &lt;/h4&gt;
    
&lt;p&gt;A nice feature of webpack and the default webpack configuration is that it will make ENV vars available to the build process. For example, using &lt;code&gt;process.ENV.MY_API_KEY&lt;/code&gt; will be compiled to &lt;code&gt;&amp;quot;my-api-key-value&amp;quot;&lt;/code&gt; in your webpack build. To emulate the behavior of the popular &lt;code&gt;dotenv-rails&lt;/code&gt; project, which can load ENV vars defined in &lt;code&gt;.env*&lt;/code&gt; files, you could add configuration as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn add dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)
const webpack = require(&amp;#39;webpack&amp;#39;)
const dotenv = require(&amp;#39;dotenv&amp;#39;)

const dotenvFiles = [
  `.env.${process.env.NODE_ENV}.local`,
  &amp;#39;.env.local&amp;#39;,
  `.env.${process.env.NODE_ENV}`,
  &amp;#39;.env&amp;#39;,
]
dotenvFiles.forEach((dotenvFile) =&amp;gt; {
  dotenv.config({ path: dotenvFile, silent: true })
})

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/env.md#environment-variables" target="_blank" rel="noopener noreferrer"&gt;Original source in the Webpacker docs&lt;/a&gt;.&lt;/p&gt;

      &lt;h4 id="enabling-webpack-optimization" class="title title-h4"&gt;
        &lt;a name="enabling-webpack-optimization" class="anchor" href="#enabling-webpack-optimization"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Enabling webpack optimization
      &lt;/h4&gt;
    
&lt;p&gt;The &lt;code&gt;splitChunks&lt;/code&gt; API instructs webpack to share dependencies across bundles. Using this optimization step must be combined with different view helpers; see the&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#add-splitchunks-webpack-v4" target="_blank" rel="noopener noreferrer"&gt;Webpacker docs&lt;/a&gt; for more info.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

// Enable the default config
environment.splitChunks()
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: Use the &lt;code&gt;splitChunks&lt;/code&gt; API for solving the &amp;quot;page-specific JavaScript&amp;quot; problem with Webpacker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See the &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer"&gt;webpack splitChunks docs&lt;/a&gt; for more info.&lt;/p&gt;

      &lt;h4 id="using-module-aliases" class="title title-h4"&gt;
        &lt;a name="using-module-aliases" class="anchor" href="#using-module-aliases"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Using module aliases
      &lt;/h4&gt;
    
&lt;p&gt;The Webpacker environment API also supports a &lt;code&gt;config.merge&lt;/code&gt; function to override raw webpack config options. This example would allow you to import images from the &lt;code&gt;app/assets&lt;/code&gt; directory using &lt;code&gt;import &amp;#39;images/path/to/image.jpg&amp;#39;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { resolve } = require(&amp;#39;path&amp;#39;);

// Enable the default config
environment.config.merge({
  resolve: {
    alias: {
      images: resolve(&amp;#39;app/assets/images&amp;#39;),
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Learn more in the &lt;a href="https://webpack.js.org/configuration/resolve/" target="_blank" rel="noopener noreferrer"&gt;webpack resolve docs&lt;/a&gt;.&lt;/p&gt;

      &lt;h4 id="overriding-the-default-options-for-compiling-css-modules" class="title title-h4"&gt;
        &lt;a name="overriding-the-default-options-for-compiling-css-modules" class="anchor" href="#overriding-the-default-options-for-compiling-css-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Overriding the default options for compiling CSS modules
      &lt;/h4&gt;
    
&lt;p&gt;This change involves modifying an existing loader, which can be accessed using &lt;code&gt;environment.loaders.get(key)&lt;/code&gt; and replacing its options property.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

const myCssLoaderOptions = {
  modules: {
    localIdentName: &amp;#39;[name]__[local]___[hash:base64:10]&amp;#39;,
  },
  sourceMap: true,
}

const CSSLoader = environment.loaders
  .get(&amp;#39;moduleSass&amp;#39;)
  .use
  .find((el) =&amp;gt; el.loader === &amp;#39;css-loader&amp;#39;)

CSSLoader.options = { ...CSSLoader.options, ...myCssLoaderOptions }

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/webpacker/blob/a84a4bb6b385ae17dd775a6034a0b159b88c6ea9/docs/webpack.md#overriding-loader-options-in-webpack-3-for-css-modules-etc" target="_blank" rel="noopener noreferrer"&gt;Original source in the Webpacker docs&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="wrapping-up" class="title title-h3"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h3&gt;
    
&lt;p&gt;In this post, I&amp;#39;ve attempted to shed some light on the role of the &lt;code&gt;@rails/webpacker&lt;/code&gt; project in your Rails app. We demonstrated how the Webpacker wraps the default webpack configuration along with some examples to illustrate how one might modify and extend the config for selected use cases.&lt;/p&gt;

&lt;p&gt;For readers who need to go even further, there&amp;#39;s no better place to go next than webpack&amp;#39;s &lt;a href="https://webpack.js.org/guides/getting-started/" target="_blank" rel="noopener noreferrer"&gt;Getting Started guide&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Understanding webpacker.yml</title>
    <link rel="alternate" href="/blog/how-to-use-webpacker-yml.html"/>
    <id>/blog/how-to-use-webpacker-yml.html</id>
    <published>2020-04-11T00:00:00+00:00</published>
    <updated>2020-04-11T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Though Webpacker adds a layer of "convention over configuration" in regards to webpack integration with Rails, the need for configuration remains. In this post, I'll describe the role of the &lt;code&gt;webpacker.yml&lt;/code&gt; file for Webpacker configuration.&lt;/p&gt;

&lt;p&gt;One of Webpacker...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Though Webpacker adds a layer of &amp;quot;convention over configuration&amp;quot; in regards to webpack integration with Rails, the need for configuration remains. In this post, I&amp;#39;ll describe the role of the &lt;code&gt;webpacker.yml&lt;/code&gt; file for Webpacker configuration.&lt;/p&gt;

&lt;p&gt;One of Webpacker&amp;#39;s primary roles is helping Rails communicate with webpack.&lt;/p&gt;

&lt;p&gt;Here are some things both Rails and webpack need to know:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;​&lt;em&gt;Where are the source files located?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What file types should be bundled?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What&amp;#39;s the destination for the bundle files?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should CSS be inserted dynamically via JavaScript or output as a separate file?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What port should the webpack-dev-server listen on in development?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;#39;s where &lt;code&gt;webpacker.yml&lt;/code&gt; comes in.&lt;/p&gt;

&lt;p&gt;This file is read both Ruby code supplied by the Webpacker gem in the Rails server process and the JavaScript process that generates the webpack configuration via the &lt;code&gt;@rails/webpacker&lt;/code&gt; NPM package. It supports a number of YAML entries which I&amp;#39;ll describe in more detail in the &lt;a href="#reference-guide"&gt;reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="creating-and-updating" class="title title-h3"&gt;
        &lt;a name="creating-and-updating" class="anchor" href="#creating-and-updating"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Creating and updating
      &lt;/h3&gt;
    
&lt;p&gt;Webpacker expects to find this file at &lt;code&gt;config/webpacker.yml&lt;/code&gt; within your Rails project. It is installed via the following command, provided by the Webpacker gem.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;rails webpacker:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The installer also generates environment-specific JavaScript files in &lt;code&gt;config/webpack/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;config
│   ...
├── webpack
│   ├── development.js
│   ├── environment.js
│   ├── production.js
│   └── test.js
└── webpacker.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When upgrading the Webpacker gem, it&amp;#39;s prudent to re-run the installer command to bring in new changes from the default &lt;code&gt;webpacker.yml&lt;/code&gt; template. Differences will have to be merged intentionally to avoid losing project-specific customizations.&lt;/p&gt;

      &lt;h3 id="limitations" class="title title-h3"&gt;
        &lt;a name="limitations" class="anchor" href="#limitations"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Limitations
      &lt;/h3&gt;
    
&lt;p&gt;The &lt;code&gt;webpacker.yml&lt;/code&gt; config file does not work with ERB as is typical with other Rails YAML config files, since the file must also be read in JavaScript. This may come as a surprise as indicated by recent issues, e.g. &lt;a href="https://github.com/rails/webpacker/issues/1615" target="_blank" rel="noopener noreferrer"&gt;#1615&lt;/a&gt;, &lt;a href="https://github.com/rails/webpacker/issues/956" target="_blank" rel="noopener noreferrer"&gt;#956&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One possible workaround is to use one of the supported &lt;a href="#env-var-overrides"&gt;ENV var overrides&lt;/a&gt;. It may also be an option to manipulate the JavaScript config in one of the &lt;code&gt;config/webpack&lt;/code&gt; JavaScript files—look for a future post on the subject.&lt;/p&gt;

      &lt;h3 id="reference-guide" class="title title-h3"&gt;
        &lt;a name="reference-guide" class="anchor" href="#reference-guide"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Reference guide
      &lt;/h3&gt;
    
&lt;p&gt;Following is reference guide for supported Webpacker configuration options as of Webpacker version &lt;code&gt;&amp;gt;= 4&lt;/code&gt;.&lt;/p&gt;

      &lt;h4 id="source_path" class="title title-h4"&gt;
        &lt;a name="source_path" class="anchor" href="#source_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        source_path
      &lt;/h4&gt;
    
&lt;p&gt;The primary subdirectory within your Rails application where your webpack source code is located. Your &lt;a href="#source_entry_path"&gt;&lt;code&gt;source_entry_path&lt;/code&gt;&lt;/a&gt; directory should be located here. You can add to the list of source paths using &lt;a href="#resolved_paths"&gt;&lt;code&gt;resolved_paths&lt;/code&gt;&lt;/a&gt;. Change this directory to something like &lt;code&gt;app/frontend&lt;/code&gt; if you use webpack for non-JavaScript assets like CSS, images, fonts, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;source_path: app/javascript
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="source_entry_path" class="title title-h4"&gt;
        &lt;a name="source_entry_path" class="anchor" href="#source_entry_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        source_entry_path
      &lt;/h4&gt;
    
&lt;p&gt;The subdirectory within &lt;a href="#source_path"&gt;&lt;code&gt;source_path&lt;/code&gt;&lt;/a&gt; where your webpack entry point files are located. For example, given a &lt;code&gt;source_path&lt;/code&gt; of &lt;code&gt;app/javascript&lt;/code&gt;, a &lt;code&gt;source_entry_path&lt;/code&gt; of &lt;code&gt;packs&lt;/code&gt;, and an entry point named &lt;code&gt;application.js&lt;/code&gt;, the path to this file from Rails root should be &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;source_entry_path: packs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;!!!Warning!!!&lt;/strong&gt; Only use this directory for webpack entry points! &lt;a href="https://rossta.net/blog/overpacking-a-common-webpacker-mistake.html" target="_blank" rel="noopener noreferrer"&gt;A common webpacker mistake&lt;/a&gt; is placing too many files in this directory.&lt;/p&gt;

      &lt;h4 id="public_root_path" class="title title-h4"&gt;
        &lt;a name="public_root_path" class="anchor" href="#public_root_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        public_root_path
      &lt;/h4&gt;
    
&lt;p&gt;The primary destination within your Rail application where your compiled webpack assets are output. For most applications this should be &lt;code&gt;public&lt;/code&gt;, i.e., corresponding to &lt;code&gt;Rails.public_path&lt;/code&gt;. When &lt;a href="https://github.com/rails/webpacker/blob/master/docs/engines.md" target="_blank" rel="noopener noreferrer"&gt;configuring webpacker for a Rails engine&lt;/a&gt;, this value could be relative to the engine root, such as &lt;code&gt;../public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;public_root_path: public
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="public_output_path" class="title title-h4"&gt;
        &lt;a name="public_output_path" class="anchor" href="#public_output_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        public_output_path
      &lt;/h4&gt;
    
&lt;p&gt;The subdirectory destination within the &lt;a href="#public_output_path"&gt;&lt;code&gt;public_output_path&lt;/code&gt;&lt;/a&gt; where your compiled webpack assets are output. For example, given a &lt;code&gt;public_root_path&lt;/code&gt; of &lt;code&gt;public&lt;/code&gt; and a &lt;code&gt;public_output_path&lt;/code&gt; of &lt;code&gt;packs&lt;/code&gt;, the webpack manifest file, which maps canonical asset names to their fingerprinted output filenames, would be located at &lt;code&gt;public/packs/manifest.json&lt;/code&gt; within your Rails application.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;public_output_path: packs
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="cache_path" class="title title-h4"&gt;
        &lt;a name="cache_path" class="anchor" href="#cache_path"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        cache_path
      &lt;/h4&gt;
    
&lt;p&gt;The subdirectory where webpack, webpacker, babel, etc. will write cache files to enhance recompilation times. For example, given a &lt;code&gt;cache_path&lt;/code&gt; of &lt;code&gt;tmp/cache/webpacker&lt;/code&gt;, webpacker will write a SHA1 digest on each compilation of your source files in development to a file &lt;code&gt;tmp/cache/webpacker/last-compilation-digest-development&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;cache_path: tmp/cache/webpacker
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="resolved_paths" class="title title-h4"&gt;
        &lt;a name="resolved_paths" class="anchor" href="#resolved_paths"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        resolved_paths
      &lt;/h4&gt;
    
&lt;p&gt;This option expects an array of subdirectories where webpack should resolve modules. Given &lt;code&gt;resolved_paths&lt;/code&gt; of &lt;code&gt;[&amp;quot;app/assets/images&amp;quot;]&lt;/code&gt;, webpack will lookup modules in your &lt;a href="#source_path"&gt;&lt;code&gt;source_path&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;node_modules&lt;/code&gt;, and &lt;code&gt;app/assets/images&lt;/code&gt;. When watching for file changes in development, webpack watched paths would include the &lt;code&gt;source_path&lt;/code&gt; and &lt;code&gt;resolved_paths&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;resolved_paths:
  - app/assets/images
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="webpack_compile_output" class="title title-h4"&gt;
        &lt;a name="webpack_compile_output" class="anchor" href="#webpack_compile_output"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        webpack_compile_output
      &lt;/h4&gt;
    
&lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to print webpack output do STDOUT or &lt;code&gt;false&lt;/code&gt; to silence. Unless you&amp;#39;re extremely confident in what you&amp;#39;re doing, the only correct value for this setting is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;webpack_compile_output: true
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="cache_manifest" class="title title-h4"&gt;
        &lt;a name="cache_manifest" class="anchor" href="#cache_manifest"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        cache_manifest
      &lt;/h4&gt;
    
&lt;p&gt;The webpack &lt;code&gt;manifest.json&lt;/code&gt; is one of the crucial files in output webpacker asset compilation. It provides a mapping of canonical asset names to their fingerprinted filenames, e.g. &lt;code&gt;&amp;quot;application.js&amp;quot;: &amp;quot;/packs/js/application-abcdefg12345.js&amp;quot;&lt;/code&gt;. Rails uses the manifest to lookup the location of assets on disk. The &lt;code&gt;cache_manifest&lt;/code&gt; setting simply tells Rails whether we want to maintain the parsed manifest in Ruby memory. Set this to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt; where you&amp;#39;ll be making frequent changes to your source code; &lt;code&gt;true&lt;/code&gt; in all other environments.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;cache_manifest: true
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="extract_css" class="title title-h4"&gt;
        &lt;a name="extract_css" class="anchor" href="#extract_css"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        extract_css
      &lt;/h4&gt;
    
&lt;p&gt;Given a webpack bundle &lt;code&gt;application.js&lt;/code&gt; that imports CSS, webpacker can be configured to emit the compiled CSS in one of two ways: 1) extracted as a separate file called &lt;code&gt;application.css&lt;/code&gt; as you might expect from the Rails asset pipeline, or 2) as a JavaScript module that webpack will insert as CSS into the page dynamically when loaded in the browser. &lt;code&gt;extract_css: false&lt;/code&gt; is helpful for development; most applications will want to set &lt;code&gt;extract_css: true&lt;/code&gt; in production.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;extract_css: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; With &lt;code&gt;extract_css: true&lt;/code&gt;, you must use &lt;code&gt;stylesheet_pack_tag&lt;/code&gt;, i.e, &lt;code&gt;&amp;lt;%= stylesheet_pack_tag &amp;quot;application&amp;quot; %&amp;gt;&lt;/code&gt;, in your Rails view. This can be easy to miss in deployed environments after using &lt;code&gt;extract_css: false&lt;/code&gt; for local development.&lt;/p&gt;

      &lt;h4 id="static_assets_extensions" class="title title-h4"&gt;
        &lt;a name="static_assets_extensions" class="anchor" href="#static_assets_extensions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        static_assets_extensions
      &lt;/h4&gt;
    
&lt;p&gt;Provide a list of file extensions, such as &lt;code&gt;.jpeg&lt;/code&gt;, &lt;code&gt;.png&lt;/code&gt;, &lt;code&gt;.woff&lt;/code&gt;, that webpack should emit as separate files, i.e, &lt;code&gt;import &amp;quot;../my-image.jpg&amp;quot;&lt;/code&gt; will result in webpack emitting a file of that name instead of loading it in memory as a JavaScript module.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;static_file_extensions:
    - .jpg
    - .jpeg
    # ...
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="extensions" class="title title-h4"&gt;
        &lt;a name="extensions" class="anchor" href="#extensions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        extensions
      &lt;/h4&gt;
    
&lt;p&gt;Provide a list of file extensions that webpack will recognize when searching for imported files to add to the dependency graph.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;extensions:
  - .js
  - .sass
  - .scss
  - .jsx
  - .vue
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="compile" class="title title-h4"&gt;
        &lt;a name="compile" class="anchor" href="#compile"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        compile
      &lt;/h4&gt;
    
&lt;p&gt;Set this to &lt;code&gt;true&lt;/code&gt; only when you want Rails to execute a shell command to compile webpack dynamically when attempting to serve a webpack asset or bundle. Set to &lt;code&gt;false&lt;/code&gt; when webpack assets should be precompiled, as in &lt;code&gt;production&lt;/code&gt; or when instead using the &lt;code&gt;webpack-dev-server&lt;/code&gt; to handle webpack asset requests, as in &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;compile: false
&lt;/code&gt;&lt;/pre&gt;

      &lt;h4 id="dev_server" class="title title-h4"&gt;
        &lt;a name="dev_server" class="anchor" href="#dev_server"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        dev_server
      &lt;/h4&gt;
    
&lt;p&gt;This config contains a set of key-value pairs that correspond to a subset of the &lt;code&gt;webpack-dev-server&lt;/code&gt; configuration &lt;a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener noreferrer"&gt;outlined in the webpack docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rails only needs to know the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt; values to proxy requests to the &lt;code&gt;webpack-dev-server&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt;. Other &lt;code&gt;dev_server&lt;/code&gt; config values may be set in either &lt;code&gt;webpacker.yml&lt;/code&gt; or in the webpack config exported from &lt;code&gt;config/webpack/development.js&lt;/code&gt;. Make sure at least the following values are set in &lt;code&gt;webpacker.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  dev_server:
    https: false
    host: localhost
    port: 3035
    public: localhost:3035
    # ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable auto-recompile when source files are changed:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  dev_server:
    # ...
    inline: true
    # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable &lt;a href="https://webpack.js.org/concepts/hot-module-replacement/" target="_blank" rel="noopener noreferrer"&gt;hot-module replacement&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;development:
  # ...
  extract_css: false # to allow HMR for CSS

  dev_server:
    # ...
    inline: true
    hmr: true
    # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the &lt;a href="https://github.com/rails/webpacker/blob/master/docs/webpack-dev-server.md" target="_blank" rel="noopener noreferrer"&gt;Webpacker docs&lt;/a&gt; and &lt;a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener noreferrer"&gt;webpack docs&lt;/a&gt; for more info.&lt;/p&gt;

      &lt;h3 id="env-var-overrides" class="title title-h3"&gt;
        &lt;a name="env-var-overrides" class="anchor" href="#env-var-overrides"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        ENV var overrides
      &lt;/h3&gt;
    
&lt;p&gt;Some Rails configuration can be overriden via ENV vars. This is especially helpful to workaround certain &lt;a href="#limitations"&gt;limitations&lt;/a&gt;. Many of the &lt;code&gt;dev_server&lt;/code&gt; options can be specified in upcase with the prefix &lt;code&gt;WEBPACKER_DEV_SERVER_&lt;/code&gt;, as illustrated below:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;WEBPACKER_DEV_SERVER_HOST=localhost \
WEBPACKER_DEV_SERVER_PORT=8765 \
WEBPACKER_DEV_SERVER_PUBLIC=localhost:8765 \
./bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other supported Webpacker ENV vars include:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;WEBPACKER_NODE_MODULES_BIN_PATH
WEBPACKER_RELATIVE_URL_ROOT
WEBPACKER_ASSET_HOST
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="feedback" class="title title-h3"&gt;
        &lt;a name="feedback" class="anchor" href="#feedback"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Feedback
      &lt;/h3&gt;
    
&lt;p&gt;Did you find this guide useful? Please &lt;a href="https://twitter.com/intent/tweet?text=How+to+use+webpacker.yml%3A+An+unofficial+guide+to+Rails+Webpacker+YAML+configuration&amp;amp;url=https%3A%2F%2Frossta.net%2Fblog%2Fhow-to-use-webpacker-yml.html" target="_blank" rel="noopener noreferrer"&gt;share it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just like with the official Rails guides, you&amp;#39;re encouraged to help improve the quality of this one. &lt;a href="https://github.com/rossta/rossta.github.com/blob/develop/source/blog/2020-04-01-configuring-webpacker.html.md" target="_blank" rel="noopener noreferrer"&gt;Please contribute&lt;/a&gt; if you see any typos or factual errors.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>jQuery plugins in webpack without jQuery</title>
    <link rel="alternate" href="/blog/you-might-not-need-jquery-with-webpack.html"/>
    <id>/blog/you-might-not-need-jquery-with-webpack.html</id>
    <published>2020-03-26T00:00:00+00:00</published>
    <updated>2020-03-26T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Have you seen this console error while trying to adopt webpack?&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;Uncaught TypeError: $(...).myJqueryPlugin is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you installed it correctly, there could be a few explanations. In this post, we'll look one possible reason: with...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Have you seen this console error while trying to adopt webpack?&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;Uncaught TypeError: $(...).myJqueryPlugin is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you installed it correctly, there could be a few explanations. In this post, we&amp;#39;ll look one possible reason: with webpack, your jQuery plugin &lt;em&gt;might&lt;/em&gt; not need jQuery.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="example-the-flickity-plugin" class="title title-h3"&gt;
        &lt;a name="example-the-flickity-plugin" class="anchor" href="#example-the-flickity-plugin"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Example: the Flickity plugin
      &lt;/h3&gt;
    
&lt;p&gt;To take advantage of this distinction, more plugins are being written without the assumption of jQuery as a dependency, but with the ability to use a plugin to support (what&amp;#39;s becoming) the legacy pattern.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example. The popular jQuery plugin &lt;a href="https://flickity.metafizzy.co/" target="_blank" rel="noopener noreferrer"&gt;Flickity&lt;/a&gt; makes it easy to construct &amp;quot;responsive, flickable carousels&amp;quot; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;$(&amp;#39;.main-carousel&amp;#39;).flickity({
  // options
  cellAlign: &amp;#39;left&amp;#39;,
  contain: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that works fine. Except, &lt;code&gt;Flickity&lt;/code&gt; is not really a just a jQuery plugin. More on that later.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have a Rails application that we&amp;#39;ve already set up to run webpack(er) (or just plain webpack) for compiling JavaScript source files for the browser. To add Flickity, we installed it via yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ yarn add flickity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our module-based webpack build, the usage is instead ideally:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/src/carousel.js

import Flickity from &amp;#39;flickity&amp;#39;;

const flickity = new Flickity(&amp;#39;.main-carousel&amp;#39;, {
  // options
  cellAlign: &amp;#39;left&amp;#39;,
  contain: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this plugin, jQuery is not required. How do we know that though?&lt;/p&gt;

      &lt;h3 id="package-perusal" class="title title-h3"&gt;
        &lt;a name="package-perusal" class="anchor" href="#package-perusal"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Package perusal
      &lt;/h3&gt;
    
&lt;p&gt;The first place to check is the documentation. As is the case for Flickty, there is a great documentation site with examples for both jQuery and vanilla JS initialization.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a screenshot from the &lt;a href="https://flickity.metafizzy.co/" target="_blank" rel="noopener noreferrer"&gt;Flickity homepage&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/flickity-documentation-example.png" alt="Flickity documentation example" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;This is a great hint that we can import the &lt;code&gt;Flickity&lt;/code&gt; constructor without requiring jQuery on the page or in our build.&lt;/p&gt;

&lt;p&gt;If that&amp;#39;s still not enough, the next place to look is the library&amp;#39;s &lt;a href="https://nodesource.com/blog/the-basics-of-package-json-in-node-js-and-npm/#themainproperty" target="_blank" rel="noopener noreferrer"&gt;package.json &lt;code&gt;main&lt;/code&gt; property&lt;/a&gt;. This property describes the &lt;em&gt;entry point&lt;/em&gt; to the package, meaning this is the file that&amp;#39;s loaded when &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; statement is used to access the module.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an excerpt from Flickity&amp;#39;s &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;flickity&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;js/index.js&amp;quot;,
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is saying thath the file &lt;code&gt;path/to/flickity/js/index.js&lt;/code&gt; is the entry point. On my machine from the root of my project, I can open that file at &lt;code&gt;./node_modules/flickity/js/index.js&lt;/code&gt; or on GitHub (&lt;a href="https://github.com/metafizzy/flickity/blob/c67b28accbe0642352c706cb470a8f607fa5861b/js/index.js" target="_blank" rel="noopener noreferrer"&gt;source&lt;/a&gt;) (slightly modified for this article).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( function( window, factory ) {
  if ( typeof define == &amp;#39;function&amp;#39; &amp;amp;&amp;amp; define.amd ) {
    // AMD
    define( [ &amp;#39;./flickity&amp;#39;, &amp;#39;./drag&amp;#39;, &amp;#39;./prev-next-button&amp;#39;, &amp;#39;./page-dots&amp;#39;, &amp;#39;./player&amp;#39;, &amp;#39;./add-remove-cell&amp;#39;, &amp;#39;./lazyload&amp;#39; ], factory );
  } else if ( typeof module == &amp;#39;object&amp;#39; &amp;amp;&amp;amp; module.exports ) {
    // CommonJS
    module.exports = factory( require(&amp;#39;./flickity&amp;#39;), require(&amp;#39;./drag&amp;#39;), require(&amp;#39;./prev-next-button&amp;#39;), require(&amp;#39;./page-dots&amp;#39;), require(&amp;#39;./player&amp;#39;), require(&amp;#39;./add-remove-cell&amp;#39;), require(&amp;#39;./lazyload&amp;#39;));
  }
})( window, function factory( Flickity ) {
  return Flickity;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see this exports a module, either through the &lt;code&gt;define&lt;/code&gt; function, for runtimes that support &lt;a href="https://requirejs.org/docs/whyamd.html" target="_blank" rel="noopener noreferrer"&gt;Asynchronous Module Definition (AMD)&lt;/a&gt; format, or the &lt;code&gt;require&lt;/code&gt; function, for runtimes that support &lt;a href="https://nodejs.org/docs/latest/api/modules.html" target="_blank" rel="noopener noreferrer"&gt;CommonJS&lt;/a&gt; format. webpack supports both.&lt;/p&gt;

      &lt;h3 id="jquery-not-required" class="title title-h3"&gt;
        &lt;a name="jquery-not-required" class="anchor" href="#jquery-not-required"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        jQuery not required
      &lt;/h3&gt;
    
&lt;p&gt;Note also that this file does not require the &lt;code&gt;&amp;#39;jquery&amp;#39;&lt;/code&gt; package. An interesting consequence of this is that it&amp;#39;s not even possible to use Flickity with jQuery (at least via the NPM package alone). This recently came up in a &lt;a href="https://github.com/rails/webpacker/issues/2456" target="_blank" rel="noopener noreferrer"&gt;GitHub issue for the Webpacker project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, the following code with webpack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/src/carousel.js
import &amp;#39;jquery&amp;#39;
import &amp;#39;flickity&amp;#39;

$(&amp;#39;.main-carousel&amp;#39;).flickity({
  // options
  cellAlign: &amp;#39;left&amp;#39;,
  contain: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would result in this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;Uncaught TypeError: $(...).flickity is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This project can produce a separate distribution from the package available via NPM. It takes the form of a file, here called &lt;a href="https://github.com/metafizzy/flickity/blob/c67b28accbe0642352c706cb470a8f607fa5861b/dist/flickity.pkgd.js" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;flickity.pkgd.js&lt;/code&gt;&lt;/a&gt; that is intended for the browser via a script tag. This file contains a &amp;quot;jQuery-fied&amp;quot; version of the underlying vanilla JS constructor which makes it possible to use with jQuery in the browser. For more details, see the &lt;a href="https://github.com/desandro/jquery-bridget" target="_blank" rel="noopener noreferrer"&gt;jquery-bridget&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;A similar approach exists in other plugins including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/desandro/masonry" target="_blank" rel="noopener noreferrer"&gt;masonry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metafizzy/infinite-scroll" target="_blank" rel="noopener noreferrer"&gt;infinite-scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metafizzy/isotope" target="_blank" rel="noopener noreferrer"&gt;isotope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/desandro/draggabilly" target="_blank" rel="noopener noreferrer"&gt;draggabilly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main takeaway here: if the library can be initialized without jQuery, there&amp;#39;s not much reason to use jQuery for that plugin in the first place.&lt;/p&gt;

      &lt;h3 id="conclusion" class="title title-h3"&gt;
        &lt;a name="conclusion" class="anchor" href="#conclusion"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Conclusion
      &lt;/h3&gt;
    
&lt;p&gt;Unfortunately, jQuery plugins come in so many different flavors so not all of them can be used &lt;em&gt;without&lt;/em&gt; jQuery. In future posts, I&amp;#39;ll discuss other techniques you can use to make jQuery work with webpack.&lt;/p&gt;

&lt;p&gt;If you find yourself in this position, make sure to understand the capability of the plugins you&amp;#39;re using. Ask &amp;quot;do I have to use this plugin with jQuery?&amp;quot;, consult the documentation and/or browse the source code as described in the article. If you&amp;#39;re lucky, you may find they can work in either context such that you might not need jQuery at all.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>25 reasons to switch to Webpack(er)</title>
    <link rel="alternate" href="/blog/reasons-to-switch-to-webpacker.html"/>
    <id>/blog/reasons-to-switch-to-webpacker.html</id>
    <published>2020-03-02T00:00:00+00:00</published>
    <updated>2020-03-02T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;​I've been getting this question lately in some form or another:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is webpack and Webpacker worth the hassle?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's a good question, but my short answer is &lt;em&gt;yes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Given the sharp rise of mindshare in the JavaScript community in recent years, there has...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;​I&amp;#39;ve been getting this question lately in some form or another:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is webpack and Webpacker worth the hassle?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a good question, but my short answer is &lt;em&gt;yes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Given the sharp rise of mindshare in the JavaScript community in recent years, there has been a great deal of innovation in tooling, development experience, and optimization for frontend development.&lt;/p&gt;

&lt;p&gt;Rails was once at the forefront—the Rails asset pipeline was a huge leap forward when it was released—but it hasn&amp;#39;t kept up in this department. Outsourcing JavaScript and CSS dependency management and asset bundling is smart economics at this point.&lt;/p&gt;

&lt;p&gt;In this post, I will elaborate on why I think think it&amp;#39;s a good idea to make the switch. But this will assume some prerequisites; in other words, we&amp;#39;ll first consider why you might NOT want to switch and instead stick with the Rails asset pipeline.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://little-fog-6985.ck.page/9c5bc129d8" target="_blank" rel="noopener noreferrer"&gt;Subscribe to my newsletter&lt;/a&gt; to learn more about using webpack with Rails.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="why-not-switch-" class="title title-h3"&gt;
        &lt;a name="why-not-switch-" class="anchor" href="#why-not-switch-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Why not switch?
      &lt;/h3&gt;
    
&lt;p&gt;If you&amp;#39;re a Rails dev and your app is currently using the Rails asset pipeline, here are a few reasons why webpack and Webpacker might not be a good fit for you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don&amp;#39;t have the right application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your application doesn&amp;#39;t use much JavaScript, it&amp;#39;s probably not worth the switch. Do you spend less than 5-10% of your development time working on JavaScript? Your app might not warrant a more substantial tool like webpack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don&amp;#39;t have the time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll be the first to admit that adopting webpack for the first time requires patience. Things work differently than with Sprockets. You may need to invest time learning a new paradigm. webpack and NPM dependencies are upgraded at a rapid pace, so you need to keep up with upgrades. You might also have to understand how JavaScript modules work—good news; those skills are transferrable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don&amp;#39;t have the right mindset&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, webpack is complex. Plenty of developers love to complain about this fact. If you think you&amp;#39;re one of those developers, you probably won&amp;#39;t enjoy the process of adopting webpack. A lot of frustration can be eased through education. Make sure you&amp;#39;ve got a positive attitude going in.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;All that said, given a little time, the need, and the right mindset, you&amp;#39;ll be successful upgrading to Webpacker. Here&amp;#39;s a list of ways you&amp;#39;ll benefit.&lt;/p&gt;

      &lt;h3 id="1-webpacker-is-the-future-of-rails" class="title title-h3"&gt;
        &lt;a name="1-webpacker-is-the-future-of-rails" class="anchor" href="#1-webpacker-is-the-future-of-rails"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        1. Webpacker is the future of Rails
      &lt;/h3&gt;
    
&lt;p&gt;Webpacker is now the default JavaScript compiler for new Rails apps. Rails 6 apps will still include both Sprockets for managing CSS and images, but JavaScript dependencies are meant to be bundled by Webpacker. The Rails defaults fall in line with how Basecamp builds web applications, and it may benefit your team to &amp;quot;go with the herd&amp;quot; to stay closer to Rails edge and attract candidates who are looking to work with more advanced tools.&lt;/p&gt;

      &lt;h3 id="2-sprockets-is-dead-long-live-sprockets" class="title title-h3"&gt;
        &lt;a name="2-sprockets-is-dead-long-live-sprockets" class="anchor" href="#2-sprockets-is-dead-long-live-sprockets"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        2. Sprockets is dead; Long live Sprockets
      &lt;/h3&gt;
    
&lt;p&gt;Sprockets development may have slowed in recent years, but it&amp;#39;s not going away anytime soon. Sprockets version 4 was recently released, thanks to hard work led by Richard Schneeman. The default Rails setup encourages developers to use both Webpacker (for JavaScript compilation) and Sprockets (for CSS and images) side-by-side.&lt;/p&gt;

&lt;p&gt;The ability to use both compilers in the same application is a real advantage for teams making the switch; this opens the door to an iterative migration, which may be desirable to de-risk the transition.&lt;/p&gt;

      &lt;h3 id="3-it-will-change-the-way-you-write-javascript-for-the-better" class="title title-h3"&gt;
        &lt;a name="3-it-will-change-the-way-you-write-javascript-for-the-better" class="anchor" href="#3-it-will-change-the-way-you-write-javascript-for-the-better"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        3. It will change the way you write JavaScript for the better
      &lt;/h3&gt;
    
&lt;p&gt;Prior to Rails support for webpack through Webpacker, most of the Rails apps I&amp;#39;ve worked on or seen either directly on GitHub or implicitly through tutorials or presentations, have fallen into one of the following categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;jQuery spaghetti&lt;/li&gt;
&lt;li&gt;Bespoke module implementation&lt;/li&gt;
&lt;li&gt;Combination of 1. and 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What&amp;#39;s wrong with this approach?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accidentally leaking JavaScript into the global scope&lt;/li&gt;
&lt;li&gt;Difficult to share code&lt;/li&gt;
&lt;li&gt;Order-dependence when requiring code&lt;/li&gt;
&lt;li&gt;Very difficult to understand the implicit dependency graph&lt;/li&gt;
&lt;li&gt;Very difficult to load code asynchronously&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Writing your JavaScript source code within a module system allows you to take advantage of module scope within each file, i.e., no accidental leaking of code into the global scope. No more bespoke module implementations.&lt;/p&gt;

      &lt;h3 id="4-enjoy-the-power-of-es-modules" class="title title-h3"&gt;
        &lt;a name="4-enjoy-the-power-of-es-modules" class="anchor" href="#4-enjoy-the-power-of-es-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        4. Enjoy the power of ES modules
      &lt;/h3&gt;
    
&lt;p&gt;There seems to be little doubt now that ES modules are the future of JavaScript. As the new EcmaScript standard, eventually, we&amp;#39;ll be able to use ES modules in browser and server-side runtimes, like Node.js. With support for both synchronous and asynchronous imports, they may eventually phase out early module specifications, like CommonJS and AMD altogether.&lt;/p&gt;

&lt;p&gt;Of note, ES modules employ live bindings, meaning when an exported module changes a value, it can be read in the importing module. In addition to being useful potentially for application logic, this feature allows ES modules to support cyclic dependencies.&lt;/p&gt;

&lt;p&gt;For more on how ES modules work, check out &lt;a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/" target="_blank" rel="noopener noreferrer"&gt;this cartoon deep dive&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="5-javascript_framework-not-required" class="title title-h3"&gt;
        &lt;a name="5-javascript_framework-not-required" class="anchor" href="#5-javascript_framework-not-required"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        5. $JAVASCRIPT_FRAMEWORK not required
      &lt;/h3&gt;
    
&lt;p&gt;Contrary to popular belief, you don&amp;#39;t need to use a popular frontend framework, React, Vue, Angular, or Svelte, to take advantage of what webpack has to offer. It works just great with &amp;quot;vanilla JS&amp;quot; or even jQuery-based apps.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/no-framework-required.png" alt="Webpack and JS" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t believe single-page applications are worth the extra effort and complexity for the majority of CRUD-based apps—the Rails sweet-spot. Employing &amp;quot;JavaScript sprinkles&amp;quot; still makes a lot of sense in 2020, and webpack should be considered an advantage.&lt;/p&gt;

      &lt;h3 id="6-take-advantage-of-alternative-file-structures" class="title title-h3"&gt;
        &lt;a name="6-take-advantage-of-alternative-file-structures" class="anchor" href="#6-take-advantage-of-alternative-file-structures"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        6. Take advantage of alternative file structures
      &lt;/h3&gt;
    
&lt;p&gt;Webpack opens the door to a great deal of customization of how JavaScript source files are structured. Perhaps the most popular JavaScript framework, React.js, introduced us to JSX, which allows developers to challenge the old notion of separation of concerns to write HTML-like JavaScript code to co-locate HTML and JavaScript source for components.&lt;/p&gt;

&lt;p&gt;Vue.js is famous, in part, for its support for Single File Components, which allows developers to co-locate HTML, CSS, and JavaScript as separate portions of a single file.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="vue"&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;Hello, {{ name }}!&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      name: &amp;quot;World&amp;quot;
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
div {
  background-color: aliceblue;
  padding: 1em;
  font-size: 2em;
  text-align: center;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not (to my knowledge) an approach that would be easily handled in the Rails asset pipeline.&lt;/p&gt;

      &lt;h3 id="7-you-39-ll-have-a-better-way-to-manage-dependencies" class="title title-h3"&gt;
        &lt;a name="7-you-39-ll-have-a-better-way-to-manage-dependencies" class="anchor" href="#7-you-39-ll-have-a-better-way-to-manage-dependencies"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        7. You&amp;#39;ll have a better way to manage dependencies
      &lt;/h3&gt;
    
&lt;p&gt;I&amp;#39;ve always found Rails &amp;quot;asset gems&amp;quot; to be a significant pain. In most cases, you can replace your asset gems with Node Package Manager, or NPM, dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/npm-logo.png" alt="NPM logo" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;NPM has become the primary repository for distributing open-source JavaScript packages. Although initially designed for packages intended to be used with the Node.js runtime, over time, it has also become the default for browser-based packages. This means that both libraries that run on Node.js, like webpack, and libraries in the browser, like React, Vue, and jQuery, can all be distributed over NPM. Using NPM is a vast improvement over the typical for sharing JavaScript and other assets for the Rails asset pipeline. One significant point of friction with the latter approach is having to maintain both a Ruby version along with the version of the packaged assets. This technique has always felt cumbersome and bolted on.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s worth mentioning that you can still try managing assets via NPM and make them available to the Rails asset pipeline by adding node_modules to the Sprockets load path. Again, this approach is cumbersome and can potentially adversely affect build times depending on scope.&lt;/p&gt;

      &lt;h3 id="8-stop-using-jquery-plugins-if-you-want-" class="title title-h3"&gt;
        &lt;a name="8-stop-using-jquery-plugins-if-you-want-" class="anchor" href="#8-stop-using-jquery-plugins-if-you-want-"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        8. Stop using jQuery plugins (if you want)
      &lt;/h3&gt;
    
&lt;p&gt;One benefit of jQuery plugins before the adoption of modules is that it provided a means to add functionality without polluting the global scope. With a proper module system, as you&amp;#39;d get with webpack, you need not attach functionality to the jQuery instance to reference it across the application.&lt;/p&gt;

&lt;p&gt;Consider the touch-responsive carousel plugin &lt;a href="https://flickity.metafizzy.co/" target="_blank" rel="noopener noreferrer"&gt;Flickity&lt;/a&gt;. In the Rails asset pipeline, you might use it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;//= require flickity

$(function () {
  $(&amp;#39;.main-carousel&amp;#39;).flickity({
    contain: true
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flickity is also intended to work without jQuery, meaning you can implement the Flickity module in a webpack environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import Flickity from &amp;#39;flickity&amp;#39;

document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, () =&amp;gt; {
  const elem = document.querySelector(&amp;#39;.main-carousel&amp;#39;);
  const flkty = new Flickity(elem, {
    contain: true
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can leave the jQuery out of this interaction altogether.&lt;/p&gt;

      &lt;h3 id="9-compile-es2015-syntax-to-es5-with-babel" class="title title-h3"&gt;
        &lt;a name="9-compile-es2015-syntax-to-es5-with-babel" class="anchor" href="#9-compile-es2015-syntax-to-es5-with-babel"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        9. Compile ES2015+ syntax to ES5 with Babel
      &lt;/h3&gt;
    
&lt;p&gt;CoffeeScript was popular when it was first introduced because it offered a cleaner, Ruby-ish syntax. Many of these ideas and more have made there was into recent versions of EcmaScript. I love writing JavaScript in ES syntax even more than I loved CoffeeScript.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a shortlist of just some of the great ways the language is evolving:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ES2015+ is a superset of ES5, so all your current ES5 code is also ES2015+ code&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;var&lt;/code&gt; with scope-constrained &lt;code&gt;let/const&lt;/code&gt; &lt;a href="https://exploringjs.com/es6/ch_variables.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_variables.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Destructuring, Replace &lt;code&gt;arguments&lt;/code&gt; with ...rest parameters, &lt;a href="https://exploringjs.com/es6/ch_destructuring.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_destructuring.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;concat()&lt;/code&gt; with (...) spread operator&lt;/li&gt;
&lt;li&gt;Replace constructors with classes &lt;a href="https://exploringjs.com/es6/ch_classes.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Arrow functions &lt;a href="https://exploringjs.com/es6/ch_arrow-functions.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_arrow-functions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New OOP features &lt;a href="https://exploringjs.com/es6/ch_oop-besides-classes.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_oop-besides-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replace function expressions in object literals to method definitions &lt;a href="https://exploringjs.com/es6/ch_oop-besides-classes.html#sec_new-features-obj-literals" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_oop-besides-classes.html#sec_new-features-obj-literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New array and string methods, new number and Math features

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/es6/ch_arrays.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_arrays.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/es6/ch_strings.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_strings.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/es6/ch_numbers.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_numbers.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New primitive type Symbol &lt;a href="https://exploringjs.com/es6/ch_symbols.html#sec_overview-symbols" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_symbols.html#sec_overview-symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Template literals &lt;a href="https://exploringjs.com/es6/ch_template-literals.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_template-literals.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generators &lt;a href="https://exploringjs.com/es6/ch_generators.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_generators.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Proper Maps and Sets &lt;a href="https://exploringjs.com/es6/ch_maps-sets.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_maps-sets.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;for-of loop &lt;a href="https://exploringjs.com/es6/ch_for-of.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_for-of.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Promises &lt;a href="https://exploringjs.com/es6/ch_promises.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_promises.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Proxies, for metaprogramming &lt;a href="https://exploringjs.com/es6/ch_proxies.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es6/ch_proxies.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="10-opt-in-out-of-experimental-es-features" class="title title-h3"&gt;
        &lt;a name="10-opt-in-out-of-experimental-es-features" class="anchor" href="#10-opt-in-out-of-experimental-es-features"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        10. Opt-in/out of experimental ES features
      &lt;/h3&gt;
    
&lt;p&gt;The Babel integration allows developers to take advantage of next-level and experimental EcmaScript syntax.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;async/await &lt;a href="https://exploringjs.com/es2016-es2017/ch_async-functions.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es2016-es2017/ch_async-functions.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;decorators &lt;a href="https://www.simplethread.com/understanding-js-decorators/" target="_blank" rel="noopener noreferrer"&gt;https://www.simplethread.com/understanding-js-decorators/&lt;/a&gt;, &lt;a href="https://www.sitepoint.com/javascript-decorators-what-they-are/" target="_blank" rel="noopener noreferrer"&gt;https://www.sitepoint.com/javascript-decorators-what-they-are/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;spread operator for object literals &lt;a href="https://exploringjs.com/es2018-es2019/ch_rest-spread-properties.html" target="_blank" rel="noopener noreferrer"&gt;https://exploringjs.com/es2018-es2019/ch_rest-spread-properties.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="11-target-specific-browser-versions" class="title title-h3"&gt;
        &lt;a name="11-target-specific-browser-versions" class="anchor" href="#11-target-specific-browser-versions"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        11. Target specific browser versions
      &lt;/h3&gt;
    
&lt;p&gt;Imagine how great it would be if you could code-ify your application&amp;#39;s supported browsers? Well, with Webpacker, you can.&lt;/p&gt;

&lt;p&gt;Babel integrates with a package called browserlist, which allows projects to codify the browsers they wish to target with their transpiled code. Developers set their version lists using queries, which can target specific browser versions or use semantics like &lt;code&gt;last 2 versions&lt;/code&gt; to avoid updating versions manually. Browserslist uses data provided by &lt;a href="https://caniuse.com/" target="_blank" rel="noopener noreferrer"&gt;Can I Use&lt;/a&gt; to determine browser support for newer frontend APIs.&lt;/p&gt;

&lt;p&gt;Now we can write future JS syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const array = [1, 2, 3];
const [first, second] = array;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Babel will compile it for Edge 16:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const array = [1, 2, 3];
const first = array[0],
      second = array[1];
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Browserlist: &lt;a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener noreferrer"&gt;https://github.com/browserslist/browserslist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="12-polyfill-newer-browser-apis" class="title title-h3"&gt;
        &lt;a name="12-polyfill-newer-browser-apis" class="anchor" href="#12-polyfill-newer-browser-apis"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        12. Polyfill newer browser APIs
      &lt;/h3&gt;
    
&lt;p&gt;Building on number 11, Webpacker&amp;#39;s use of &lt;code&gt;@babel/preset-env&lt;/code&gt; to makes it possible to specify more easily what new JavaScript APIs to polyfill automatically.&lt;/p&gt;

&lt;p&gt;It works by inserting this code at the top of your dependency graph:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import &amp;#39;core-js/stable&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;chrome 71&lt;/code&gt; is targeted, then this will get replaced with:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import &amp;quot;core-js/modules/es.array.unscopables.flat&amp;quot;
import &amp;quot;core-js/modules/es.array.unscopables.flat-map&amp;quot;
import &amp;quot;core-js/modules/es.object.from-entries&amp;quot;
import &amp;quot;core-js/modules/web.immediate&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can start removing those conditionals you&amp;#39;ve been adding to test for browser support.&lt;/p&gt;

      &lt;h3 id="13-use-typescript" class="title title-h3"&gt;
        &lt;a name="13-use-typescript" class="anchor" href="#13-use-typescript"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        13. Use TypeScript
      &lt;/h3&gt;
    
&lt;p&gt;&lt;a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer"&gt;TypeScript&lt;/a&gt; has gained in popularity in recent years.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/typescript-superset.png" alt="TypeScript is a superset of JavaScript" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;It brings static-typing to frontend development, allowing developers to catch errors more efficiently and productivity gains via integrations with supporting JavaScript IDEs, like VS Code. It&amp;#39;s even possible to adopt TypeScript iteratively; as a superset of plain JavaScript, any valid JavaScript program is a valid TypeScript program. Webpacker provides an installer to make it easier to add to your Rails project.&lt;/p&gt;

      &lt;h3 id="14-unlock-powerful-new-tools" class="title title-h3"&gt;
        &lt;a name="14-unlock-powerful-new-tools" class="anchor" href="#14-unlock-powerful-new-tools"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        14. Unlock powerful new tools
      &lt;/h3&gt;
    
&lt;p&gt;The webpack compilation and build process provide a large number of hooks to allow behavior modification at nearly any stage. Here is a shortlist of ways you can extend webpack to meet the needs of your system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unit testing through the Rails asset pipeline has always felt like jumping through hoops; now, take your pick of JavaScript unit testing tools like &lt;a href="https://mochajs.org/" target="_blank" rel="noopener noreferrer"&gt;Mocha&lt;/a&gt; or &lt;a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer"&gt;Jest&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Integrate with &lt;a href="https://eslint.org/" target="_blank" rel="noopener noreferrer"&gt;eslint&lt;/a&gt; to standardize code style and syntax and automate fixes&lt;/li&gt;
&lt;li&gt;Add a plugin to analyze the size and contents of your bundles, e.g. &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer"&gt;WebpackBundlerAnalyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a loader to parse your Rails i18n yaml files and provide them as JSON to your webpack JavaScript modules&lt;/li&gt;
&lt;li&gt;Add a plugin to produce &amp;quot;unfingerprinted&amp;quot; clones of your bundles, as with &lt;a href="https://github.com/alexspeller/non-stupid-digest-assets" target="_blank" rel="noopener noreferrer"&gt;https://github.com/alexspeller/non-stupid-digest-assets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of my favorite webpack-friendly addons is &lt;a href="https://storybook.js.org" target="_blank" rel="noopener noreferrer"&gt;Storybook&lt;/a&gt;. It&amp;#39;s a newer tool that allows developers to build components in isolation from the Rails server. This is a great way to represent your UI in various states all in one place without having to mess with real data in your development environment.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/storybook-logo.png" alt="Storybook logo" loading="lazy" /&gt;&lt;/p&gt;

      &lt;h3 id="15-modify-source-code-programmatically" class="title title-h3"&gt;
        &lt;a name="15-modify-source-code-programmatically" class="anchor" href="#15-modify-source-code-programmatically"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        15. Modify source code programmatically
      &lt;/h3&gt;
    
&lt;p&gt;Webpack provides some configuration options that make it easy to modify the output of a module. For example, to &amp;quot;provide&amp;quot; the jQuery import to all modules in your source files, you can add the &lt;code&gt;ProvidePlugin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This becomes important if you&amp;#39;re attempting to upgrade a legacy Rails app to webpack. Many older jQuery plugins, for example, assume jQuery is available in the global scope. The &lt;code&gt;ProvidePlugin&lt;/code&gt; configured as follows will instruct webpack to &amp;quot;shim&amp;quot; legacy modules with a &lt;code&gt;require(&amp;#39;jquery&amp;#39;)&lt;/code&gt; statement if necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

const webpack = require(&amp;#39;webpack&amp;#39;);

const {environment} = require(&amp;#39;@rails/webpacker&amp;#39;);

environment.plugins.append(
  &amp;#39;jquery&amp;#39;, // arbitrary name
   new webpack.ProvidePlugin({
    $: &amp;#39;jquery&amp;#39;,
    jQuery: &amp;#39;jquery&amp;#39;,
    &amp;#39;window.jQuery&amp;#39;: &amp;#39;jquery&amp;#39;
   }),
);

module.exports = environment;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/guides/shimming/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/guides/shimming/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="16-you-can-still-quot-require_tree-quot-and-then-some" class="title title-h3"&gt;
        &lt;a name="16-you-can-still-quot-require_tree-quot-and-then-some" class="anchor" href="#16-you-can-still-quot-require_tree-quot-and-then-some"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        16. You can still &amp;quot;require_tree&amp;quot; and then some
      &lt;/h3&gt;
    
&lt;p&gt;Sprockets comes with a few conveniences for including files in your asset bundles, including &lt;code&gt;require_tree&lt;/code&gt;. Similarly, webpack also has a function for including multiple files in a single statement: &lt;code&gt;require.context&lt;/code&gt;. Though more tedious, it&amp;#39;s even more powerful. It provides a file filter option, say if you only want to import &lt;code&gt;.svg&lt;/code&gt; files. You can also operate on the return value.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;require.context(directory, useSubdirectories = true, regExp = /^\.\/.*$/, mode = &amp;#39;sync&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example: require all the test files in the current and nested directories.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;require.context(&amp;#39;.&amp;#39;, true, /\.test\.js$/);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example: import all the default exports in the current directory and re-export as named modules&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;const requireModule = require.context(&amp;#39;.&amp;#39;, false, /.js$/)

context.keys().forEach(filename =&amp;gt; {
  const moduleConfig = requireModule(filename)

  // Get PascalCase name of module from filename
  const moduleName = upperFirst(
    camelCase(
      filename.replace(/\.\//, &amp;#39;&amp;#39;).replace(/\.\w+$/, &amp;#39;&amp;#39;)
    )
  )

  export {[moduleName]: moduleConfig.default}
})
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/guides/dependency-management/#requirecontext" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/guides/dependency-management/#requirecontext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="17-automatic-static-code-splitting" class="title title-h3"&gt;
        &lt;a name="17-automatic-static-code-splitting" class="anchor" href="#17-automatic-static-code-splitting"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        17. Automatic static code splitting
      &lt;/h3&gt;
    
&lt;p&gt;In Sprockets, a common technique to reduce bundle size and improve cacheability is to move all the vendor code into a separate bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- app/views/layouts.application.html.erb --&amp;gt;
&amp;lt;%= javascript_include_tag &amp;quot;vendor&amp;quot; %&amp;gt;
&amp;lt;%= javascript_include_tag &amp;quot;application&amp;quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One headache with this approach is having to manually account divvy up the bundles and take great care to avoid load order issues or omitting key dependencies.&lt;/p&gt;

&lt;p&gt;Since webpack statically analyzes your source code to build its dependency graph(s), it can also be configured to create separate bundles for vendored and application code automatically. This means, from a single &amp;quot;pack&amp;quot;, webpack will produce the vendor and application bundles for you, along with the webpack runtime. Webpacker helpers and config can be used as follows to enable this behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js

const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

environment.splitChunks()

module.exports = environment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;

&amp;lt;%= javascript_packs_with_chunks_tag &amp;quot;application&amp;quot; %&amp;gt;
&amp;lt;!--
&amp;lt;script src=&amp;quot;/packs/vendor-16838bab065ae1e314.chunk.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/packs/application~runtime-16838bab065ae1e314.chunk.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/packs/application-1016838bab065ae1e314.chunk.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
!&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No more manual code splitting.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/plugins/split-chunks-plugin/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="18-automatic-dynamic-code-splitting" class="title title-h3"&gt;
        &lt;a name="18-automatic-dynamic-code-splitting" class="anchor" href="#18-automatic-dynamic-code-splitting"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        18. Automatic dynamic code splitting
      &lt;/h3&gt;
    
&lt;p&gt;An even better option to split your JavaScript code over multiple files is to use &amp;quot;dynamic imports&amp;quot;. This approach requires absolutely zero config changes. It is the very reason that webpack&amp;#39;s creator made webpack in the first place.&lt;/p&gt;

&lt;p&gt;When webpack detects a dynamic import function, like the following, in your application code, it will create a separate bundle for that import and load it asynchronously when that code is executed in the browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import(&amp;#39;pdfjs/webpack&amp;#39;).then(({default: pdfjs}) =&amp;gt; { // async import!
  pdfjs.getDocument(&amp;#39;https://example.com/some.pdf&amp;#39;)  // ...
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This technique can help reduce initial download size, help avoid loading JavaScript code unnecessarily, and potentially improve time-to-interactive metric.&lt;/p&gt;

      &lt;h3 id="19-use-state-of-the-art-css-processing" class="title title-h3"&gt;
        &lt;a name="19-use-state-of-the-art-css-processing" class="anchor" href="#19-use-state-of-the-art-css-processing"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        19. Use state-of-the-art CSS processing
      &lt;/h3&gt;
    
&lt;p&gt;If you&amp;#39;ve used Rails long enough, there&amp;#39;s a good chance you&amp;#39;ve adopted SASS or SCSS and you may love it. That&amp;#39;s fine! Webpacker supports SASS/SCSS by default. That said, Webpacker also integrates with a newer tool called &lt;a href="https://postcss.org/" target="_blank" rel="noopener noreferrer"&gt;PostCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/postcss-logo.png" alt="PostCSS logo" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;PostCSS, relatively new on the scene, allows developers to transform CSS with JavaScript. It&amp;#39;s a pluggable tool that can be configured to enable various capabilities; webpack configures PostCSS to apply some fixes for flexbox bugs and to use a preset-env plugin to polyfill newer CSS capabilities for older browsers, similarly to @babel/preset-env does for JavaScript.&lt;/p&gt;

&lt;p&gt;One of my favorite PostCSS plugins is PurgeCSS, which lets you delete unused CSS by comparing your CSS with your HTML markup and/or templates. Such a tool is invaluable when adopting a framework like TailwindCSS, which provides a ton of utility classes, many of which you&amp;#39;re unlikely to use in production code.&lt;/p&gt;

      &lt;h3 id="20-get-asset-compilation-out-of-the-rails-developer-server" class="title title-h3"&gt;
        &lt;a name="20-get-asset-compilation-out-of-the-rails-developer-server" class="anchor" href="#20-get-asset-compilation-out-of-the-rails-developer-server"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        20. Get asset compilation out of the Rails developer server
      &lt;/h3&gt;
    
&lt;p&gt;With Sprockets in development, automatic compilation and recompilation of static assets is handled through the Rails server. This can become a bottleneck with the ruby process doing double-duty. With the webpack-dev-server, however, asset compilation moves into a separate process so asset compilation can occur independently of the Rails server responding to requests.&lt;/p&gt;

&lt;p&gt;The webpack-dev-server is a simple Node.js web server that watches for file changes in your source code directory, triggers webpack to recompile when changes are detected, and serves the compiles assets from memory. It can also, via websocket listener automatically inserted in the browser, autoreload the development browser window when autocompilation completes, if desired.&lt;/p&gt;

      &lt;h3 id="21-update-code-in-development-without-reloading-the-page" class="title title-h3"&gt;
        &lt;a name="21-update-code-in-development-without-reloading-the-page" class="anchor" href="#21-update-code-in-development-without-reloading-the-page"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        21. Update code in development without reloading the page
      &lt;/h3&gt;
    
&lt;p&gt;Imagine being able to replace the implementation of a JavaScript module in the browser without having to reload the page. That&amp;#39;s &lt;a href="https://webpack.js.org/guides/hot-module-replacement/" target="_blank" rel="noopener noreferrer"&gt;Hot Module Replacement&lt;/a&gt; (HMR). Not only does this allow for near-instant updates of only code that&amp;#39;s changed, but the application and DOM state is retained, meaning there&amp;#39;s no need for extra clicks and typing to achieve the desired UI state. There are some &lt;a href="https://webpack.js.org/guides/hot-module-replacement/#gotchas" target="_blank" rel="noopener noreferrer"&gt;gotchas&lt;/a&gt; to be aware of when using this tool, but generally speaking, it&amp;#39;s a powerful way to speed up development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documentation: &lt;a href="https://webpack.js.org/concepts/hot-module-replacement/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/concepts/hot-module-replacement/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="22-take-advantage-of-source-map-options" class="title title-h3"&gt;
        &lt;a name="22-take-advantage-of-source-map-options" class="anchor" href="#22-take-advantage-of-source-map-options"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        22. Take advantage of source map options
      &lt;/h3&gt;
    
&lt;p&gt;Given your JavaScript and CSS source code may be written in one form but compiled to another in development and production, source maps can help fill the gap. Most evergreen browsers support the loading and rendering of source maps in the browser dev tools to allow developers to link the code that&amp;#39;s loaded in the browser to the code that lives in your source. It&amp;#39;s a really good tool to have in your toolbelt.&lt;/p&gt;

&lt;p&gt;Sprockets recently brought source maps to the Rails asset pipeline. In webpack, they&amp;#39;ve been there since its early days and they&amp;#39;re highly customizable; there are over twenty types of source maps supported in webpack meaning there&amp;#39;s a strategy for almost every use case. One reason for this much variety is that source maps must be generated as a separate file from your ass bundles so there&amp;#39;s a build performance cost. You can save time with the tradeoff of fidelity.&lt;/p&gt;

&lt;p&gt;The main point is with webpack you&amp;#39;ve got a ton of choice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WTF is a source map? &lt;a href="https://schneems.com/2017/11/14/wtf-is-a-source-map/" target="_blank" rel="noopener noreferrer"&gt;https://schneems.com/2017/11/14/wtf-is-a-source-map/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to source maps in sprockets: &lt;a href="https://github.com/rails/sprockets/blob/master/guides/source_maps.md" target="_blank" rel="noopener noreferrer"&gt;https://github.com/rails/sprockets/blob/master/guides/source_maps.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;webpack source map documentation: &lt;a href="https://webpack.js.org/configuration/devtool/" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/configuration/devtool/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="23-implement-performance-budgets" class="title title-h3"&gt;
        &lt;a name="23-implement-performance-budgets" class="anchor" href="#23-implement-performance-budgets"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        23. Implement performance budgets
      &lt;/h3&gt;
    
&lt;p&gt;The first rule of optimization is &amp;quot;Measure first.&amp;quot; When it comes to optimizing frontend performance, the first developer I look to for advice is &lt;a href="https://addyosmani.com/" target="_blank" rel="noopener noreferrer"&gt;Addy Osmani&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/perf-budget-metrics.png" alt="Performance Budget Images" loading="lazy" /&gt;&lt;/p&gt;

&lt;p&gt;One of his key strategies for measuring frontend performance is &amp;quot;performance budgeting&amp;quot; and how this relates to  &amp;quot;time-to-interactive&amp;quot; (TTI). The thinking is you may be able to put a value on the TTI experienced by users of your application. That value closely correlates with the amount of JavaScript you force your users&amp;#39; browsers to download and execute. By limiting the payload size of the initial download, you may be able to improve TTI.&lt;/p&gt;

&lt;p&gt;What does this have to do with webpack? Not only does webpack make it easier to split up your bundles, as we saw with the code splitting sections above, but it also provides built-in support for &lt;a href="https://medium.com/webpack/webpack-performance-budgets-13d4880fbf6d" target="_blank" rel="noopener noreferrer"&gt;performance budgets&lt;/a&gt;. You can customize webpack to print a warning or even raise an error if any bundle exceeds the configured &lt;code&gt;maxEntryPointSize&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start performance budgeting &lt;a href="https://addyosmani.com/blog/performance-budgets/" target="_blank" rel="noopener noreferrer"&gt;https://addyosmani.com/blog/performance-budgets/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cost of JavaScript 2019 &lt;a href="https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4" target="_blank" rel="noopener noreferrer"&gt;https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="24-peek-inside-the-bundles" class="title title-h3"&gt;
        &lt;a name="24-peek-inside-the-bundles" class="anchor" href="#24-peek-inside-the-bundles"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        24. Peek inside the bundles
      &lt;/h3&gt;
    
&lt;p&gt;One of my favorite tools for debugging webpack is the &lt;code&gt;webpack-bundler-analyzer&lt;/code&gt;. Add this to your build and it will generate an interactive treemap that visualizes the relative size and contents of all your bundles. Wondering how much &lt;code&gt;lodash&lt;/code&gt; is adding to your overall bundle size? Use the bundle analyzer tool. Think there&amp;#39;s a bug in with one of your dependencies or in your webpack output? The bundle analyzer may help you identify it.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/webpack-bundle-analyzer.gif" alt="An example of a webpack Bundle Analyzer treemap" loading="lazy" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer"&gt;https://github.com/webpack-contrib/webpack-bundle-analyzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="25-shaking-the-tree" class="title title-h3"&gt;
        &lt;a name="25-shaking-the-tree" class="anchor" href="#25-shaking-the-tree"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        25. Shaking the tree
      &lt;/h3&gt;
    
&lt;p&gt;I&amp;#39;d be remiss if I didn&amp;#39;t mention one of the favorite JavaScript bundle buzzwords, &lt;strong&gt;tree shaking&lt;/strong&gt;. All this means is that webpack can remove unused code from your build when certain conditions are met. This typically means that the module(s) in question is an ES module, that Babel is configured to handle ES modules, and that there are no side effects from importing the module.&lt;/p&gt;

&lt;p&gt;A good use case for tree shaking is &lt;code&gt;lodash&lt;/code&gt;. When loaded in its entirety, the library adds around 75 kb to the resulting asset bundle.&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import _ from &amp;#39;lodash&amp;#39; // OR

import {map, uniq, tail} from &amp;#39;lodash&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following approach allows webpack to limit the resulting file size:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import map from &amp;#39;lodash/map&amp;#39;
import uniq from &amp;#39;lodash/uniq&amp;#39;
import tail from &amp;#39;lodash/tail&amp;#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Lessons on tree-shaking Lodash with webpack and Babel &lt;a href="https://www.azavea.com/blog/2019/03/07/lessons-on-tree-shaking-lodash/" target="_blank" rel="noopener noreferrer"&gt;https://www.azavea.com/blog/2019/03/07/lessons-on-tree-shaking-lodash/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="wrapping-up" class="title title-h3"&gt;
        &lt;a name="wrapping-up" class="anchor" href="#wrapping-up"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Wrapping up
      &lt;/h3&gt;
    
&lt;p&gt;There it is. I hope this has been a worthy introduction to some exciting possibilities and use cases for adopting webpack in your Rails app via Webpacker. Like I said earlier, there is a tradeoff that comes with the overhead of managing many smaller JavaScript dependencies along with overcoming the &amp;quot;barrier to entry&amp;quot; in getting up to speed with how webpack works.&lt;/p&gt;

&lt;p&gt;I, for one, feel the tradeoffs have been worthwhile.&lt;/p&gt;
</content>
  </entry>
</feed>
