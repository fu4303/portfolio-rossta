<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rossta.net</title>
  <subtitle>Ross Kaffenberger</subtitle>
  <id>https://rossta.net/</id>
  <link href="https://rossta.net/"/>
  <link href="https://rossta.net/feed.xml" rel="self"/>
  <updated>2020-01-29T00:00:00+00:00</updated>
  <author>
    <name>Ross Kaffenberger</name>
  </author>
  <entry>
    <title>A guide to NPM version constraints for Rubyists</title>
    <link rel="alternate" href="/blog/npm-version-constraints-for-rubyists.html"/>
    <id>/blog/npm-version-constraints-for-rubyists.html</id>
    <published>2020-01-29T00:00:00+00:00</published>
    <updated>2020-01-29T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;In this post, I want to answer the following question for Rubyists:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What do the tilde &lt;code&gt;~&lt;/code&gt; and caret &lt;code&gt;^&lt;/code&gt; designations mean for version constraints in a &lt;code&gt;package.json&lt;/code&gt; file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rubyists typically use a &lt;code&gt;Gemfile&lt;/code&gt; to declare Ruby dependencies for a project. For...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In this post, I want to answer the following question for Rubyists:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What do the tilde &lt;code&gt;~&lt;/code&gt; and caret &lt;code&gt;^&lt;/code&gt; designations mean for version constraints in a &lt;code&gt;package.json&lt;/code&gt; file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rubyists typically use a &lt;code&gt;Gemfile&lt;/code&gt; to declare Ruby dependencies for a project. For a JavaScript project, it&amp;#39;s typical to use a &lt;code&gt;package.json&lt;/code&gt; file. Some projects use both. For example, a newly created Rails 6 application will have generated a package.json file because, by default, it ships with Webpack and related NPM dependencies to compile JavaScript assets.&lt;/p&gt;

&lt;p&gt;It might include a section like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&amp;quot;dependencies&amp;quot;: {
  &amp;quot;@rails/ujs&amp;quot;: &amp;quot;^6.0.0&amp;quot;,
  &amp;quot;@rails/webpacker&amp;quot;: &amp;quot;~4.2.1&amp;quot;,
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wrote this post to help Rubyists navigate version constraint syntax in their package.json files.&lt;/p&gt;

      &lt;h2 id="version-constraints-in-gemfile" class="title title-h2"&gt;
        &lt;a name="version-constraints-in-gemfile" class="anchor" href="#version-constraints-in-gemfile"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Version constraints in Gemfile
      &lt;/h2&gt;
    
&lt;p&gt;Like the &lt;code&gt;Gemfile&lt;/code&gt;, package.json has a convention to specify version constraints. Both Ruby and NPM dependencies usually follow SemVer, that will format a constraint as &lt;code&gt;major.minor.patch&lt;/code&gt;, i.e. the declaration &lt;code&gt;&amp;quot;webpack&amp;quot;: &amp;quot;4.41.2&amp;quot;&lt;/code&gt; indicates Webpack major version 4, minor version 41, and patch version 2.&lt;/p&gt;

&lt;p&gt;Where they differ is in the use of special characters to declare acceptable ranges. Let&amp;#39;s refresh the conventions used in the Gemfile.&lt;/p&gt;

&lt;p&gt;To lock a gem dependency to an exact version, we would declare the gem&amp;#39;s name and its version as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;4.7.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more optimistic constraint would be to provide an open-ended range that will install or update to a version of the gem that satisfies the range.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;&amp;gt;= 4.7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To limit the upper end of the range, say, to allow minor updates up to the next major version:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;&amp;gt;= 4.7&amp;quot;, &amp;quot;&amp;lt; 5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This format has a shorthand notation, the squiggly arrow &lt;code&gt;~&amp;gt;&lt;/code&gt;, or the pessimistic version constraint.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;, &amp;quot;~&amp;gt; 4.7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upper end of the range is determined by the smallest level of the declared constraint. For example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~&amp;gt; 4.7.1&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;= 4.7.1&amp;quot;, &amp;quot;&amp;lt; 4.8.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~&amp;gt; 4.7&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;= 4.7.0&amp;quot;, &amp;quot;&amp;lt; 5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~&amp;gt; 4&amp;quot;&lt;/code&gt;     matches &lt;code&gt;&amp;quot;&amp;gt;= 4.0.0&amp;quot;, &amp;quot;&amp;lt; 5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To specify &amp;quot;no constraint&amp;quot;, simply omit the version argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;gem &amp;quot;devise&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more info, check out &lt;a href="https://guides.rubygems.org/patterns/#declaring-dependencies" target="_blank" rel="noopener noreferrer"&gt;the guide on RubyGems&lt;/a&gt;.&lt;/p&gt;

      &lt;h2 id="version-constraints-in-package-json" class="title title-h2"&gt;
        &lt;a name="version-constraints-in-package-json" class="anchor" href="#version-constraints-in-package-json"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Version constraints in package.json
      &lt;/h2&gt;
    
&lt;p&gt;NPM conventions provide similar flexibility with alternate syntax.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s consider a package.json file that declares &lt;code&gt;@rails/webpacker&lt;/code&gt; as a dependency, the following would enforce an exact version:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&amp;quot;@rails/webpacker&amp;quot;: &amp;quot;4.2.1&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the Gemfile, comparison operators can be used as in the following examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;=4.2.1&amp;quot;&lt;/code&gt; matches greater or equal to 4.2.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;4.2.1&amp;quot;&lt;/code&gt; matches greater than 4.2.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;gt;=4.2.1 &amp;lt;5&amp;quot;&lt;/code&gt; matches greater or equal to 4.2.1 and less than 5&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;lt;5&amp;quot;&lt;/code&gt; matches less than 5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NPM supports alternate syntaxes for specifying ranges, including, but not limited to, caret &lt;code&gt;^&lt;/code&gt; and tilde &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;

      &lt;h3 id="tilde-ranges" class="title title-h3"&gt;
        &lt;a name="tilde-ranges" class="anchor" href="#tilde-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Tilde ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM ~ is like Gemfile ~&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tilde ranges for NPM are equivalent to Ruby&amp;#39;s pessimistic version constraint, the squiggly arrow &lt;code&gt;~&amp;gt;&lt;/code&gt;. In other wordss, the upper end of the range is determined by the smallest level of the declared constraint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~4.2.1&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;= 4.2.1 &amp;lt;4.3.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~4.2&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;= 4.2.0 &amp;lt;5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;~4&amp;quot;&lt;/code&gt;     matches &lt;code&gt;&amp;quot;&amp;gt;= 4.0.0 &amp;lt;5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="caret-ranges" class="title title-h3"&gt;
        &lt;a name="caret-ranges" class="anchor" href="#caret-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Caret ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM ^ is like Gemfile ~&amp;gt; x.0 for versions 1 and up and ~&amp;gt; 0.x.0 for versions less than 1 and greater than 0.0.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Caret ranges are another take on pessimistic version constraints that do not have a shorthand equivalent in Ruby, i.e., to my knowledge, they&amp;#39;re a special breed. They allow patch and minor updates for versions &lt;code&gt;&amp;gt;1.0.0&lt;/code&gt;, patch updates for versions &lt;code&gt;&amp;lt;1.0.0 &amp;gt;=0.1.0&lt;/code&gt;, and no updates for versions &lt;code&gt;&amp;lt;0.1.0&lt;/code&gt; (except preleases, e.g. &lt;code&gt;0.0.3-beta&lt;/code&gt;). My understanding is that the caret is the answer for traditional SemVer, i.e., there will be breaking changes prior to 0.1.0, there may be breaking changes between minor versions prior to 1.0.0, and there may only be breaking changes between major versions above 1.0.0. Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^4.2.1&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.1 &amp;lt;5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^0.2.2&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=0.2.2 &amp;lt;0.3.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;^0.0.2&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=0.0.2 &amp;lt;0.0.3&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="bonus-syntax-in-package-json" class="title title-h2"&gt;
        &lt;a name="bonus-syntax-in-package-json" class="anchor" href="#bonus-syntax-in-package-json"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Bonus syntax in package.json
      &lt;/h2&gt;
    
&lt;p&gt;NPM also supports hyphen ranges and x-ranges, neither of which have Gemfile equivalents as well.&lt;/p&gt;

      &lt;h3 id="hyphen-ranges" class="title title-h3"&gt;
        &lt;a name="hyphen-ranges" class="anchor" href="#hyphen-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Hyphen ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM hyphen-ranges are like separate comparison operators in a Gemfile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For hyphen ranges, range inclusivity is tied to specificity of the declared versions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2.1 - 5.4.2&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.1 &amp;lt;=5.4.2&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2 - 5.4.2&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.0 &amp;lt;=5.4.2&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2 - 5&amp;quot;&lt;/code&gt;       matches &lt;code&gt;&amp;quot;&amp;gt;=4.2.0 &amp;lt;=6.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      &lt;h3 id="x-ranges" class="title title-h3"&gt;
        &lt;a name="x-ranges" class="anchor" href="#x-ranges"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        X-ranges
      &lt;/h3&gt;
    
&lt;blockquote&gt;
&lt;p&gt;NPM x-ranges behave like Gemfile ~&amp;gt; with exceptions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;X-ranges are mostly self-explanatory as the &lt;code&gt;x&lt;/code&gt; denotes any value:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2.x&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;~4.2.0&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;&amp;gt;= 4.2.0 &amp;lt;4.3.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.x&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;~4.0&amp;quot;&lt;/code&gt;   matches &lt;code&gt;&amp;quot;&amp;gt;= 4.0.0 &amp;lt;5.0.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.x.x&amp;quot;&lt;/code&gt; matches &lt;code&gt;&amp;quot;4.x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A partial version range is treated as an x-range:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4.2&amp;quot;&lt;/code&gt; matches &amp;quot;&lt;code&gt;4.2.x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;4&amp;quot;&lt;/code&gt;   matches &amp;quot;&lt;code&gt;4.x.x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;    matches &amp;quot;&lt;code&gt;*&lt;/code&gt;&amp;quot; matches any version&lt;/li&gt;
&lt;/ul&gt;

      &lt;h2 id="conclusion" class="title title-h2"&gt;
        &lt;a name="conclusion" class="anchor" href="#conclusion"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Conclusion
      &lt;/h2&gt;
    
&lt;p&gt;For Rubyists out there who needed an introduction to NPM version constraints, I hope this was a helpful guide. Perhaps it may serve as a helpful cheatsheet in the future.&lt;/p&gt;

&lt;p&gt;Mostly I wrote this for myself because I tend to forget 😅.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>3 ways Webpack surprises web developers</title>
    <link rel="alternate" href="/blog/three-ways-webpack-surprises-rails-developers.html"/>
    <id>/blog/three-ways-webpack-surprises-rails-developers.html</id>
    <published>2020-01-14T00:00:00+00:00</published>
    <updated>2020-01-14T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;When I first started working with Webpack, I didn't realize how under-prepared I was. I was tasked with &lt;a href="/blog/from-sprockets-to-webpack.html"&gt;integrating Webpack into a large Rails app&lt;/a&gt; and I made a lot of mistakes along the way. I assumed how things should behave based on my previous experience...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;When I first started working with Webpack, I didn&amp;#39;t realize how under-prepared I was. I was tasked with &lt;a href="/blog/from-sprockets-to-webpack.html"&gt;integrating Webpack into a large Rails app&lt;/a&gt; and I made a lot of mistakes along the way. I assumed how things should behave based on my previous experience with the Rails asset pipeline. Many of these assumptions turned out to be wrong. This was frustrating and humbling.&lt;/p&gt;

&lt;p&gt;And after spending the last month answering Webpack questions on StackOverflow, I&amp;#39;ve come across plenty of folks going through some of the same mental hurdles I&amp;#39;ve experienced. I came away with some perspective on what about Webpack most commonly trips up developers.&lt;/p&gt;

&lt;p&gt;The intended audience for this post has a general notion of &amp;quot;why use Webpack&amp;quot; or &amp;quot;why use an asset bundler&amp;quot;, but for more on that, I recommend &lt;a href="https://www.swyx.io/writing/jobs-of-js-build-tools/" target="_blank" rel="noopener noreferrer"&gt;The Many Jobs of JS Build Tools&lt;/a&gt; and &lt;a href="https://what-problem-does-it-solve.com/webpack/index.html" target="_blank" rel="noopener noreferrer"&gt;Webpack from Nothing: What problem are we solving?&lt;/a&gt;. For a rigorous technical overview of the project, I suggest &lt;a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer"&gt;the Webpack docs&lt;/a&gt;; they have gotten quite good.&lt;/p&gt;

&lt;p&gt;For this post, we&amp;#39;re going to look at three common surprises web developers face when learning Webpack: why using global variables doesn&amp;#39;t behave the way you might think, how Webpack treats everything as a JavaScript module, and the big learning curve for configuring Webpack effectively.&lt;/p&gt;

      &lt;h3 id="1-global-variables-are-not-your-friend" class="title title-h3"&gt;
        &lt;a name="1-global-variables-are-not-your-friend" class="anchor" href="#1-global-variables-are-not-your-friend"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        1. Global variables are not your friend
      &lt;/h3&gt;
    
&lt;p&gt;I learned to program using script tags and html files loaded directly in the browser. I tied everything together with global variables. It was great.&lt;/p&gt;

&lt;p&gt;And for better or worse, every Rails I&amp;#39;ve worked on, and it&amp;#39;s been dozens over the years, has relied on global variables and script tag snippets to make things work. Here is a basic example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;!-- app/view/posts/index.html.erb --&amp;gt;
&amp;lt;%= @posts.each do |post| %&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;button--show-more&amp;quot;&amp;gt;Show more&amp;lt;/a&amp;gt;

&amp;lt;script&amp;gt;
  $(&amp;#39;.button--show-more&amp;#39;).click(function() {
    MyApp.fetchPosts() // etc...
  })

  // MyApp and $ are global variables
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is typical with old-school bundlers like the Rails asset pipeline because they concatenate JavaScript dependencies in the global scope. This, despite the general notion that &lt;a href="https://stackoverflow.com/questions/2613310/ive-heard-global-variables-are-bad-what-alternative-solution-should-i-use" target="_blank" rel="noopener noreferrer"&gt;global variables are bad&lt;/a&gt;. Notably, the Rails asset pipeline came into existence before the rise of Node.js and, subsequently, formal JavaScript modules, and it never adapted. Many prefer this way of doing things. I still lean on global variables now and then.&lt;/p&gt;

&lt;p&gt;Things work differently in Webpack. It does not expose its bundled modules to the global scope by default. To reference code in another module, it expects explicit imports that reference that module&amp;#39;s explicit exports. The scope in which modules are evaluated is local, not global, i.e., the contents of each file are wrapped in a function.&lt;/p&gt;

&lt;p&gt;Things are trickier if we expect to access bundled JavaScript from HTML, like &lt;code&gt;MyApp.fetchPosts()&lt;/code&gt; above. Options include manually attaching variables to the global scope, e.g. &lt;code&gt;window.$ = require(&amp;#39;jquery&amp;#39;)&lt;/code&gt; or modify the Webpack configuration to &amp;quot;expose&amp;quot; variables globally, as is demonstrated in this &lt;a href="https://stackoverflow.com/questions/58580996/unable-to-access-jquery-from-my-views-on-ror/58751163#58751163" target="_blank" rel="noopener noreferrer"&gt;StackOverflow post&lt;/a&gt; (and many others).&lt;/p&gt;

&lt;p&gt;This serves as an illustration of how a legacy practice would be swimming upstream in a Webpacker-enabled app: it takes effort.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But why?&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h4 id="webpack-is-a-module-bundler" class="title title-h4"&gt;
        &lt;a name="webpack-is-a-module-bundler" class="anchor" href="#webpack-is-a-module-bundler"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Webpack is a module bundler
      &lt;/h4&gt;
    
&lt;p&gt;Webpack describes itself as &lt;a href="https://webpack.js.org/conceptsl" target="_blank" rel="noopener noreferrer"&gt;&amp;quot;a static module bundler for modern JavaScript applications&amp;quot;&lt;/a&gt;. For developers used to unfettered access to JavaScript global scope, the switch to working in a modular system comes as a surprise. I argue that adopting Webpack effectively means understanding JavaScript modules.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what then is a JavaScript module?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a fantastic introduction to JavaScript modules, I suggest Preethi Kasireddy&amp;#39;s &lt;a href="https://www.freecodecamp.org/news/javascript-modules-a-beginner-s-guide-783f7d7a5fcc/" target="_blank" rel="noopener noreferrer"&gt;Javascript Modules: A Beginner&amp;#39;s Guide&lt;/a&gt; on freeCodeCamp. I&amp;#39;ll attempt to summarize.&lt;/p&gt;

&lt;p&gt;Generally speaking, a JavaScript module is a self-contained, reusable piece of code. This definition though is inadequate to capture the behavior of various flavors of JavaScript modules, ranging from simple patterns to formal systems supported by common JavaScript runtimes.&lt;/p&gt;

&lt;p&gt;In recent years, several popular JavaScript module definitions have become widely adopted, each with their own characteristics, including &lt;a href="https://requirejs.org/docs/commonjs.html" target="_blank" rel="noopener noreferrer"&gt;CommonJS&lt;/a&gt;, &lt;a href="https://requirejs.org/docs/whyamd.html#amd" target="_blank" rel="noopener noreferrer"&gt;Asynchronous Module Definition&lt;/a&gt; (AMD), and &lt;a href="https://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener noreferrer"&gt;EcmaScript (ES) Modules&lt;/a&gt; to name a few.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/require-everything.png" alt="How did the big bang happen? require('everything')" /&gt;&lt;/p&gt;

&lt;p&gt;Webpack can be configured to recognize any of these module formats.&lt;/p&gt;

&lt;p&gt;Webpack transpiles your application&amp;#39;s source files into JavaScript modules the browser can understand. It adds code to your bundle to tie these modules together. This has implications for how developers write code which means the old-school patterns that worked with the Rails asset pipeline may not work in the Webpack context.&lt;/p&gt;

      &lt;h4 id="avoid-legacy-code-if-you-can" class="title title-h4"&gt;
        &lt;a name="avoid-legacy-code-if-you-can" class="anchor" href="#avoid-legacy-code-if-you-can"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Avoid legacy code if you can
      &lt;/h4&gt;
    
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack" target="_blank" rel="noopener noreferrer"&gt;Some&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/59042437/gmaps-with-rails-6-webpack" target="_blank" rel="noopener noreferrer"&gt;of the&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/59670743/leaflet-with-webpack-in-rails-6-l-timeline-is-not-a-function" target="_blank" rel="noopener noreferrer"&gt;most&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/40575637/how-to-use-webpack-with-google-maps-api" target="_blank" rel="noopener noreferrer"&gt;frequent&lt;/a&gt; Webpack issues that pop up on StackOverflow highlight this disparity between the context in which Webpack works best and the context for which legacy code was written.&lt;/p&gt;

&lt;p&gt;Consider any jQuery plugin in your app that&amp;#39;s more than a few years old; any one of them may not play nice with Webpack. The plugin system in a way is a relic of the pre-module era; attaching to a global variable was the easy way to reuse and reference functionality across the app.&lt;/p&gt;

&lt;p&gt;Many jQuery plugins (or many legacy plugins in general) have been written without awareness of JavaScript modules and assume execution within the global scope. Be ready to weigh the tradeoff of learning how to configure Webpack to play nicely with legacy code or replace it with something else altogether.&lt;/p&gt;

&lt;p&gt;In Webpack, global variables are not your friend, my friend.&lt;/p&gt;

      &lt;h3 id="2-webpack-treats-everything-as-a-javascript-module" class="title title-h3"&gt;
        &lt;a name="2-webpack-treats-everything-as-a-javascript-module" class="anchor" href="#2-webpack-treats-everything-as-a-javascript-module"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        2. Webpack treats everything as a JavaScript module
      &lt;/h3&gt;
    
&lt;p&gt;Webpack is so committed to its &amp;quot;module bundler&amp;quot; role it treats other static assets, including CSS, images, fonts, etc., as JavaScript modules too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Say what?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first learned this about Webpack, I was totally confused: How does Webpack produce stylesheets out of JS? How would I reference the an image tag&amp;#39;s &lt;code&gt;src&lt;/code&gt; for bundled images? What does it mean to import an &lt;em&gt;image module&lt;/em&gt; in JavaScript?&lt;/p&gt;

&lt;p&gt;It helps to understand that Webpack must be configured, typically with &lt;a href="https://webpack.js.org/loaders/" target="_blank" rel="noopener noreferrer"&gt;loaders&lt;/a&gt; or &lt;a href="https://webpack.js.org/plugins/" target="_blank" rel="noopener noreferrer"&gt;plugins&lt;/a&gt;, to handle different various files types as modules. How Webpack processes various file types as output depends which loaders are used.&lt;/p&gt;

&lt;p&gt;Many projects integrate with Babel to process JavaScript files written with ES2015+ syntax. CSS files might be bundled as JavaScript Blob objects that are dynamically inserted in the DOM; otherwise it can be extracted into a CSS stylesheet a side-effect of module compilation.&lt;/p&gt;

&lt;p&gt;Webpack only needs one JavaScript file in your source code as an entry point to produce a dependency graph of all the JavaScript, CSS, images, fonts, svg, etc. that you intend to bundle as static assets for the browser.&lt;/p&gt;

&lt;p&gt;An interesting consequence of Webpack putting JavaScript first is there only needs to be one entry point to produce both a JavaScript and a CSS bundle. In the Rails asset pipeline, the JavaScript and CSS source code is kept completely separate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/assets
├── javascripts
│   └── application.js   # produces js bundle
└── stylesheets
    └── application.css  # produces css bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Webpack everything hangs off the javascript entry point, or &amp;quot;packs&amp;quot;. So assuming you have statements like &lt;code&gt;import &amp;#39;styles.css&amp;#39;&lt;/code&gt; somewhere in your JavaScript dependency graph, both &lt;code&gt;application.js&lt;/code&gt; and &lt;code&gt;application.css&lt;/code&gt; bundles will be produced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/javascript
└── packs
    └── application.js   # produces both js and css bundles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The mixing of CSS bundled in JavaScript and treated as JavaScript modules has isn&amp;#39;t strictly necessary, but it most certainly a mental leap for the uninitiated.&lt;/p&gt;

      &lt;h3 id="3-webpack-configuration-is-extreme-pluggable" class="title title-h3"&gt;
        &lt;a name="3-webpack-configuration-is-extreme-pluggable" class="anchor" href="#3-webpack-configuration-is-extreme-pluggable"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        3. Webpack configuration is extreme pluggable
      &lt;/h3&gt;
    
&lt;p&gt;There&amp;#39;s a reason Webpack configuration has such a high barrier to entry: Webpack is the ultimate delegator.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I continue to be amazed at how many learners seem to almost deliberately avoid reading the actual official docs for the tools they&amp;#39;re trying to use. I keep seeing folks asking for Udemy courses and &amp;quot;best tutorials&amp;quot; and stuff.&lt;br&gt;&lt;br&gt;Why do people avoid reading actual docs?&lt;/p&gt;&amp;mdash; Mark Erikson (@acemarke) &lt;a href="https://twitter.com/acemarke/status/1213898963679633411?ref_src=twsrc%5Etfw"&gt;January 5, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Coming from Rails, which famously values &amp;quot;convention over configuration&amp;quot;, the ergonomics of setting up a Webpack configuration cause discomfort. It aims to be extremely flexible and extensible; to that end, it succeeds superbly. To serve this goal, Webpack provides a large array of &lt;a href="https://webpack.js.org/configuration/" target="_blank" rel="noopener noreferrer"&gt;configuration options&lt;/a&gt;. On top of that, most Webpack configurations bring in a number of loader and plugins, each of which have their own configuration requirements.&lt;/p&gt;

&lt;p&gt;Faced having to learn Webpack, Babel, PostCSS, not to mention, Webpacker&amp;#39;s abstractions around Webpack, it&amp;#39;s no wonder we&amp;#39;re intimidated. That&amp;#39;s a lot to wrap your head around.&lt;/p&gt;

&lt;p&gt;One of Webpacker&amp;#39;s goals, in a similar fashion to &lt;a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener noreferrer"&gt;create-react-app&lt;/a&gt; and the &lt;a href="https://cli.vuejs.org/" target="_blank" rel="noopener noreferrer"&gt;vue-cli&lt;/a&gt;, is to provide a Webpack config with sane defaults, i.e. the &amp;quot;convention&amp;quot;. Depending on your project&amp;#39;s needs, these &amp;quot;out-of-the-box&amp;quot; setups may get you quite far. Unfortunately, for any non-trivial modification, like getting a large legacy library to work with global variables or optimizing your build time by splitting out vendor dependencies, developers must be prepared to dive into the documentation and search for answers far and wide on StackOverflow and Medium.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/good-developer-or-good-at-googling.png" alt="I'm not sure if I'm a good developer or good at googling" /&gt;&lt;/p&gt;

      &lt;h3 id="4-bonus-webpack-is-a-powerful-tool" class="title title-h3"&gt;
        &lt;a name="4-bonus-webpack-is-a-powerful-tool" class="anchor" href="#4-bonus-webpack-is-a-powerful-tool"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        4. Bonus: Webpack is a powerful tool
      &lt;/h3&gt;
    
&lt;p&gt;I&amp;#39;ve grown to love Webpack and, I admit, this appreciation was hard-earned. As I&amp;#39;ve gotten over the initial hurdles of making my Webpack config work for my projects, I&amp;#39;ve come to value a number of Webpack&amp;#39;s benefits, including optimizing bundle size through &lt;a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener noreferrer"&gt;tree-shaking&lt;/a&gt;, code splitting via &lt;a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener noreferrer"&gt;asynchronous dynamic imports&lt;/a&gt; and the &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer"&gt;split chunks plugin&lt;/a&gt; and support for &lt;a href="https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules" target="_blank" rel="noopener noreferrer"&gt;preloading and prefetching&lt;/a&gt;. All of these features are virtually non-existent in the Rails asset pipeline.&lt;/p&gt;

&lt;p&gt;These major strengths of Webpack all boil down to improving user experience: using it effectively can help improve metrics like &lt;a href="https://calendar.perfplanet.com/2017/time-to-interactive-measuring-more-of-the-user-experience/" target="_blank" rel="noopener noreferrer"&gt;Time-to-Interactive&lt;/a&gt; and &lt;a href="https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics#first_paint_and_first_contentful_paint" target="_blank" rel="noopener noreferrer"&gt;First Contentful Paint&lt;/a&gt;. These things matter and are ever more crucial as we lean more heavily on client-side code build rich interfaces delivered across a widening array of devices and networks.&lt;/p&gt;

&lt;p&gt;Webpack receives a fair number of criticisms regarding its complexity and some of its surprising traits, like the ones I highlighted here. To be fair, Webpack aims to solve a complex problem and solves it quite well. Other asset bundlers are worth your consideration, but, arguably, no other bundler has been as successful.&lt;/p&gt;

&lt;p&gt;As we saw in the &lt;a href="https://twitter.com/dhh/status/1046634277985611776" target="_blank" rel="noopener noreferrer"&gt;recent announcement from @dhh&lt;/a&gt; and the release of Rails 6 last year, Webpack is now the default JavaScript compiler for Rails. Looks like Rails developers will be looking to adopt Webpack in their applications, though as we&amp;#39;ve seen today, they may be in for a few surprises.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Webpack is now the default JavaScript compiler for the upcoming Rails 6 🎉 &lt;a href="https://t.co/LJzCSoPfCV"&gt;&lt;a href="https://t.co/LJzCSoPfCV" target="_blank" rel="noopener noreferrer"&gt;https://t.co/LJzCSoPfCV&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href="https://twitter.com/dhh/status/1046634277985611776?ref_src=twsrc%5Etfw"&gt;October 1, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Importing images with Webpacker</title>
    <link rel="alternate" href="/blog/importing-images-with-webpacker.html"/>
    <id>/blog/importing-images-with-webpacker.html</id>
    <published>2019-12-18T00:00:00+00:00</published>
    <updated>2019-12-18T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;Webpack isn't just for JavaScript. You can bundle images with it too. &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;Webpacker&lt;/a&gt; makes it relatively easy to work with images, but it is admittedly confusing at first: &lt;em&gt;Images in JavaScript?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we'll demonstrate how to reference Webpacker...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Webpack isn&amp;#39;t just for JavaScript. You can bundle images with it too. &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;Webpacker&lt;/a&gt; makes it relatively easy to work with images, but it is admittedly confusing at first: &lt;em&gt;Images in JavaScript?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we&amp;#39;ll demonstrate how to reference Webpacker images from your JavaScript, CSS, and Rails views. The following examples were created using Rails 6 and Webpacker 4, but may work with other versions as well. Pre-requisites for working with Webpacker in a Rails project also include &lt;a href="https://yarnpkg.com/" target="_blank" rel="noopener noreferrer"&gt;yarn&lt;/a&gt;.&lt;/p&gt;

      &lt;h3 id="folder-structure" class="title title-h3"&gt;
        &lt;a name="folder-structure" class="anchor" href="#folder-structure"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Folder structure
      &lt;/h3&gt;
    
&lt;p&gt;First, where should you put your images? It doesn&amp;#39;t matter. The easiest place to start is under your &lt;code&gt;app/javascript&lt;/code&gt; folder, the default source path for Webpacker, such as &lt;code&gt;app/javascript/images&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the rest of this guide, we&amp;#39;ll assume the following directory structure and files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/javascript
├── components
│   └── Taco.js
├── css
│   ├── main.css
├── images
│   ├── burritos.jpg
│   ├── guacamole.jpg
│   └── tacos.jpg
└── packs
    └── application.js
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Isn&amp;#39;t weird to put images and css in a folder called &amp;quot;javascript&amp;quot;? Depends. If you consider, from Webpack&amp;#39;s perspective, everything is a JavaScript module, it may not be so strange. Otherwise, it&amp;#39;s possible to rename &lt;code&gt;app/javascript&lt;/code&gt; or place your images elsewhere. More on that below.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="images-in-js" class="title title-h3"&gt;
        &lt;a name="images-in-js" class="anchor" href="#images-in-js"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in JS
      &lt;/h3&gt;
    
&lt;p&gt;To reference an image from JavaScript in your Webpacker build, simply import it like any other module. React is not required for this to work ;)&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascripts/components/Taco.js
import TacoImage from &amp;#39;../images/tacos.jpg&amp;#39;

export default function({ title }) {
  return `
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;${title}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;img src=${TacoImage} alt=&amp;quot;Tacos, yum&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  `
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, Webpack will import &lt;code&gt;TacoImage&lt;/code&gt; as a url to the file. In other words, an &amp;quot;image module&amp;quot; in Webpack exports a single default value, a string, representing the location of the file. Based on the default Webpacker configuration, the filename will look something like &lt;code&gt;&amp;quot;/packs/media/images/tacos-abcd1234.jpg&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importing a image also works if you&amp;#39;re using &amp;quot;CSS in JS&amp;quot; to style a React component.&lt;/p&gt;

&lt;pre&gt;&lt;code class="jsx"&gt;import React from &amp;#39;react&amp;#39;

import TacoImage from &amp;#39;../images/tacos.jpg&amp;#39;

const styles = {
  backgroundImage: `url(${TacoImage})`,
}

export default function ({ title }) {
  return (
    &amp;lt;div style={styles}&amp;gt;
      {title}!
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="images-in-css" class="title title-h3"&gt;
        &lt;a name="images-in-css" class="anchor" href="#images-in-css"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in CSS
      &lt;/h3&gt;
    
&lt;p&gt;In Sprockets, when referencing images in CSS, you would use a special &lt;code&gt;image-url()&lt;/code&gt; helper. In Webpack, simply use the standard &lt;code&gt;url()&lt;/code&gt; expression in CSS with a relative path.&lt;/p&gt;

&lt;pre&gt;&lt;code class="css"&gt;/* app/javascript/css/main.css */
.burritos {
  background-image: url(&amp;quot;../images/burritos.jpg&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output for the style rule will, again, look something like &lt;code&gt;background-image: url(/packs/media/images/burritos-efgh5678.jpg);&lt;/code&gt;. This technique will also work for image paths in CSS Modules.&lt;/p&gt;

      &lt;h3 id="images-in-css-within-npm-modules" class="title title-h3"&gt;
        &lt;a name="images-in-css-within-npm-modules" class="anchor" href="#images-in-css-within-npm-modules"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in CSS within NPM modules
      &lt;/h3&gt;
    
&lt;p&gt;One tricky bit worth mentioning is bundling images referenced in SCSS within an imported NPM module. For example, many jQuery plugins bundle their own SCSS and image assets. When Webpack processes this vendored CSS, you may see an error like the following, like in &lt;a href="https://stackoverflow.com/questions/58727976/import-images-of-an-npm-package-with-webpacker-and-rails" target="_blank" rel="noopener noreferrer"&gt;this question on StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Module not found: Error: Can&amp;#39;t resolve &amp;#39;../img/controls.png&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is the path does not resolve properly relative to the output for this vendored SCSS. From the &lt;a href="https://github.com/rails/webpacker/blob/76b491750993fada8b0b0cc2546dfcfbc4aaae13/docs/css.md#resolve-url-loader" target="_blank" rel="noopener noreferrer"&gt;Webpacker docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since Sass/libsass does not provide url rewriting, all linked assets must be relative to the output. Add the missing url rewriting using the resolve-url-loader. Place it directly after the sass-loader in the loader chain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To fix this, you may need to get your hands dirty with some Webpacker configuration. Add the &lt;code&gt;resolve-url-loader&lt;/code&gt; and configure in &lt;code&gt;config/webpack/environment.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;yarn add resolve-url-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// config/webpack/environment.js
const { environment } = require(&amp;#39;@rails/webpacker&amp;#39;)

// resolve-url-loader must be used before sass-loader
environment.loaders.get(&amp;#39;sass&amp;#39;).use.splice(-1, 0, {
  loader: &amp;#39;resolve-url-loader&amp;#39;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loader rule, inserted in the loader pipeline for SASS/SCSS files, will ensure the proper url is written to the CSS output by Webpack.&lt;/p&gt;

      &lt;h3 id="images-in-rails-views" class="title title-h3"&gt;
        &lt;a name="images-in-rails-views" class="anchor" href="#images-in-rails-views"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Images in Rails views
      &lt;/h3&gt;
    
&lt;p&gt;You may be accustomed to &lt;code&gt;&amp;lt;%= image_tag &amp;#39;tacos.jpg&amp;#39; %&amp;gt;&lt;/code&gt; to reference a image bundled in the Rails asset pipeline. Webpack has a similar tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- app/views/lunches/index.html.erb --&amp;gt;

&amp;lt;%= image_pack_tag &amp;#39;media/images/guacamole.jpg&amp;#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, since Webpacker 4, the prefix &lt;code&gt;media/&lt;/code&gt; is necessary and the remaining path represents the location from your Webpack source path.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a catch. This change may result in the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Webpacker::Manifest::MissingEntryError in Lunches#index
Showing /path/to/project/app/views/lunches/index.html.erb where line #4 raised:

Webpacker can&amp;#39;t find media/images/guacamole.jpg in /path/to/project/public/packs/manifest.json.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you use &lt;code&gt;&amp;lt;%= image_pack_tag &amp;#39;media/images/tacos.jpg %&amp;gt;&lt;/code&gt;, the taco image will happily renders. What gives?&lt;/p&gt;

&lt;p&gt;Your Rails app is not being selective about cuisine. The difference is, we earlier imported the &lt;code&gt;tacos.jpg&lt;/code&gt; image in Webpack, but not &lt;code&gt;guacamole.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One way to fix this issue is to import the &lt;code&gt;guacamole.jpg&lt;/code&gt; image somewhere in your Webpack dependency graph. It&amp;#39;s not necessary to grab a reference to the imported variable because we only care about the side effect of emitting the file for Rails to reference in the view.&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;import &amp;#39;../images/guacamole.jpg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to fix this issue is to import &lt;em&gt;all&lt;/em&gt; images in the &lt;code&gt;app/javascript/images&lt;/code&gt; directory. Webpack provides a special function to import many files in a directory in one expression: &lt;code&gt;require.context&lt;/code&gt;. You might add this to your &lt;code&gt;application.js&lt;/code&gt; pack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

require.context(&amp;#39;../images&amp;#39;, true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This expression will recursively require all the files in the &lt;code&gt;images&lt;/code&gt; directory. As a result, we can now render &lt;code&gt;guacamole.jpg&lt;/code&gt; in a Rails view.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I only recommend using &lt;code&gt;require.context&lt;/code&gt; for your images if you need to render them in your Rails views; &lt;code&gt;require.context&lt;/code&gt; is NOT necessary to import images into JS files like your React components, as illustrated earlier.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="reconfiguring" class="title title-h3"&gt;
        &lt;a name="reconfiguring" class="anchor" href="#reconfiguring"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Reconfiguring
      &lt;/h3&gt;
    
&lt;p&gt;If you don&amp;#39;t feel comfortable with &lt;code&gt;app/javascript&lt;/code&gt; as the source directory for &lt;code&gt;images&lt;/code&gt;, you can either rename the source path or add to the set of resolved paths.&lt;/p&gt;

&lt;p&gt;To rename &lt;code&gt;app/javascript&lt;/code&gt;, rename the directory and tell Rails about it in &lt;code&gt;config/webpacker.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;default: &amp;amp;default
  source_path: app/frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add to the set of resolved paths where Webpack should look for assets besides in &lt;code&gt;app/javascript&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="yaml"&gt;default: &amp;amp;default
  resolved_paths:
    - app/assets
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="diving-deeper" class="title title-h3"&gt;
        &lt;a name="diving-deeper" class="anchor" href="#diving-deeper"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Diving Deeper
      &lt;/h3&gt;
    
&lt;p&gt;I have to admit, a few years ago, when I first heard about Webpack, I was super-confused. I understood it to be a JavaScript module bundler. &lt;em&gt;How on Earth does it handles images?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The short answer, of course, is &lt;em&gt;it depends&lt;/em&gt;. Generally, Webpack will treat everything it can understand as a JavaScript module. To help Webpack understand images, projects would add a &amp;quot;loader&amp;quot; (or loaders) to the Webpack configuration. A suitable loader would know how to handle an image file and output a representation of something, like an inlined base64 string, that can be manipulated in JavaScript.&lt;/p&gt;

&lt;p&gt;To help Webpack understand images, svg files, and fonts in your Rails project, Webpacker adds the &lt;code&gt;file-loader&lt;/code&gt; package. This package will emit the imported file as a side effect of the build and return a path to the file as the module contents.&lt;/p&gt;

&lt;p&gt;For more on how Webpack works with images, check out the &lt;a href="https://webpack.js.org/guides/asset-management/#loading-images" target="_blank" rel="noopener noreferrer"&gt;asset management docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also put together a sample Rails 6 Webpacker demo project on GitHub for more context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/rails6-webpacker-demo/compare/example/images" target="_blank" rel="noopener noreferrer"&gt;Images in JS, CSS, and Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rossta/rails6-webpacker-demo/compare/example/react-image" target="_blank" rel="noopener noreferrer"&gt;Images with CSS-in-JS in a React app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Overpacking: A common Webpacker mistake</title>
    <link rel="alternate" href="/blog/overpacking-a-common-webpacker-mistake.html"/>
    <id>/blog/overpacking-a-common-webpacker-mistake.html</id>
    <published>2019-12-03T00:00:00+00:00</published>
    <updated>2019-12-03T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I recently encountered a Rails app at work that was spending nearly seven minutes precompiling assets:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-before-fix.png" alt="CI Screenshot: Precompile assets, 6:56"&gt;&lt;/p&gt;

&lt;p&gt;I looked in the &lt;code&gt;Gemfile&lt;/code&gt; and found the project was using Webpacker. My spidey sense started to tingle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've seen this before&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Leaning on prior...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I recently encountered a Rails app at work that was spending nearly seven minutes precompiling assets:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-before-fix.png" alt="CI Screenshot: Precompile assets, 6:56" /&gt;&lt;/p&gt;

&lt;p&gt;I looked in the &lt;code&gt;Gemfile&lt;/code&gt; and found the project was using Webpacker. My spidey sense started to tingle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;#39;ve seen this before&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Leaning on prior experience, I found the problem, moved some files around, and pushed a branch with the fix up to CI.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/webpack/overpack-after-fix.png" alt="CI Screenshot: Precompile assets, 0:44" /&gt;&lt;/p&gt;

&lt;p&gt;The build step dropped from nearly seven minutes to less than one. Big improvement! When I heard from the team, the fix also greatly improved the local development experience; before, re-compiling Webpack assets on page refreshes would take a painfully long time.&lt;/p&gt;

&lt;p&gt;So what were the changes?&lt;/p&gt;

      &lt;h3 id="a-common-problem" class="title title-h3"&gt;
        &lt;a name="a-common-problem" class="anchor" href="#a-common-problem"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A Common Problem
      &lt;/h3&gt;
    
&lt;p&gt;First, let&amp;#39;s take a step back. If you&amp;#39;re new to Webpack and Webpacker for Rails, chances are you may be making some simple mistakes.&lt;/p&gt;

&lt;p&gt;I know this because I was once in your shoes struggling to learn how Webpack works. I&amp;#39;ve also spent a lot of time helping others on my team, on StackOverflow, and via &lt;a href="https://github.com/rails/webpacker" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;rails/webpacker&lt;/code&gt;&lt;/a&gt; Github issues.&lt;/p&gt;

&lt;p&gt;One of the most frequently-reported issues I&amp;#39;ve seen is slow build times. This is often coupled with high memory and CPU usage. For Heroku users on small dynos, resource-intensive asset precompilation can lead to failed deploys.&lt;/p&gt;

&lt;p&gt;More often than not, the root cause is a simple oversight in directory structure—a mistake I call &amp;quot;overpacking&amp;quot;.&lt;/p&gt;

      &lt;h3 id="overpacking-explained" class="title title-h3"&gt;
        &lt;a name="overpacking-explained" class="anchor" href="#overpacking-explained"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Overpacking explained
      &lt;/h3&gt;
    
&lt;p&gt;Here&amp;#39;s the layout of the &lt;code&gt;app/javascript&lt;/code&gt; directory in the Rails app &lt;em&gt;before&lt;/em&gt; I introduced the fix:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rake assets:precompile — 6:56&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/
  javascript/
    packs/
      application.js
      components/     # lots of files
      images/         # lots of files
      stylesheets/    # lots of files
      ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#39;s what the project looked like building in under a minute:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rake assets:precompile — 0:44&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;app/
  javascript/
    components/
    images/
    stylesheets/
    ...
    packs/
      application.js    # just one file in packs/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;The primary change here was moving everything except &lt;code&gt;application.js&lt;/code&gt; outside of the &lt;code&gt;packs&lt;/code&gt; directory under &lt;code&gt;app/javascript&lt;/code&gt;. (To make this work properly, I also had to update some relative paths in &lt;code&gt;import&lt;/code&gt; statements.)&lt;/p&gt;

      &lt;h3 id="webpack-entry-points" class="title title-h3"&gt;
        &lt;a name="webpack-entry-points" class="anchor" href="#webpack-entry-points"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Webpack Entry Points
      &lt;/h3&gt;
    
&lt;p&gt;So why did this matter?&lt;/p&gt;

&lt;p&gt;Webpack needs at least one &lt;strong&gt;entry&lt;/strong&gt; point to build the dependency graph for produce the JavaScript and CSS bundles and static assets (images, fonts, etc).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Webpacker project refers to entries as &lt;strong&gt;packs&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;quot;Entry&amp;quot; is listed as the first key concept on Webpack&amp;#39;s documentation site: &lt;a href="https://webpack.js.org/concepts/#entry" target="_blank" rel="noopener noreferrer"&gt;https://webpack.js.org/concepts/#entry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Webpack will build a separate dependency graph for every entry specified in its configuration. The more entry points you provide, the more dependency graphs Webpack has to build.&lt;/p&gt;

&lt;p&gt;Since Webpack*er*, by default, treats &lt;em&gt;every file&lt;/em&gt; in the &lt;code&gt;packs&lt;/code&gt; directory as a separate entry, it will build a separate dependency graph for &lt;em&gt;every file&lt;/em&gt; located there.&lt;/p&gt;

&lt;p&gt;That also means, for &lt;em&gt;every file&lt;/em&gt; in the &lt;code&gt;packs&lt;/code&gt; directory, there will be at least one, possibly more, files emitted as output in the &lt;code&gt;public&lt;/code&gt; directory during precompilation. If you&amp;#39;re not linking to these files anywhere in your app, then they don&amp;#39;t need to be emitted as output. For a large project, that could be lot of unnecessary work.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a case where Rails tries to make things easier for you—by auto-configuring entry files—while also making it easier to shoot yourself in the foot.&lt;/p&gt;

      &lt;h3 id="a-simple-rule" class="title title-h3"&gt;
        &lt;a name="a-simple-rule" class="anchor" href="#a-simple-rule"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A Simple Rule
      &lt;/h3&gt;
    
&lt;p&gt;Is your Webpacker compilation taking forever? You may be overpacking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If any file in Webpacker&amp;#39;s &amp;quot;packs&amp;quot; directory does not also have a corresponding &lt;code&gt;javascript_pack_tag&lt;/code&gt; in your application, then you&amp;#39;re overpacking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be good to yourself and your development and deployment experience by being very intentional about what files you put in your &amp;quot;packs&amp;quot; directory.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t overpack. At best, this is wasteful; at worst, this is a productivity killer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Bootstrap with Rails Webpacker</title>
    <link rel="alternate" href="/blog/webpacker-with-bootstrap.html"/>
    <id>/blog/webpacker-with-bootstrap.html</id>
    <published>2019-11-25T00:00:00+00:00</published>
    <updated>2019-11-25T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;In this post, I'll demonstrate how to set up a Rails application with Bootstrap for Webpacker.&lt;/p&gt;

&lt;p&gt;If you'd prefer to skip the post and go straight to the demo app, you can find it here: &lt;a href="https://github.com/rossta/rails-webpacker-bootstrap-demo" target="_blank" rel="noopener noreferrer"&gt;https://github.com/rossta/rails-webpacker-bootstrap-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The examples...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;In this post, I&amp;#39;ll demonstrate how to set up a Rails application with Bootstrap for Webpacker.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d prefer to skip the post and go straight to the demo app, you can find it here: &lt;a href="https://github.com/rossta/rails-webpacker-bootstrap-demo" target="_blank" rel="noopener noreferrer"&gt;https://github.com/rossta/rails-webpacker-bootstrap-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The examples and demo app described in this post use the following dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;# Ruby/Rails
Rails 6.0.1
Ruby 2.6.5
Webpacker 4.2.0

# npm
@rails/webpacker 4.2.0
bootstrap 4.3.1
jQuery 3.4.1
popper.js 1.16.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ll assume we&amp;#39;re working from a recently-created Rails 6 app with the default Webpacker installation. The examples may also work with other versions Rails that support Webpacker 4.&lt;/p&gt;

&lt;p&gt;When the Webpacker install is run, i.e. &lt;code&gt;bin/rails webpacker:install&lt;/code&gt;, it adds the file &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;. Webpack calls this file an &amp;quot;entry point&amp;quot; and Webpacker calls it a &amp;quot;pack&amp;quot;. We&amp;#39;ll use the terms interchangeably. Either way, this file will be the top of the dependency tree for all assets bundled by Webpack.&lt;/p&gt;

&lt;p&gt;The file initially looks something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js
require(&amp;quot;@rails/ujs&amp;quot;).start()
require(&amp;quot;channels&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: the &lt;code&gt;require&lt;/code&gt; statements in the generated javascript can be converted into &lt;code&gt;import&lt;/code&gt; statements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Installation should also insert the appropriate javascript and stylesheet &amp;quot;pack&amp;quot; tags in your application layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class="erb"&gt;&amp;lt;%= stylesheet_pack_tag &amp;#39;application&amp;#39;, media: &amp;#39;all&amp;#39; %&amp;gt;
&amp;lt;%= javascript_pack_tag &amp;#39;application&amp;#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: If you omit the &lt;code&gt;javascript_pack_tag&lt;/code&gt; and have &lt;code&gt;extract_css: false&lt;/code&gt; set for your environment in &lt;code&gt;config/webpacker.yml&lt;/code&gt;, then the CSS won&amp;#39;t load! The JS bundle is necessary in this case.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="installing-bootstrap" class="title title-h3"&gt;
        &lt;a name="installing-bootstrap" class="anchor" href="#installing-bootstrap"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Installing bootstrap
      &lt;/h3&gt;
    
&lt;p&gt;To add Bootstrap, install via yarn:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ yarn add bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the time of this post, the above is the equivalent to &lt;code&gt;yarn add bootstrap@4.3.0&lt;/code&gt;. Your installation may vary; I would expect the tutorial here will still work for other versions of Bootstrap 4.&lt;/p&gt;

&lt;p&gt;To get Bootstrap css working, add a stylesheet &lt;code&gt;app/javascript/css/site.scss&lt;/code&gt;. Here, you&amp;#39;ll import the global Bootstrap scss file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="scss"&gt;// app/javascript/css/site.scss

@import &amp;quot;~bootstrap/scss/bootstrap.scss&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: the file extensions are important, i.e., Webpacker configure files ending in &amp;#39;.scss&amp;#39; and &amp;#39;.sass&amp;#39; to be processed by Webpack&amp;#39;s &lt;code&gt;sass-loader&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To include our new stylesheet in the build output, we must import it from somewhere in our dependency tree. Let&amp;#39;s put this import in the entry point, our &lt;code&gt;application.js&lt;/code&gt; pack:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;css/site&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#39;re new to Webpack, this may comes as a surprise: yes, you import your stylesheets via javascript. In Sprockets, we typically have separate &lt;code&gt;application.css&lt;/code&gt; and &lt;code&gt;application.js&lt;/code&gt; files as the top of separate dependency trees. In Webpack, think of your application.js pack as the lone root the dependency tree from which all static assets will be imported; the &lt;code&gt;application.css&lt;/code&gt; bundle is simply a by-product of the build. In other words, there is no need for a separate &amp;quot;stylesheet pack&amp;quot; like &lt;code&gt;app/javascript/packs/application.css&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: With Webpack, it&amp;#39;s recommended to have only &lt;em&gt;one&lt;/em&gt; entry point (or &amp;quot;pack&amp;quot; in WebpackER terminology) per page for your bundled assets. For our starter app, the entry point is &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt;. I cannot stress this point enough.&lt;/p&gt;
&lt;/blockquote&gt;

      &lt;h3 id="adding-sass-overrides" class="title title-h3"&gt;
        &lt;a name="adding-sass-overrides" class="anchor" href="#adding-sass-overrides"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Adding SASS overrides
      &lt;/h3&gt;
    
&lt;p&gt;Since &lt;code&gt;bootstrap.scss&lt;/code&gt; uses SASS variables for theme-ing, you can override the defaults with new values.&lt;/p&gt;

&lt;p&gt;For example, you can change the background and font colors as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="scss"&gt;// app/javascript/css/site.scss

// sass variable overrides
$body-bg: aliceblue;
$body-color: #111;

@import &amp;quot;~bootstrap/scss/bootstrap.scss&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also surgically import selected parts of bootstrap to limit bundle size:&lt;/p&gt;

&lt;pre&gt;&lt;code class="scss"&gt;// app/javascript/css/site.scss

// Option A: Include all of Bootstrap
// @import &amp;quot;~bootstrap/scss/bootstrap.scss&amp;quot;;

// Option B: Include parts of Bootstrap
@import &amp;quot;~bootstrap/scss/functions.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/variables.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/mixins.scss&amp;quot;;

@import &amp;quot;~bootstrap/scss/reboot.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/type.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/images.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/code.scss&amp;quot;;
@import &amp;quot;~bootstrap/scss/grid.scss&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bootstrap also ships with some JavaScript utilities that function as jQuery plugins. To enable this functionality, add jQuery and popper.js as dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;yarn add jquery popper.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These libraries need to be available in your Webpack build, so import them along with bootstrap javascript:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

// ...
import &amp;#39;jquery&amp;#39;
import &amp;#39;popper.js&amp;#39;
import &amp;#39;bootstrap&amp;#39;
// ...
&lt;/code&gt;&lt;/pre&gt;

      &lt;h3 id="optimizing-the-javascript-bundle" class="title title-h3"&gt;
        &lt;a name="optimizing-the-javascript-bundle" class="anchor" href="#optimizing-the-javascript-bundle"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Optimizing the JavaScript bundle
      &lt;/h3&gt;
    
&lt;p&gt;An optional, advanced technique would be to import selected modules asynchronously. The benefit is to limit the size of our initial bundle and defer as much as possible to decrease latency for downloading, parsing, and evaluating JavaScript on page load. Note the &lt;code&gt;application.js&lt;/code&gt; bundle (fingerprinted as &lt;code&gt;js/application-c67c235b5c7d8ac4f1fe.js&lt;/code&gt;) is already 940kB in our Webpack build:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;Version: webpack 4.41.2
Time: 1003ms
Built at: 11/25/2019 4:08:14 PM
                                     Asset       Size       Chunks                         Chunk Names
              css/application-8d90f960.css    175 KiB  application  [immutable]            application
          css/application-8d90f960.css.map    377 KiB  application  [dev]                  application
    js/application-c67c235b5c7d8ac4f1fe.js    940 KiB  application  [emitted] [immutable]  application
js/application-c67c235b5c7d8ac4f1fe.js.map   1.06 MiB  application  [emitted] [dev]        application
                             manifest.json  640 bytes               [emitted]
ℹ ｢wdm｣: Compiled successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an exercise, we might decide to defer the import and initialization of the jquery plugins. Let&amp;#39;s consider &lt;code&gt;jquery&lt;/code&gt; as a critical dependency; it is needed as part of the &amp;quot;initial&amp;quot; bundle that blocks the page load while it is parsed and evaluated. But &lt;code&gt;popper.js&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; can be deferred; since they are plugins that affect the DOM, they&amp;#39;re not as critical, i.e., the DOM needs to be loaded first anyways.&lt;/p&gt;

&lt;p&gt;One such deferring technique is dynamic import. Webpack will recognize when &lt;code&gt;import&lt;/code&gt; is used as a function, e.g. &lt;code&gt;import(&amp;#39;some-lib&amp;#39;)&lt;/code&gt;, and pull out the module as a separate &amp;quot;chunk&amp;quot; (another file), that will be loaded asynchronously when the function is evaluated.&lt;/p&gt;

&lt;p&gt;In our demo app, we can move &lt;code&gt;popper.js&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; to a separate file. Critically, this file is NOT in &lt;code&gt;app/javascript/packs&lt;/code&gt; but outside of this directory, such as &lt;code&gt;app/javascript/src&lt;/code&gt;, where we will put all our non-entry-point js:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/src/plugins.js

import &amp;#39;popper.js&amp;#39;
import &amp;#39;bootstrap&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back in the application pack, we replace the &lt;code&gt;popper.js&lt;/code&gt; and &lt;code&gt;bootstrap&lt;/code&gt; imports with a &lt;em&gt;dynamic&lt;/em&gt; import of &lt;code&gt;app/javascript/src/plugins.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// app/javascript/packs/application.js

import &amp;#39;jquery&amp;#39;
import(&amp;#39;src/plugins&amp;#39;) // note the function usage!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When compiling, Webpack will show us a number of additional javascript &amp;quot;chunks&amp;quot; of smaller size than the bundle previously:&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;Version: webpack 4.41.2
Time: 41ms
Built at: 11/25/2019 4:03:54 PM
                                     Asset       Size       Chunks                         Chunk Names
              css/application-8d90f960.css    175 KiB  application  [immutable]            application
          css/application-8d90f960.css.map    377 KiB  application  [dev]                  application
        js/0-7f46c35cf4589f8534f7.chunk.js    217 KiB            0  [immutable]
    js/0-7f46c35cf4589f8534f7.chunk.js.map    257 KiB            0  [dev]
        js/1-6bb4a0148baccc5762c4.chunk.js  926 bytes            1  [immutable]
    js/1-6bb4a0148baccc5762c4.chunk.js.map  246 bytes            1  [dev]
    js/application-0b7847cb72725f896091.js    727 KiB  application  [emitted] [immutable]  application
js/application-0b7847cb72725f896091.js.map    835 KiB  application  [emitted] [dev]        application
                             manifest.json  640 bytes               [emitted]
ℹ ｢wdm｣: Compiled successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ve knocked the &lt;code&gt;application.js&lt;/code&gt; bundle, (now fingerprinted as &lt;code&gt;js/application-0b7847cb72725f896091.js&lt;/code&gt;) down to 727kB. Still sizable, but represents a significant reduction from the first pass.&lt;/p&gt;

&lt;p&gt;Another optimization step could be to configure the &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt;&lt;/a&gt; to code-split our bundle programmatically, but we&amp;#39;ll save that for another post.&lt;/p&gt;

&lt;p&gt;Our final &lt;code&gt;app/javascript/packs/application.js&lt;/code&gt; file is:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;import Rails from &amp;quot;@rails/ujs&amp;quot;

import &amp;#39;jquery&amp;#39;
import(&amp;#39;src/plugins&amp;#39;) // loads async

import &amp;#39;css/site&amp;#39;

Rails.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our final directory structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
  javascript/
    css/
      site.css
    src/
      plugins.js
    packs/
      application.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also check out the demo app for this post at &lt;a href="https://github.com/rossta/rails-webpacker-bootstrap-demo" target="_blank" rel="noopener noreferrer"&gt;https://github.com/rossta/rails-webpacker-bootstrap-demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this post shed some light on using Bootstrap with Webpacker on Rails and wish you Happy Webpacking!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vue.js is omakase</title>
    <link rel="alternate" href="/blog/vue-js-is-omakase.html"/>
    <id>/blog/vue-js-is-omakase.html</id>
    <published>2019-01-08T00:00:00+00:00</published>
    <updated>2019-01-08T00:00:00+00:00</updated>
    <author>
      <name>Ross Kaffenberger</name>
    </author>
    <summary type="html">&lt;p&gt;I'm borrowing from David Heinemeier Hansson here. Six years ago, he wrote &lt;a href="https://dhh.dk//2012/rails-is-omakase.html" target="_blank" rel="noopener noreferrer"&gt;Rails is omakase&lt;/a&gt; to capture his notion of what makes a delicious software framework: it is heavily curated and borne of experience. I think of Vue.js the same way.&lt;/p&gt;

&lt;p&gt;Here's an...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m borrowing from David Heinemeier Hansson here. Six years ago, he wrote &lt;a href="https://dhh.dk//2012/rails-is-omakase.html" target="_blank" rel="noopener noreferrer"&gt;Rails is omakase&lt;/a&gt; to capture his notion of what makes a delicious software framework: it is heavily curated and borne of experience. I think of Vue.js the same way.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an excerpt from DHH&amp;#39;s post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are lots of à la carte software environments in this world... I want this for my ORM, I want that for my template language, and let&amp;#39;s finish it off with this routing library... It&amp;#39;s a very popular way of consuming software. Rails is not that. Rails is omakase. A team of chefs picked out the ingredients, designed the APIs, and arranged the order of consumption on your behalf according to their idea of what would make for a tasty full-stack framework. The menu can be both personal and quirky. It isn&amp;#39;t designed to appeal to the taste of everyone, everywhere.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I love this metaphor, because a) Rails, including all its API choices and baggage, has treated me very well throughout my career in tech, and b) I love me some agedashi tofu.&lt;/p&gt;

&lt;p&gt;What does this have to do with Vue? I believe Vue&amp;#39;s growing popularity is partly due to its highly selective maintainers and that the recommended ingredients, though not to everyone&amp;#39;s taste, are well-suited to most projects, big and small.&lt;/p&gt;

      &lt;h3 id="enjoy-a-multiple-course-meal" class="title title-h3"&gt;
        &lt;a name="enjoy-a-multiple-course-meal" class="anchor" href="#enjoy-a-multiple-course-meal"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Enjoy a multiple-course meal
      &lt;/h3&gt;
    
&lt;p&gt;Vue articulates many courses making up the full meal for a frontend framework. These days, developers have come to expect a robust API to build components and a fast implementation built on top of a virtual dom. However, Vue.js doesn&amp;#39;t stop there. For Vue developers, the framework and its ecosystem provide adequate if not excellent implementations of orthogonal dependencies that solve problems many non-trivial apps eventually need.&lt;/p&gt;

&lt;p&gt;The offering includes the Vue Router, Vuex for state management, and the Vue test utils for unit testing. Through the Vue CLI, developers also get sensible defaults in Webpack configuration for hot module replacement, code-splitting, tree-shaking, efficient long-term caching, while having access to pre-configured opt-ins for TypeScript, Progressive Web Apps, ESLint, and multiple test runners.&lt;/p&gt;

&lt;p&gt;There is great comfort in knowing that the Vue team is behind these projects and they complement one another appropriately in my Vue.js applications.&lt;/p&gt;

      &lt;h3 id="substitutions-cost-little-extra" class="title title-h3"&gt;
        &lt;a name="substitutions-cost-little-extra" class="anchor" href="#substitutions-cost-little-extra"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        Substitutions cost little extra
      &lt;/h3&gt;
    
&lt;p&gt;So you may not agree with everything on the menu. That&amp;#39;s fine! Many of the defaults are easily changed through configuration or add-ons. Want to use Redux? No problem! Class-style syntax? The customer is always right. Don&amp;#39;t like mustache-style curly braces in templates? You can change it! Maybe you can&amp;#39;t stand the fact that Vue has templates at all and would prefer to use JavaScript. Well, that&amp;#39;s ok too; add another &lt;a href="https://github.com/vuejs/babel-plugin-transform-vue-jsx" target="_blank" rel="noopener noreferrer"&gt;Babel plugin&lt;/a&gt;, and you can write Vue components with JSX inside of render functions a lot like React.&lt;/p&gt;

&lt;p&gt;As another example, let&amp;#39;s talk about Webpack. I think it is a fantastic piece of software. I&amp;#39;ve spent months learning how it works. I have given &lt;a href="https://rossta.net/talks/webpack-survival-guide-rails.html" target="_blank" rel="noopener noreferrer"&gt;a conference talk&lt;/a&gt; about it. However, usually, most of us, myself included, don’t want to maintain a custom configuration from project to project when we have deadlines to meet. The Vue CLI defaults are just fine. Still need to customize? Vue provides an API to extend the base configuration while making it easier to upgrade to take advantage of framework-supported improvements. There&amp;#39;s also nothing stopping you from ditching Webpack for Parcel or Rollup or whatever other transpiler or module bundler you prefer.&lt;/p&gt;

      &lt;h3 id="an-opinionated-chef" class="title title-h3"&gt;
        &lt;a name="an-opinionated-chef" class="anchor" href="#an-opinionated-chef"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        An opinionated chef
      &lt;/h3&gt;
    
&lt;p&gt;The core team consistently shows restraint in decided what features and improvements to fold into the framework. For example, much has been made of Vue&amp;#39;s choice to avoid class syntax for components as the default, e.g. &lt;a href="https://github.com/vuejs/vue/issues/2371" target="_blank" rel="noopener noreferrer"&gt;this issue on GitHub&lt;/a&gt;. There are excellent reasons for this decision, one of which is for Vue to work without a build environment. As a feature, this makes Vue incredibly easy to get up-and-running, for beginners learning the framework or for seasoned developers trying out a quick prototype. &amp;quot;It will fail,&amp;quot; some said. I suppose that remains to be seen, but after several years of arguing, the framework continues to thrive.&lt;/p&gt;

      &lt;h3 id="a-consistent-experience-for-all-customers" class="title title-h3"&gt;
        &lt;a name="a-consistent-experience-for-all-customers" class="anchor" href="#a-consistent-experience-for-all-customers"&gt;       &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"&gt;
       &lt;path d="M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z"&gt;&lt;/path&gt;
       &lt;/svg&gt;
&lt;/a&gt;
        A consistent experience for all customers
      &lt;/h3&gt;
    
&lt;p&gt;Scott Molinari made this comment on a previous post of mine:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;once the usage of the API is down pat, anyone and everyone who knows Vue is basically doing the same thing. This also means the need for best practices are held to a minimum and both of these advantages mean cognitive load over time is reduced. i.e. when you dig into someone else’s component, you understand it quickly. This all in turn means Vue code is more robust and in the end, it’s of higher quality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This point is especially important for both beginners and experienced developers alike. One of the significant tradeoffs to cobbling libraries together is that it can be harder to transition into new projects or unfamiliar parts of a large codebase. This approach may pay off for the right teams. In most cases, those tradeoffs aren&amp;#39;t worth it to me because I place much value on consistency.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;When my late wife and I lived in New York City, our favorite restaurant was &lt;a href="https://www.zenkichi.com/" target="_blank" rel="noopener noreferrer"&gt;Zenkichi&lt;/a&gt;. The cuisine is Japanese brasserie, but the experience is so much more. If you make it to the Williamsburg neighborhood in Brooklyn, you should try it.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/stock/zenkichi-tofu.jpg" alt="Zenkichi tofu" /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s housed in a small building with a wooden exterior and no discernable markings. Located near the East River in the Williamsburg of Brooklyn, it&amp;#39;s easy to miss from the outside.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/stock/zenkichi-entrance.jpg" alt="Zenkichi entrance" /&gt;&lt;/p&gt;

&lt;p&gt;The interior is dark, romantic, hand-crafted. Each table upstairs is like a small private dining room with a pull-down curtain and a small buzzer to summon the wait staff.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/blog/stock/zenkichi-tables.jpg" alt="Zenkichi tables" /&gt;&lt;/p&gt;

&lt;p&gt;Everytime we ate there, we chose the omakase menu. We left all the decision-making up to the chef. It&amp;#39;s difficult at first to place that kind of trust in someone else&amp;#39;s judgment. Giving up control is uncomfortable. However, this led to some delightful discoveries. Of course, not all the courses were to our liking. Nevertheless, we loved the experience.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The chef’s menu need not be reserved for special occasions in web development. With Vue.js, we have a framework that gives us all the ingredients we need to jump into building outstanding user interfaces. It also makes it relatively easy to swap out menu items to suit your preferences. So it would seem you &lt;a href="https://en.wikipedia.org/wiki/You_can%27t_have_your_cake_and_eat_it" target="_blank" rel="noopener noreferrer"&gt;can have your cake and eat it too&lt;/a&gt;? Just another reason why I find Vue.js so fulfilling.&lt;/p&gt;
</content>
  </entry>
</feed>
